// This file is auto-generated by @hey-api/openapi-ts

export type Account = {
    makerCommission: number;
    takerCommission: number;
    buyerCommission: number;
    sellerCommission: number;
    commissionRates: {
        maker: string;
        taker: string;
        buyer: string;
        seller: string;
    };
    canTrade: boolean;
    canWithdraw: boolean;
    canDeposit: boolean;
    brokered: boolean;
    requireSelfTradePrevention: boolean;
    preventSor: boolean;
    updateTime: number;
    accountType: string;
    balances: Array<{
        asset: string;
        free: string;
        locked: string;
    }>;
    permissions: Array<string>;
    uid: number;
};

export type Order = {
    symbol: string;
    origClientOrderId: string;
    orderId: number;
    /**
     * Unless OCO, value will be -1
     */
    orderListId: number;
    clientOrderId: string;
    transactTime: number;
    price: string;
    origQty: string;
    executedQty: string;
    cummulativeQuoteQty: string;
    status: string;
    timeInForce: string;
    type: string;
    side: string;
    selfTradePreventionMode: string;
};

export type OcoOrder = {
    orderListId: number;
    contingencyType: string;
    listStatusType: string;
    listOrderStatus: string;
    listClientOrderId: string;
    transactionTime: number;
    symbol: string;
    orders: Array<{
        symbol: string;
        orderId: number;
        clientOrderId: string;
    }>;
    orderReports: Array<{
        symbol: string;
        origClientOrderId: string;
        orderId: number;
        orderListId: number;
        clientOrderId: string;
        price: string;
        origQty: string;
        executedQty: string;
        cummulativeQuoteQty: string;
        status: string;
        timeInForce: string;
        type: string;
        side: string;
        stopPrice: string;
        selfTradePreventionMode: string;
        transactTime: number;
    }>;
};

export type MarginOcoOrder = {
    orderListId: number;
    contingencyType: string;
    listStatusType: string;
    listOrderStatus: string;
    listClientOrderId: string;
    transactionTime: number;
    symbol: string;
    isIsolated: boolean;
    orders: Array<{
        symbol: string;
        orderId: number;
        clientOrderId: string;
    }>;
    orderReports: Array<{
        symbol: string;
        origClientOrderId: string;
        orderId: number;
        orderListId: number;
        clientOrderId: string;
        price: string;
        origQty: string;
        executedQty: string;
        cummulativeQuoteQty: string;
        status: string;
        timeInForce: string;
        type: string;
        side: string;
        stopPrice: string;
    }>;
};

export type OrderDetails = {
    symbol: string;
    orderId: number;
    /**
     * Unless OCO, value will be -1
     */
    orderListId: number;
    clientOrderId: string;
    price: string;
    origQty: string;
    executedQty: string;
    cummulativeQuoteQty: string;
    status: string;
    timeInForce: string;
    type: string;
    side: string;
    stopPrice: string;
    icebergQty: string;
    time: number;
    updateTime: number;
    isWorking: boolean;
    workingTime: number;
    origQuoteOrderQty: string;
    selfTradePreventionMode: string;
    preventedMatchId?: number;
    preventedQuantity?: string;
};

export type OrderResponseAck = {
    symbol: string;
    orderId: number;
    orderListId: number;
    clientOrderId: string;
    transactTime: number;
};

export type OrderResponseResult = {
    symbol: string;
    orderId: number;
    orderListId: number;
    clientOrderId: string;
    transactTime: number;
    price: string;
    origQty: string;
    executedQty: string;
    cummulativeQuoteQty: string;
    status: string;
    timeInForce: string;
    type: string;
    side: string;
    strategyId?: number;
    strategyType?: number;
    workingTime: number;
    selfTradePreventionMode: string;
};

export type OrderResponseFull = {
    symbol: string;
    orderId: number;
    orderListId: number;
    clientOrderId: string;
    transactTime: number;
    price: string;
    origQty: string;
    executedQty: string;
    cummulativeQuoteQty: string;
    status: string;
    timeInForce: string;
    type: string;
    side: string;
    strategyId?: number;
    strategyType?: number;
    workingTime: number;
    selfTradePreventionMode: string;
    fills: Array<{
        price: string;
        qty: string;
        commission: string;
        commissionAsset: string;
    }>;
};

export type MarginOrder = {
    symbol: string;
    orderId: number;
    origClientOrderId: string;
    clientOrderId: string;
    price: string;
    origQty: string;
    executedQty: string;
    cummulativeQuoteQty: string;
    status: string;
    timeInForce: string;
    type: string;
    side: string;
};

export type MarginOrderDetail = {
    clientOrderId: string;
    cummulativeQuoteQty: string;
    executedQty: string;
    icebergQty: string;
    isWorking: boolean;
    orderId: number;
    origQty: string;
    price: string;
    side: string;
    status: string;
    stopPrice: string;
    symbol: string;
    isIsolated: boolean;
    time: number;
    timeInForce: string;
    type: string;
    updateTime: number;
    selfTradePreventionMode: string;
};

export type CanceledMarginOrderDetail = {
    symbol: string;
    isIsolated: boolean;
    origClientOrderId: string;
    orderId: number;
    orderListId: number;
    clientOrderId: string;
    price: string;
    origQty: string;
    executedQty: string;
    cummulativeQuoteQty: string;
    status: string;
    timeInForce: string;
    type: string;
    side: string;
};

export type MarginOrderResponseAck = {
    symbol: string;
    orderId: number;
    clientOrderId: string;
    isIsolated: boolean;
    transactTime: number;
};

export type MarginOrderResponseResult = {
    symbol: string;
    orderId: number;
    clientOrderId: string;
    transactTime: number;
    price: string;
    origQty: string;
    executedQty: string;
    cummulativeQuoteQty: string;
    status: string;
    timeInForce: string;
    type: string;
    isIsolated: boolean;
    side: string;
};

export type MarginOrderResponseFull = {
    symbol: string;
    orderId: number;
    clientOrderId: string;
    transactTime: number;
    price: string;
    origQty: string;
    executedQty: string;
    cummulativeQuoteQty: string;
    status: string;
    timeInForce: string;
    type: string;
    side: string;
    /**
     * will not return if no margin trade happens
     */
    marginBuyBorrowAmount: number;
    /**
     * will not return if no margin trade happens
     */
    marginBuyBorrowAsset: string;
    isIsolated: boolean;
    fills: Array<{
        price: string;
        qty: string;
        commission: string;
        commissionAsset: string;
    }>;
};

export type MarginTrade = {
    commission: string;
    commissionAsset: string;
    id: number;
    isBestMatch: boolean;
    isBuyer: boolean;
    isMaker: boolean;
    orderId: number;
    price: string;
    qty: string;
    symbol: string;
    isIsolated: boolean;
    time: number;
};

export type MarginTransferDetails = {
    rows: Array<{
        amount: string;
        asset: string;
        status: string;
        timestamp: number;
        txId: number;
        type?: string;
        transFrom: string;
        transTo: string;
    }>;
    total: number;
};

export type IsolatedMarginAccountInfo = {
    assets: Array<{
        baseAsset: {
            asset: string;
            borrowEnabled: boolean;
            borrowed: string;
            free: string;
            interest: string;
            locked: string;
            netAsset: string;
            netAssetOfBtc: string;
            repayEnabled: boolean;
            totalAsset: string;
        };
        quoteAsset: {
            asset: string;
            borrowEnabled: boolean;
            borrowed: string;
            free: string;
            interest: string;
            locked: string;
            netAsset: string;
            netAssetOfBtc: string;
            repayEnabled: boolean;
            totalAsset: string;
        };
        symbol: string;
        isolatedCreated: boolean;
        /**
         * true-enabled, false-disabled
         */
        enabled: boolean;
        marginLevel: string;
        /**
         * "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
         */
        marginLevelStatus: string;
        marginRatio: string;
        indexPrice: string;
        liquidatePrice: string;
        liquidateRate: string;
        tradeEnabled: boolean;
    }>;
    totalAssetOfBtc: string;
    totalLiabilityOfBtc: string;
    totalNetAssetOfBtc: string;
};

export type BookTickerList = Array<BookTicker>;

export type BookTicker = {
    symbol: string;
    bidPrice: string;
    bidQty: string;
    askPrice: string;
    askQty: string;
};

export type PriceTickerList = Array<PriceTicker>;

export type PriceTicker = {
    symbol: string;
    price: string;
};

export type RepaymentInfo = {
    loanCoin: string;
    remainingPrincipal: string;
    remainingInterest: string;
    collateralCoin: string;
    remainingCollateral: string;
    currentLTV: string;
    repayStatus: string;
};

export type RepaymentInfo2 = {
    loanCoin: string;
    collateralCoin: string;
    repayStatus: string;
};

export type TickerList = Array<Ticker>;

export type Ticker = {
    symbol: string;
    priceChange: string;
    priceChangePercent: string;
    prevClosePrice: string;
    lastPrice: string;
    bidPrice: string;
    bidQty: string;
    askPrice: string;
    askQty: string;
    openPrice: string;
    highPrice: string;
    lowPrice: string;
    volume: string;
    quoteVolume: string;
    openTime: number;
    closeTime: number;
    firstId: number;
    lastId: number;
    count: number;
};

export type DayTickerList = Array<DayTicker>;

export type DayTicker = {
    symbol: string;
    /**
     * Absolute price change
     */
    priceChange: string;
    /**
     * Relative price change in percent
     */
    priceChangePercent: string;
    /**
     * quoteVolume / volume
     */
    weightedAvgPrice: string;
    openPrice: string;
    highPrice: string;
    lowPrice: string;
    lastPrice: string;
    /**
     * Volume in base asset
     */
    volume: string;
    /**
     * Volume in quote asset
     */
    quoteVolume: string;
    openTime: number;
    closeTime: number;
    /**
     * Trade ID of the first trade in the interval
     */
    firstId: number;
    /**
     * Trade ID of the last trade in the interval
     */
    lastId: number;
    /**
     * Number of trades in the interval
     */
    count: number;
};

export type MyTrade = {
    symbol: string;
    /**
     * Trade id
     */
    id: number;
    orderId: number;
    orderListId: number;
    /**
     * Price
     */
    price: string;
    /**
     * Amount of base asset
     */
    qty: string;
    /**
     * Amount of quote asset
     */
    quoteQty: string;
    commission: string;
    commissionAsset: string;
    /**
     * Trade timestamp
     */
    time: number;
    isBuyer: boolean;
    isMaker: boolean;
    isBestMatch: boolean;
};

export type Transaction = {
    /**
     * transaction id
     */
    tranId: number;
};

export type Trade = {
    /**
     * trade id
     */
    id: number;
    /**
     * price
     */
    price: string;
    /**
     * amount of base asset
     */
    qty: string;
    /**
     * amount of quote asset
     */
    quoteQty: string;
    /**
     * Trade executed timestamp, as same as `T` in the stream
     */
    time: number;
    isBuyerMaker: boolean;
    isBestMatch: boolean;
};

export type AggTrade = {
    /**
     * Aggregate tradeId
     */
    a: number;
    /**
     * Price
     */
    p: string;
    /**
     * Quantity
     */
    q: string;
    /**
     * First tradeId
     */
    f: number;
    /**
     * Last tradeId
     */
    l: number;
    /**
     * Timestamp
     */
    T: boolean;
    /**
     * Was the buyer the maker?
     */
    m: boolean;
    /**
     * Was the trade the best price match?
     */
    M: boolean;
};

export type BnbBurnStatus = {
    spotBNBBurn: boolean;
    interestBNBBurn: boolean;
};

export type SnapshotSpot = {
    code: number;
    msg: string;
    snapshotVos: Array<{
        data: {
            balances: Array<{
                asset: string;
                free: string;
                locked: string;
            }>;
            totalAssetOfBtc: string;
        };
        type: string;
        updateTime: number;
    }>;
};

export type SnapshotMargin = {
    code: number;
    msg: string;
    snapshotVos: Array<{
        data: {
            marginLevel: string;
            totalAssetOfBtc: string;
            totalLiabilityOfBtc: string;
            totalNetAssetOfBtc: string;
            userAssets: Array<{
                asset: string;
                borrowed: string;
                free: string;
                interest: string;
                locked: string;
                netAsset: string;
            }>;
        };
        type: string;
        updateTime: number;
    }>;
};

export type SnapshotFutures = {
    code: number;
    msg: string;
    snapshotVos: Array<{
        data: {
            assets: Array<{
                asset: string;
                marginBalance: string;
                walletBalance: string;
            }>;
            position: Array<{
                entryPrice: string;
                markPrice: string;
                positionAmt: string;
                symbol: string;
                unRealizedProfit: string;
            }>;
        };
        type: string;
        updateTime: number;
    }>;
};

export type SubAccountUsdtFuturesDetails = {
    futureAccountResp: {
        email: string;
        assets: Array<{
            asset: string;
            initialMargin: string;
            maintenanceMargin: string;
            marginBalance: string;
            maxWithdrawAmount: string;
            openOrderInitialMargin: string;
            positionInitialMargin: string;
            unrealizedProfit: string;
            walletBalance: string;
        }>;
        canDeposit: boolean;
        canTrade: boolean;
        canWithdraw: boolean;
        feeTier: number;
        maxWithdrawAmount: string;
        totalInitialMargin: string;
        totalMaintenanceMargin: string;
        totalMarginBalance: string;
        totalOpenOrderInitialMargin: string;
        totalPositionInitialMargin: string;
        totalUnrealizedProfit: string;
        totalWalletBalance: string;
        updateTime: number;
    };
};

export type SubAccountCoinFuturesDetails = {
    email: string;
    assets: Array<{
        asset: string;
        initialMargin: string;
        maintenanceMargin: string;
        marginBalance: string;
        maxWithdrawAmount: string;
        openOrderInitialMargin: string;
        positionInitialMargin: string;
        unrealizedProfit: string;
        walletBalance: string;
    }>;
    canDeposit: boolean;
    canTrade: boolean;
    canWithdraw: boolean;
    feeTier: number;
    updateTime: number;
};

export type SubAccountUsdtFuturesSummary = {
    futureAccountSummaryResp: {
        totalInitialMargin: string;
        totalMaintenanceMargin: string;
        totalMarginBalance: string;
        totalOpenOrderInitialMargin: string;
        totalPositionInitialMargin: string;
        totalUnrealizedProfit: string;
        totalWalletBalance: string;
        /**
         * The sum of BUSD and USDT
         */
        asset: string;
        subAccountList: Array<{
            email: string;
            totalInitialMargin: string;
            totalMaintenanceMargin: string;
            totalMarginBalance: string;
            totalOpenOrderInitialMargin: string;
            totalPositionInitialMargin: string;
            totalUnrealizedProfit: string;
            totalWalletBalance: string;
            /**
             * The sum of BUSD and USDT
             */
            asset: string;
        }>;
    };
};

export type SubAccountCoinFuturesSummary = {
    deliveryAccountSummaryResp: {
        totalMarginBalanceOfBTC: string;
        totalUnrealizedProfitOfBTC: string;
        totalWalletBalanceOfBTC: string;
        asset: string;
        subAccountList: Array<{
            email: string;
            totalMarginBalance: string;
            totalUnrealizedProfit: string;
            totalWalletBalance: string;
            asset: string;
        }>;
    };
};

export type SubAccountUsdtFuturesPositionRisk = {
    futurePositionRiskVos: Array<{
        entryPrice: string;
        /**
         * current initial leverage
         */
        leverage: string;
        /**
         * notional value limit of current initial leverage
         */
        maxNotional: string;
        liquidationPrice: string;
        markPrice: string;
        positionAmount: string;
        symbol: string;
        unrealizedProfit: string;
    }>;
};

export type SubAccountCoinFuturesPositionRisk = {
    deliveryPositionRiskVos: Array<{
        entryPrice: string;
        markPrice: string;
        leverage: string;
        isolated: string;
        isolatedWallet: string;
        isolatedMargin: string;
        isAutoAddMargin: string;
        positionSide: string;
        positionAmount: string;
        symbol: string;
        unrealizedProfit: string;
    }>;
};

export type _Error = {
    /**
     * Error code
     */
    code: number;
    /**
     * Error message
     */
    msg: string;
};

export type GetCrossMargingTransferHistoryType = 'ROLL_IN' | 'ROLL_OUT';

/**
 * Determines whether to use BNB to pay for trading fees on SPOT
 */
export type SpotBnbBurn = 'true' | 'false';

/**
 * Determines whether to use BNB to pay for margin loan interest
 */
export type InterestBnbBurn = 'true' | 'false';

/**
 * * `0` - pending
 * * `6` - credited but cannot withdraw
 * * `1` - success
 */
export type DepositHistory = number;

/**
 * * `0` - Email Sent
 * * `1` - Cancelled
 * * `2` - Awaiting Approval
 * * `3` - Rejected
 * * `4` - Processing
 * * `5` - Failure
 * * `6` - Completed
 */
export type WithdrawHistory = number;

/**
 * MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet
 */
export type QueryConvertTransfer = 'MAIN' | 'CARD';

export type QuerySubAccountList = 'true' | 'false';

export type Asset = string;

export type Amount = number;

/**
 * Current querying page. Start from 1. Default:1
 */
export type Current = number;

/**
 * Coin name
 */
export type OptionalCoin = string;

/**
 * Coin name
 */
export type Coin = string;

export type Side = 'SELL' | 'BUY';

export type OptionalSide = 'SELL' | 'BUY';

/**
 * Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
 */
export type PositionSide = 'BOTH' | 'LONG' | 'SHORT';

/**
 * Default:10 Max:100
 */
export type Size = number;

/**
 * Trading symbol, e.g. BNBUSDT
 */
export type Symbol = string;

/**
 * Trading symbol, e.g. BNBUSDT
 */
export type OptionalSymbol = string;

export type OptionalAsset = string;

/**
 * Default 500; max 1000.
 */
export type Limit = number;

/**
 * Default 50, Max 50
 */
export type Limit50 = number;

/**
 * User websocket listen key
 */
export type ListenKey = string;

/**
 * Trade id to fetch from. Default gets most recent trades.
 */
export type FromId = number;

export type Offset = number;

/**
 * Order id
 */
export type OrderId = number;

/**
 * Order list id
 */
export type OrderListId = number;

/**
 * Order id from client
 */
export type OrigClientOrderId = string;

/**
 * A unique Id for the entire orderList
 */
export type ListClientOrderId = string;

/**
 * Used to uniquely identify this cancel. Automatically generated by default
 */
export type NewClientOrderId = string;

export type StrategyId = number;

/**
 * The value cannot be less than 1000000.
 */
export type StrategyType = number;

/**
 * Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
 */
export type NewOrderRespType = 'ACK' | 'RESULT' | 'FULL';

/**
 * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
 */
export type SelfTradePreventionMode = 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';

/**
 * Set the response JSON.
 */
export type OcoNewOrderRespType = 'ACK' | 'RESULT' | 'FULL';

/**
 * UTC timestamp in ms
 */
export type StartTime = number;

/**
 * UTC timestamp in ms
 */
export type EndTime = number;

/**
 * UTC timestamp in ms
 */
export type StartTimeReq = number;

/**
 * UTC timestamp in ms
 */
export type EndTimeReq = number;

/**
 * Coin used as collateral
 */
export type CollateralCoinReq = string;

/**
 * Coin used as collateral
 */
export type CollateralCoin = string;

export type CollateralAmount = number;

/**
 * Coin loaned
 */
export type LoanCoinReq = string;

/**
 * Coin loaned
 */
export type LoanCoin = string;

/**
 * Loan amount
 */
export type LoanAmount = number;

/**
 * Order price
 */
export type Price = number;

/**
 * Order price
 */
export type OptionalPrice = number;

export type Quantity = number;

/**
 * Order quantity
 */
export type OptionalQuantity = number;

/**
 * The value cannot be greater than 60000
 */
export type RecvWindow = number;

/**
 * UTC timestamp in ms
 */
export type Timestamp = number;

/**
 * Order time in force
 */
export type TimeInForce = 'GTC' | 'IOC' | 'FOK';

export type Type = number;

/**
 * Order type
 */
export type OrderType = 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';

/**
 * Universal transfer type
 */
export type UnivTransferType = 'MAIN_C2C' | 'MAIN_UMFUTURE' | 'MAIN_CMFUTURE' | 'MAIN_MARGIN' | 'MAIN_MINING' | 'C2C_MAIN' | 'C2C_UMFUTURE' | 'C2C_MINING' | 'C2C_MARGIN' | 'UMFUTURE_MAIN' | 'UMFUTURE_C2C' | 'UMFUTURE_MARGIN' | 'CMFUTURE_MAIN' | 'CMFUTURE_MARGIN' | 'MARGIN_MAIN' | 'MARGIN_UMFUTURE' | 'MARGIN_CMFUTURE' | 'MARGIN_MINING' | 'MARGIN_C2C' | 'MINING_MAIN' | 'MINING_UMFUTURE' | 'MINING_C2C' | 'MINING_MARGIN' | 'MAIN_PAY' | 'PAY_MAIN' | 'ISOLATEDMARGIN_MARGIN' | 'MARGIN_ISOLATEDMARGIN' | 'ISOLATEDMARGIN_ISOLATEDMARGIN';

/**
 * Signature
 */
export type Signature = string;

/**
 * Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
 */
export type StopPrice = number;

/**
 * * `TRUE` - For isolated margin
 * * `FALSE` - Default, not for isolated margin
 */
export type IsIsolatedMargin = 'TRUE' | 'FALSE';

export type TransFrom = 'SPOT' | 'ISOLATED_MARGIN';

export type OptionalTransFrom = 'SPOT' | 'ISOLATED_MARGIN';

export type TransTo = 'SPOT' | 'ISOLATED_MARGIN';

export type OptionalTransTo = 'SPOT' | 'ISOLATED_MARGIN';

/**
 * Max 5 symbols can be sent; separated by ','
 */
export type Symbols = string;

export type ArraySymbols = string;

/**
 * Supported values: FULL or MINI.
 * If none provided, the default is FULL
 */
export type TickerType = 'FULL' | 'MINI';

export type Permissions = string;

/**
 * * `0` - deposit
 * * `1` - withdraw
 */
export type TransactionType = number;

export type BeginTime = number;

/**
 * Default 1
 */
export type Page = number;

/**
 * Default 100, max 500
 */
export type Rows = number;

/**
 * Quote quantity
 */
export type QuoteOrderQty = number;

/**
 * Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
 */
export type IcebergQty = number;

/**
 * Default `ALL`
 */
export type FlexibleProductStatus = 'ALL' | 'SUBSCRIBABLE' | 'UNSUBSCRIBABLE';

/**
 * Default `ALL`
 */
export type OptionalFlexibleProductStatus = 'ALL' | 'SUBSCRIBABLE' | 'UNSUBSCRIBABLE';

/**
 * Default `ALL`
 */
export type OptionalFixedAndActivityProductStatus = 'ALL' | 'SUBSCRIBABLE' | 'UNSUBSCRIBABLE';

/**
 * Default `ALL`
 */
export type Featured = 'ALL' | 'TRUE';

export type FlexibleProductId = string;

export type FixedAndActivityProjectId = string;

export type FlexibleProductType = 'FAST' | 'NORMAL';

export type FixedAndActivityProductType = 'ACTIVITY' | 'CUSTOMIZED_FIXED';

/**
 * Default `START_TIME`
 */
export type SortBy = 'START_TIME' | 'LOT_SIZE' | 'INTEREST_RATE' | 'DURATION';

/**
 * default "true"
 */
export type IsSortAsc = boolean;

export type ProjectId = string;

export type Lot = string;

export type NeedBtcValuation = 'true' | 'false';

/**
 * * `DAILY` - for flexible
 * * `ACTIVITY` - for activity
 * * `CUSTOMIZED_FIXED` for fixed
 */
export type LendingType = 'DAILY' | 'ACTIVITY' | 'CUSTOMIZED_FIXED';

export type OptionalPositionId = string;

export type PositionId = string;

export type PositionStatus = 'HOLDING' | 'REDEEMED';

/**
 * Mining Account
 */
export type UserName = string;

/**
 * Algorithm(sha256)
 */
export type Algo = string;

/**
 * Page number, default is first page, start form 1
 */
export type PageIndex = number;

/**
 * sort sequence(default=0)0 positive sequence, 1 negative sequence
 */
export type Sort = number;

/**
 * Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time
 */
export type SortColumn = number;

/**
 * miners status(default=0)0 all, 1 valid, 2 invalid, 3 failure
 */
export type WorkerStatus = number;

/**
 * Search date, millisecond timestamp, while empty query all
 */
export type StartDate = string;

/**
 * Search date, millisecond timestamp, while empty query all
 */
export type EndDate = string;

/**
 * Number of pages, minimum 10, maximum 200
 */
export type PageSize = string;

/**
 * MIN 1, MAX 100; Default 100
 */
export type SmallPageSize = string;

/**
 * Mining ID
 */
export type ConfigId = string;

/**
 * Mining Account
 */
export type ToPoolUser = string;

/**
 * Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)
 */
export type HashRate = string;

/**
 * Miner’s name
 */
export type WorkerName = string;

/**
 * BTCDOWN, BTCUP
 */
export type BlvtTokenName = string;

/**
 * BTCDOWN, BTCUP
 */
export type OptionalBlvtTokenName = string;

export type PoolId = number;

export type OptionalPoolId = number;

export type QuoteAsset = string;

export type BaseAsset = string;

export type QuoteQty = number;

/**
 * Sub-account email
 */
export type SubAccountEmail = string;

/**
 * Sub-account email
 */
export type OptionalSubAccountEmail = string;

/**
 * Sub-account email
 */
export type OptionalSubAccountFromEmail = string;

/**
 * Sub-account email
 */
export type OptionalSubAccountToEmail = string;

/**
 * Sender email
 */
export type SubAccountFromEmail = string;

/**
 * Recipient email
 */
export type SubAccountToEmail = string;

/**
 * Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
 */
export type FromSymbol = string;

/**
 * Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
 */
export type ToSymbol = string;

/**
 * Isolated symbol
 */
export type IsolatedSymbol = string;

/**
 * Default: false. Set to true for archived data from 6 months ago
 */
export type Archived = string;

/**
 * Default `NO_SIDE_EFFECT`
 */
export type SideEffectType = 'NO_SIDE_EFFECT' | 'MARGIN_BUY' | 'AUTO_REPAY';

/**
 * kline intervals
 */
export type Interval = '1s' | '1m' | '3m' | '5m' | '15m' | '30m' | '1h' | '2h' | '4h' | '6h' | '8h' | '12h' | '1d' | '3d' | '1w' | '1M';

/**
 * * `1` - transfer from main account to margin account
 * * `2` - transfer from margin account to main account
 */
export type CrossMarginAccountTransferType = number;

/**
 * A unique Id for the limit order
 */
export type LimitClientOrderId = string;

export type LimitStrategyId = number;

/**
 * The value cannot be less than 1000000.
 */
export type LimitStrategyType = number;

export type LimitIcebergQty = number;

/**
 * A unique Id for the stop loss/stop loss limit leg
 */
export type StopClientOrderId = string;

export type StopStrategyId = number;

export type StopStrategyType = number;

export type OcoStopPrice = number;

/**
 * If provided, stopLimitTimeInForce is required.
 */
export type StopLimitPrice = number;

export type StopIcebergQty = number;

export type StopLimitTimeInForce = 'GTC' | 'FOK' | 'IOC';

export type SubAccountApiKey = string;

/**
 * true or false
 */
export type IpRestrict = boolean;

/**
 * true or false
 */
export type ThirdParty = boolean;

/**
 * third party IP list name
 */
export type ThirdPartyName = string;

/**
 * Can be added in batches, separated by commas
 */
export type IpAddress = string;

/**
 * Can be added in batches, separated by commas
 */
export type OptionalIpAddress = string;

/**
 * Defaults to user's vip level
 */
export type VipLevel = number;

export type ClientTranId = string;

/**
 * Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
 */
export type OptionalTrailingDelta = number;

export type ProductId = string;

/**
 * * `TRUE` - For isolated margin
 * * `FALSE` - Default, not for isolated margin
 */
export type OptionalIsIsolated = string;

export type Email = string;

export type PreventedMatchId = number;

export type CancelRestrictions = 'ONLY_NEW' | 'ONLY_PARTIALLY_FILLED';

export type Network = string;

export type TargetAsset = string;

export type AutoRepay = boolean;

/**
 * NONE: switch off the plan,
 * STANDARD: standard plan,
 * ADVANCED: advanced plan;
 */
export type AutoCompoundPlan = 'NONE' | 'STANDARD' | 'ADVANCE';

/**
 * Supported values: LIMIT,LIMIT_MAKER
 */
export type WorkingType = 'LIMIT' | 'LIMIT_MAKER';

/**
 * BUY,SELL
 */
export type WorkingSide = 'BUY' | 'SELL';

/**
 * Arbitrary unique ID among open orders for the working order. Automatically generated if not sent.
 */
export type WorkingClientOrderId = string;

export type WorkingPrice = number;

/**
 * Sets the quantity for the working order.
 */
export type WorkingQuantity = number;

/**
 * This can only be used if workingTimeInForce is GTC.
 */
export type WorkingIcebergQty = number;

/**
 * GTC, IOC, FOK
 */
export type WorkingTimeInForce = 'GTC' | 'IOC' | 'FOK';

/**
 * Supported values: Order Types Note that MARKET orders using quoteOrderQty are not supported.
 */
export type PendingType = 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';

/**
 * BUY,SELL
 */
export type PendingSide = 'BUY' | 'SELL';

/**
 * Arbitrary unique ID among open orders for the pending order. Automatically generated if not sent.
 */
export type PendingClientOrderId = string;

export type PendingPrice = number;

export type PendingStopPrice = number;

export type PendingTrailingDelta = number;

/**
 * Sets the quantity for the pending order.
 */
export type PendingQuantity = number;

/**
 * This can only be used if pendingTimeInForce is GTC.
 */
export type PendingIcebergQty = number;

/**
 * GTC, IOC, FOK
 */
export type PendingTimeInForce = 'GTC' | 'IOC' | 'FOK';

/**
 * Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT
 */
export type PendingAboveType = 'LIMIT_MAKER' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT';

/**
 * Arbitrary unique ID among open orders for the pending above order. Automatically generated if not sent.
 */
export type PendingAboveClientOrderId = string;

export type PendingAbovePrice = number;

export type PendingAboveStopPrice = number;

export type PendingAboveTrailingDelta = number;

/**
 * This can only be used if pendingAboveTimeInForce is GTC.
 */
export type PendingAboveIcebergQty = number;

export type PendingAboveTimeInForce = 'GTC' | 'IOC' | 'FOK';

/**
 * Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT
 */
export type PendingBelowType = 'LIMIT_MAKER' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT';

/**
 * Arbitrary unique ID among open orders for the pending below order. Automatically generated if not sent.
 */
export type PendingBelowClientOrderId = string;

export type PendingBelowPrice = number;

export type PendingBelowStopPrice = number;

export type PendingBelowTrailingDelta = number;

/**
 * This can only be used if pendingBelowTimeInForce is GTC.
 */
export type PendingBelowIcebergQty = number;

export type PendingBelowTimeInForce = 'GTC' | 'IOC' | 'FOK';

export type GetApiV3PingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v3/ping';
};

export type GetApiV3PingResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetApiV3PingResponse = GetApiV3PingResponses[keyof GetApiV3PingResponses];

export type GetApiV3TimeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v3/time';
};

export type GetApiV3TimeResponses = {
    /**
     * Binance server UTC timestamp
     */
    200: {
        serverTime: number;
    };
};

export type GetApiV3TimeResponse = GetApiV3TimeResponses[keyof GetApiV3TimeResponses];

export type GetApiV3ExchangeInfoData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        symbols?: string;
        permissions?: string;
    };
    url: '/api/v3/exchangeInfo';
};

export type GetApiV3ExchangeInfoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3ExchangeInfoError = GetApiV3ExchangeInfoErrors[keyof GetApiV3ExchangeInfoErrors];

export type GetApiV3ExchangeInfoResponses = {
    /**
     * Current exchange trading rules and symbol information
     */
    200: {
        timezone: string;
        serverTime: number;
        rateLimits: Array<{
            rateLimitType: string;
            interval: string;
            intervalNum: number;
            limit: number;
        }>;
        exchangeFilters: Array<{
            [key: string]: unknown;
        }>;
        symbols: Array<{
            symbol: string;
            status: string;
            baseAsset: string;
            baseAssetPrecision: number;
            quoteAsset: string;
            quoteAssetPrecision: number;
            baseCommissionPrecision: number;
            quoteCommissionPrecision: number;
            orderTypes: Array<string>;
            icebergAllowed: boolean;
            ocoAllowed: boolean;
            otoAllowed: boolean;
            quoteOrderQtyMarketAllowed: boolean;
            allowTrailingStop: boolean;
            cancelReplaceAllowed: boolean;
            isSpotTradingAllowed: boolean;
            isMarginTradingAllowed: boolean;
            filters: Array<{
                filterType: string;
                minPrice: string;
                maxPrice: string;
                tickSize: string;
            }>;
            permissions: Array<string>;
            permissionSets: Array<Array<string>>;
            defaultSelfTradePreventionMode: string;
            allowedSelfTradePreventionModes: Array<string>;
        }>;
    };
};

export type GetApiV3ExchangeInfoResponse = GetApiV3ExchangeInfoResponses[keyof GetApiV3ExchangeInfoResponses];

export type GetApiV3DepthData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * If limit > 5000, then the response will truncate to 5000
         */
        limit?: number;
    };
    url: '/api/v3/depth';
};

export type GetApiV3DepthErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3DepthError = GetApiV3DepthErrors[keyof GetApiV3DepthErrors];

export type GetApiV3DepthResponses = {
    /**
     * Order book
     */
    200: {
        lastUpdateId: number;
        bids: Array<Array<string>>;
        asks: Array<Array<string>>;
    };
};

export type GetApiV3DepthResponse = GetApiV3DepthResponses[keyof GetApiV3DepthResponses];

export type GetApiV3TradesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
    };
    url: '/api/v3/trades';
};

export type GetApiV3TradesErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3TradesError = GetApiV3TradesErrors[keyof GetApiV3TradesErrors];

export type GetApiV3TradesResponses = {
    /**
     * Trade list
     */
    200: Array<Trade>;
};

export type GetApiV3TradesResponse = GetApiV3TradesResponses[keyof GetApiV3TradesResponses];

export type GetApiV3HistoricalTradesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * Trade id to fetch from. Default gets most recent trades.
         */
        fromId?: number;
    };
    url: '/api/v3/historicalTrades';
};

export type GetApiV3HistoricalTradesResponses = {
    /**
     * Trade list
     */
    200: Array<Trade>;
};

export type GetApiV3HistoricalTradesResponse = GetApiV3HistoricalTradesResponses[keyof GetApiV3HistoricalTradesResponses];

export type GetApiV3AggTradesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Trade id to fetch from. Default gets most recent trades.
         */
        fromId?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
    };
    url: '/api/v3/aggTrades';
};

export type GetApiV3AggTradesErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3AggTradesError = GetApiV3AggTradesErrors[keyof GetApiV3AggTradesErrors];

export type GetApiV3AggTradesResponses = {
    /**
     * Trade list
     */
    200: Array<AggTrade>;
};

export type GetApiV3AggTradesResponse = GetApiV3AggTradesResponses[keyof GetApiV3AggTradesResponses];

export type GetApiV3KlinesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * kline intervals
         */
        interval: '1s' | '1m' | '3m' | '5m' | '15m' | '30m' | '1h' | '2h' | '4h' | '6h' | '8h' | '12h' | '1d' | '3d' | '1w' | '1M';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default: 0 (UTC)
         */
        timeZone?: string;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
    };
    url: '/api/v3/klines';
};

export type GetApiV3KlinesErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3KlinesError = GetApiV3KlinesErrors[keyof GetApiV3KlinesErrors];

export type GetApiV3KlinesResponses = {
    /**
     * Kline data
     */
    200: Array<Array<number | string>>;
};

export type GetApiV3KlinesResponse = GetApiV3KlinesResponses[keyof GetApiV3KlinesResponses];

export type GetApiV3UiKlinesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * kline intervals
         */
        interval: '1s' | '1m' | '3m' | '5m' | '15m' | '30m' | '1h' | '2h' | '4h' | '6h' | '8h' | '12h' | '1d' | '3d' | '1w' | '1M';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default: 0 (UTC)
         */
        timeZone?: string;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
    };
    url: '/api/v3/uiKlines';
};

export type GetApiV3UiKlinesErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3UiKlinesError = GetApiV3UiKlinesErrors[keyof GetApiV3UiKlinesErrors];

export type GetApiV3UiKlinesResponses = {
    /**
     * UIKline data
     */
    200: Array<Array<number | string>>;
};

export type GetApiV3UiKlinesResponse = GetApiV3UiKlinesResponses[keyof GetApiV3UiKlinesResponses];

export type GetApiV3AvgPriceData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
    };
    url: '/api/v3/avgPrice';
};

export type GetApiV3AvgPriceErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3AvgPriceError = GetApiV3AvgPriceErrors[keyof GetApiV3AvgPriceErrors];

export type GetApiV3AvgPriceResponses = {
    /**
     * Average price
     */
    200: {
        /**
         * Average price interval (in minutes)
         */
        mins: number;
        /**
         * Average price
         */
        price: string;
        /**
         * Last trade time
         */
        closeTime: number;
    };
};

export type GetApiV3AvgPriceResponse = GetApiV3AvgPriceResponses[keyof GetApiV3AvgPriceResponses];

export type GetApiV3Ticker24HrData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        symbols?: string;
        /**
         * Supported values: FULL or MINI.
         * If none provided, the default is FULL
         */
        type?: 'FULL' | 'MINI';
    };
    url: '/api/v3/ticker/24hr';
};

export type GetApiV3Ticker24HrErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3Ticker24HrError = GetApiV3Ticker24HrErrors[keyof GetApiV3Ticker24HrErrors];

export type GetApiV3Ticker24HrResponses = {
    /**
     * 24hr ticker
     */
    200: Ticker | TickerList;
};

export type GetApiV3Ticker24HrResponse = GetApiV3Ticker24HrResponses[keyof GetApiV3Ticker24HrResponses];

export type GetApiV3TickerTradingDayData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        symbols?: string;
        /**
         * Default: 0 (UTC)
         */
        timeZone?: string;
        /**
         * Supported values: FULL or MINI.
         * If none provided, the default is FULL
         */
        type?: 'FULL' | 'MINI';
    };
    url: '/api/v3/ticker/tradingDay';
};

export type GetApiV3TickerTradingDayErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3TickerTradingDayError = GetApiV3TickerTradingDayErrors[keyof GetApiV3TickerTradingDayErrors];

export type GetApiV3TickerTradingDayResponses = {
    /**
     * Trading day ticker
     */
    200: DayTicker | DayTickerList;
};

export type GetApiV3TickerTradingDayResponse = GetApiV3TickerTradingDayResponses[keyof GetApiV3TickerTradingDayResponses];

export type GetApiV3TickerPriceData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        symbols?: string;
    };
    url: '/api/v3/ticker/price';
};

export type GetApiV3TickerPriceErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3TickerPriceError = GetApiV3TickerPriceErrors[keyof GetApiV3TickerPriceErrors];

export type GetApiV3TickerPriceResponses = {
    /**
     * Price ticker
     */
    200: PriceTicker | PriceTickerList;
};

export type GetApiV3TickerPriceResponse = GetApiV3TickerPriceResponses[keyof GetApiV3TickerPriceResponses];

export type GetApiV3TickerBookTickerData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        symbols?: string;
    };
    url: '/api/v3/ticker/bookTicker';
};

export type GetApiV3TickerBookTickerErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3TickerBookTickerError = GetApiV3TickerBookTickerErrors[keyof GetApiV3TickerBookTickerErrors];

export type GetApiV3TickerBookTickerResponses = {
    /**
     * Order book ticker
     */
    200: BookTicker | BookTickerList;
};

export type GetApiV3TickerBookTickerResponse = GetApiV3TickerBookTickerResponses[keyof GetApiV3TickerBookTickerResponses];

export type GetApiV3TickerData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        symbols?: string;
        /**
         * Defaults to 1d if no parameter provided.
         * Supported windowSize values:
         * 1m,2m....59m for minutes
         * 1h, 2h....23h - for hours
         * 1d...7d - for days.
         *
         * Units cannot be combined (e.g. 1d2h is not allowed)
         */
        windowSize?: string;
        /**
         * Supported values: FULL or MINI.
         * If none provided, the default is FULL
         */
        type?: string;
    };
    url: '/api/v3/ticker';
};

export type GetApiV3TickerErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetApiV3TickerError = GetApiV3TickerErrors[keyof GetApiV3TickerErrors];

export type GetApiV3TickerResponses = {
    /**
     * Rolling price ticker
     */
    200: {
        symbol: string;
        priceChange: string;
        priceChangePercent: string;
        weightedAvgPrice: string;
        openPrice: string;
        highPrice: string;
        lowPrice: string;
        lastPrice: string;
        volume: string;
        quoteVolume: string;
        openTime: number;
        closeTime: number;
        firstId: number;
        lastId: number;
        count: number;
    };
};

export type GetApiV3TickerResponse = GetApiV3TickerResponses[keyof GetApiV3TickerResponses];

export type PostApiV3OrderTestData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        side: 'SELL' | 'BUY';
        /**
         * Order type
         */
        type: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';
        /**
         * Order time in force
         */
        timeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Order quantity
         */
        quantity?: number;
        /**
         * Quote quantity
         */
        quoteOrderQty?: number;
        /**
         * Order price
         */
        price?: number;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        strategyId?: number;
        /**
         * The value cannot be less than 1000000.
         */
        strategyType?: number;
        /**
         * Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
         */
        stopPrice?: number;
        /**
         * Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
         */
        trailingDelta?: number;
        /**
         * Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
         */
        icebergQty?: number;
        /**
         * Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * Default: false
         */
        computeCommissionRates?: boolean;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/order/test';
};

export type PostApiV3OrderTestErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostApiV3OrderTestError = PostApiV3OrderTestErrors[keyof PostApiV3OrderTestErrors];

export type PostApiV3OrderTestResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostApiV3OrderTestResponse = PostApiV3OrderTestResponses[keyof PostApiV3OrderTestResponses];

export type DeleteApiV3OrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Order id
         */
        orderId?: number;
        /**
         * Order id from client
         */
        origClientOrderId?: string;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        cancelRestrictions?: 'ONLY_NEW' | 'ONLY_PARTIALLY_FILLED';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/order';
};

export type DeleteApiV3OrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteApiV3OrderError = DeleteApiV3OrderErrors[keyof DeleteApiV3OrderErrors];

export type DeleteApiV3OrderResponses = {
    /**
     * Cancelled order
     */
    200: Order;
};

export type DeleteApiV3OrderResponse = DeleteApiV3OrderResponses[keyof DeleteApiV3OrderResponses];

export type GetApiV3OrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Order id
         */
        orderId?: number;
        /**
         * Order id from client
         */
        origClientOrderId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/order';
};

export type GetApiV3OrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3OrderError = GetApiV3OrderErrors[keyof GetApiV3OrderErrors];

export type GetApiV3OrderResponses = {
    /**
     * Order details
     */
    200: OrderDetails;
};

export type GetApiV3OrderResponse = GetApiV3OrderResponses[keyof GetApiV3OrderResponses];

export type PostApiV3OrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        side: 'SELL' | 'BUY';
        /**
         * Order type
         */
        type: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';
        /**
         * Order time in force
         */
        timeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Order quantity
         */
        quantity?: number;
        /**
         * Quote quantity
         */
        quoteOrderQty?: number;
        /**
         * Order price
         */
        price?: number;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        strategyId?: number;
        /**
         * The value cannot be less than 1000000.
         */
        strategyType?: number;
        /**
         * Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
         */
        stopPrice?: number;
        /**
         * Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
         */
        trailingDelta?: number;
        /**
         * Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
         */
        icebergQty?: number;
        /**
         * Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/order';
};

export type PostApiV3OrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostApiV3OrderError = PostApiV3OrderErrors[keyof PostApiV3OrderErrors];

export type PostApiV3OrderResponses = {
    /**
     * Order result
     */
    200: OrderResponseAck | OrderResponseResult | OrderResponseFull;
};

export type PostApiV3OrderResponse = PostApiV3OrderResponses[keyof PostApiV3OrderResponses];

export type PostApiV3OrderCancelReplaceData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        side: 'SELL' | 'BUY';
        /**
         * Order type
         */
        type: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';
        /**
         * - `STOP_ON_FAILURE` If the cancel request fails, the new order placement will not be attempted.
         * - `ALLOW_FAILURES` If new order placement will be attempted even if cancel request fails.
         */
        cancelReplaceMode: string;
        cancelRestrictions?: 'ONLY_NEW' | 'ONLY_PARTIALLY_FILLED';
        /**
         * Order time in force
         */
        timeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Order quantity
         */
        quantity?: number;
        /**
         * Quote quantity
         */
        quoteOrderQty?: number;
        /**
         * Order price
         */
        price?: number;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        cancelNewClientOrderId?: string;
        /**
         * Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.
         */
        cancelOrigClientOrderId?: string;
        /**
         * Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence.
         */
        cancelOrderId?: number;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        strategyId?: number;
        /**
         * The value cannot be less than 1000000.
         */
        strategyType?: number;
        /**
         * Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
         */
        stopPrice?: number;
        /**
         * Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
         */
        trailingDelta?: number;
        /**
         * Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
         */
        icebergQty?: number;
        /**
         * Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/order/cancelReplace';
};

export type PostApiV3OrderCancelReplaceErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostApiV3OrderCancelReplaceError = PostApiV3OrderCancelReplaceErrors[keyof PostApiV3OrderCancelReplaceErrors];

export type PostApiV3OrderCancelReplaceResponses = {
    /**
     * Operation details
     */
    200: {
        cancelResult: string;
        newOrderResult: string;
        cancelResponse: {
            symbol: string;
            origClientOrderId: string;
            orderId: number;
            orderListId: number;
            clientOrderId: string;
            price: string;
            origQty: string;
            executedQty: string;
            cummulativeQuoteQty: string;
            status: string;
            timeInForce: string;
            type: string;
            side: string;
            selfTradePreventionMode: string;
            transactTime?: number;
        };
        newOrderResponse: {
            symbol: string;
            orderId: number;
            orderListId: number;
            clientOrderId: string;
            transactTime: number;
            price: string;
            origQty: string;
            executedQty: string;
            cummulativeQuoteQty: string;
            status: string;
            timeInForce: string;
            type: string;
            side: string;
            workingTime: number;
            fills: Array<string>;
            selfTradePreventionMode: string;
        };
    };
};

export type PostApiV3OrderCancelReplaceResponse = PostApiV3OrderCancelReplaceResponses[keyof PostApiV3OrderCancelReplaceResponses];

export type DeleteApiV3OpenOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/openOrders';
};

export type DeleteApiV3OpenOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteApiV3OpenOrdersError = DeleteApiV3OpenOrdersErrors[keyof DeleteApiV3OpenOrdersErrors];

export type DeleteApiV3OpenOrdersResponses = {
    /**
     * Cancelled orders
     */
    200: Array<Order | OcoOrder>;
};

export type DeleteApiV3OpenOrdersResponse = DeleteApiV3OpenOrdersResponses[keyof DeleteApiV3OpenOrdersResponses];

export type GetApiV3OpenOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/openOrders';
};

export type GetApiV3OpenOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3OpenOrdersError = GetApiV3OpenOrdersErrors[keyof GetApiV3OpenOrdersErrors];

export type GetApiV3OpenOrdersResponses = {
    /**
     * Current open orders
     */
    200: Array<OrderDetails>;
};

export type GetApiV3OpenOrdersResponse = GetApiV3OpenOrdersResponses[keyof GetApiV3OpenOrdersResponses];

export type GetApiV3AllOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Order id
         */
        orderId?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/allOrders';
};

export type GetApiV3AllOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3AllOrdersError = GetApiV3AllOrdersErrors[keyof GetApiV3AllOrdersErrors];

export type GetApiV3AllOrdersResponses = {
    /**
     * Current open orders
     */
    200: Array<OrderDetails>;
};

export type GetApiV3AllOrdersResponse = GetApiV3AllOrdersResponses[keyof GetApiV3AllOrdersResponses];

export type PostApiV3OrderListOcoData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Arbitrary unique ID among open order lists. Automatically generated if not sent.
         * A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
         * `listClientOrderId` is distinct from the `aboveClientOrderId` and the `belowCLientOrderId`.
         */
        listClientOrderId?: string;
        side: 'SELL' | 'BUY';
        quantity: number;
        /**
         * Supported values : `STOP_LOSS_LIMIT`, `STOP_LOSS`, `LIMIT_MAKER`
         */
        aboveType: string;
        /**
         * Arbitrary unique ID among open orders for the above order. Automatically generated if not sent
         */
        aboveClientOrderId?: string;
        /**
         * Note that this can only be used if `aboveTimeInForce` is `GTC`.
         */
        aboveIcebergQty?: number;
        abovePrice?: number;
        /**
         * Can be used if `aboveType` is `STOP_LOSS` or `STOP_LOSS_LIMIT`.
         * Either `aboveStopPrice` or `aboveTrailingDelta` or both, must be specified.
         */
        aboveStopPrice?: number;
        aboveTrailingDelta?: number;
        /**
         * Required if the `aboveType` is `STOP_LOSS_LIMIT`.
         */
        aboveTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Arbitrary numeric value identifying the above order within an order strategy.
         */
        aboveStrategyId?: number;
        /**
         * Arbitrary numeric value identifying the above order strategy.
         * Values smaller than 1000000 are reserved and cannot be used.
         */
        aboveStrategyType?: number;
        /**
         * Supported values : `STOP_LOSS_LIMIT`, `STOP_LOSS`, `LIMIT_MAKER`
         */
        belowType: string;
        /**
         * Arbitrary unique ID among open orders for the below order. Automatically generated if not sent
         */
        belowClientOrderId?: string;
        /**
         * Note that this can only be used if `belowTimeInForce` is `GTC`.
         */
        belowIcebergQty?: number;
        /**
         * Can be used if `belowType` is `STOP_LOSS_LIMIT` or `LIMIT_MAKER` to specify the limit price.
         */
        belowPrice?: number;
        /**
         * Can be used if `belowType` is `STOP_LOSS` or `STOP_LOSS_LIMIT`.
         * Either `belowStopPrice` or `belowTrailingDelta` or both, must be specified.
         */
        belowStopPrice?: number;
        belowTrailingDelta?: number;
        /**
         * Required if the `belowType` is `STOP_LOSS_LIMIT`.
         */
        belowTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Arbitrary numeric value identifying the below order within an order strategy.
         */
        belowStrategyId?: number;
        /**
         * Arbitrary numeric value identifying the below order strategy.
         * Values smaller than 1000000 are reserved and cannot be used.
         */
        belowStrategyType?: number;
        /**
         * Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/orderList/oco';
};

export type PostApiV3OrderListOcoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostApiV3OrderListOcoError = PostApiV3OrderListOcoErrors[keyof PostApiV3OrderListOcoErrors];

export type PostApiV3OrderListOcoResponses = {
    /**
     * New OCO details
     */
    200: {
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
        orderReports: Array<{
            symbol: string;
            orderId: number;
            orderListId: number;
            clientOrderId: string;
            transactTime: number;
            price: string;
            origQty: string;
            executedQty: string;
            cummulativeQuoteQty: string;
            status: string;
            timeInForce: string;
            type: string;
            side: string;
            stopPrice: string;
            workingTime: number;
            selfTradePreventionMode: string;
        }>;
    };
};

export type PostApiV3OrderListOcoResponse = PostApiV3OrderListOcoResponses[keyof PostApiV3OrderListOcoResponses];

export type PostApiV3OrderListOtoData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Arbitrary unique ID among open order lists. Automatically generated if not sent.
         * A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
         * `listClientOrderId` is distinct from the `workingClientOrderId` and the `pendingClientOrderId`.
         */
        listClientOrderId?: string;
        /**
         * Set the response JSON.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * Supported values: LIMIT,LIMIT_MAKER
         */
        workingType: 'LIMIT' | 'LIMIT_MAKER';
        /**
         * BUY,SELL
         */
        workingSide: 'BUY' | 'SELL';
        /**
         * Arbitrary unique ID among open orders for the working order. Automatically generated if not sent.
         */
        workingClientOrderId?: string;
        workingPrice: number;
        /**
         * Sets the quantity for the working order.
         */
        workingQuantity: number;
        /**
         * This can only be used if workingTimeInForce is GTC.
         */
        workingIcebergQty: number;
        /**
         * GTC, IOC, FOK
         */
        workingTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Arbitrary numeric value identifying the working order within an order strategy.
         */
        workingStrategyId?: number;
        /**
         * Arbitrary numeric value identifying the working order strategy.
         * Values smaller than 1000000 are reserved and cannot be used.
         */
        workingStrategyType?: number;
        /**
         * Supported values: Order Types Note that MARKET orders using quoteOrderQty are not supported.
         */
        pendingType: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';
        /**
         * BUY,SELL
         */
        pendingSide: 'BUY' | 'SELL';
        /**
         * Arbitrary unique ID among open orders for the pending order. Automatically generated if not sent.
         */
        pendingClientOrderId?: string;
        pendingPrice?: number;
        pendingStopPrice?: number;
        pendingTrailingDelta?: number;
        /**
         * Sets the quantity for the pending order.
         */
        pendingQuantity: number;
        /**
         * This can only be used if pendingTimeInForce is GTC.
         */
        pendingIcebergQty?: number;
        /**
         * GTC, IOC, FOK
         */
        pendingTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Arbitrary numeric value identifying the pending order within an order strategy.
         */
        pendingStrategyId?: number;
        /**
         * Arbitrary numeric value identifying the pending order strategy.
         * Values smaller than 1000000 are reserved and cannot be used.
         */
        pendingStrategyType?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/orderList/oto';
};

export type PostApiV3OrderListOtoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostApiV3OrderListOtoError = PostApiV3OrderListOtoErrors[keyof PostApiV3OrderListOtoErrors];

export type PostApiV3OrderListOtoResponses = {
    /**
     * New OTO details
     */
    200: {
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
        orderReports: Array<{
            symbol: string;
            orderId: number;
            orderListId: number;
            clientOrderId: string;
            transactTime: number;
            price: string;
            origQty: string;
            executedQty: string;
            cummulativeQuoteQty: string;
            status: string;
            timeInForce: string;
            type: string;
            side: string;
            workingTime: number;
            selfTradePreventionMode: string;
        }>;
    };
};

export type PostApiV3OrderListOtoResponse = PostApiV3OrderListOtoResponses[keyof PostApiV3OrderListOtoResponses];

export type PostApiV3OrderListOtocoData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Arbitrary unique ID among open order lists. Automatically generated if not sent.
         * A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
         * `listClientOrderId` is distinct from the `workingClientOrderId` and the `pendingClientOrderId`.
         */
        listClientOrderId?: string;
        /**
         * Set the response JSON.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * Supported values: LIMIT,LIMIT_MAKER
         */
        workingType: 'LIMIT' | 'LIMIT_MAKER';
        /**
         * BUY,SELL
         */
        workingSide: 'BUY' | 'SELL';
        /**
         * Arbitrary unique ID among open orders for the working order. Automatically generated if not sent.
         */
        workingClientOrderId?: string;
        workingPrice: number;
        /**
         * Sets the quantity for the working order.
         */
        workingQuantity: number;
        /**
         * This can only be used if workingTimeInForce is GTC.
         */
        workingIcebergQty: number;
        /**
         * GTC, IOC, FOK
         */
        workingTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Arbitrary numeric value identifying the working order within an order strategy.
         */
        workingStrategyId?: number;
        /**
         * Arbitrary numeric value identifying the working order strategy.
         * Values smaller than 1000000 are reserved and cannot be used.
         */
        workingStrategyType?: number;
        /**
         * BUY,SELL
         */
        pendingSide: 'BUY' | 'SELL';
        /**
         * Sets the quantity for the pending order.
         */
        pendingQuantity: number;
        /**
         * Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT
         */
        pendingAboveType: 'LIMIT_MAKER' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT';
        /**
         * Arbitrary unique ID among open orders for the pending above order. Automatically generated if not sent.
         */
        pendingAboveClientOrderId?: string;
        pendingAbovePrice?: number;
        pendingAboveStopPrice?: number;
        pendingAboveTrailingDelta?: number;
        /**
         * This can only be used if pendingAboveTimeInForce is GTC.
         */
        pendingAboveIcebergQty?: number;
        pendingAboveTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Arbitrary numeric value identifying the pending above order within an order strategy.
         */
        pendingAboveStrategyId?: number;
        /**
         * Arbitrary numeric value identifying the pending above order strategy.
         * Values smaller than 1000000 are reserved and cannot be used.
         */
        pendingAboveStrategyType?: number;
        /**
         * Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT
         */
        pendingBelowType?: 'LIMIT_MAKER' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT';
        /**
         * Arbitrary unique ID among open orders for the pending below order. Automatically generated if not sent.
         */
        pendingBelowClientOrderId?: string;
        pendingBelowPrice?: number;
        pendingBelowStopPrice?: number;
        pendingBelowTrailingDelta?: number;
        /**
         * This can only be used if pendingBelowTimeInForce is GTC.
         */
        pendingBelowIcebergQty?: number;
        pendingBelowTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Arbitrary numeric value identifying the pending below order within an order strategy.
         */
        pendingBelowStrategyId?: number;
        /**
         * Arbitrary numeric value identifying the pending below order strategy.
         * Values smaller than 1000000 are reserved and cannot be used.
         */
        pendingBelowStrategyType?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/orderList/otoco';
};

export type PostApiV3OrderListOtocoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostApiV3OrderListOtocoError = PostApiV3OrderListOtocoErrors[keyof PostApiV3OrderListOtocoErrors];

export type PostApiV3OrderListOtocoResponses = {
    /**
     * New OTOCO details
     */
    200: {
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
        orderReports: Array<{
            symbol: string;
            orderId: number;
            orderListId: number;
            clientOrderId: string;
            transactTime: number;
            price: string;
            origQty: string;
            executedQty: string;
            cummulativeQuoteQty: string;
            status: string;
            timeInForce: string;
            type: string;
            side: string;
            workingTime: number;
            selfTradePreventionMode: string;
        }>;
    };
};

export type PostApiV3OrderListOtocoResponse = PostApiV3OrderListOtocoResponses[keyof PostApiV3OrderListOtocoResponses];

export type DeleteApiV3OrderListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * Order list id
         */
        orderListId?: number;
        /**
         * A unique Id for the entire orderList
         */
        listClientOrderId?: string;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/orderList';
};

export type DeleteApiV3OrderListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteApiV3OrderListError = DeleteApiV3OrderListErrors[keyof DeleteApiV3OrderListErrors];

export type DeleteApiV3OrderListResponses = {
    /**
     * Report on deleted OCO
     */
    200: OcoOrder;
};

export type DeleteApiV3OrderListResponse = DeleteApiV3OrderListResponses[keyof DeleteApiV3OrderListResponses];

export type GetApiV3OrderListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order list id
         */
        orderListId?: number;
        /**
         * Order id from client
         */
        origClientOrderId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/orderList';
};

export type GetApiV3OrderListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3OrderListError = GetApiV3OrderListErrors[keyof GetApiV3OrderListErrors];

export type GetApiV3OrderListResponses = {
    /**
     * OCO details
     */
    200: {
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
    };
};

export type GetApiV3OrderListResponse = GetApiV3OrderListResponses[keyof GetApiV3OrderListResponses];

export type GetApiV3AllOrderListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trade id to fetch from. Default gets most recent trades.
         */
        fromId?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/allOrderList';
};

export type GetApiV3AllOrderListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3AllOrderListError = GetApiV3AllOrderListErrors[keyof GetApiV3AllOrderListErrors];

export type GetApiV3AllOrderListResponses = {
    /**
     * List of OCO orders
     */
    200: Array<{
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        isIsolated: boolean;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
    }>;
};

export type GetApiV3AllOrderListResponse = GetApiV3AllOrderListResponses[keyof GetApiV3AllOrderListResponses];

export type GetApiV3OpenOrderListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/openOrderList';
};

export type GetApiV3OpenOrderListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3OpenOrderListError = GetApiV3OpenOrderListErrors[keyof GetApiV3OpenOrderListErrors];

export type GetApiV3OpenOrderListResponses = {
    /**
     * List of OCO orders
     */
    200: Array<{
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
    }>;
};

export type GetApiV3OpenOrderListResponse = GetApiV3OpenOrderListResponses[keyof GetApiV3OpenOrderListResponses];

export type PostApiV3SorOrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        side: 'SELL' | 'BUY';
        /**
         * Order type
         */
        type: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';
        /**
         * Order time in force
         */
        timeInForce?: 'GTC' | 'IOC' | 'FOK';
        quantity: number;
        price?: number;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        strategyId?: number;
        /**
         * The value cannot be less than 1000000.
         */
        strategyType?: number;
        /**
         * Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
         */
        icebergQty?: number;
        /**
         * Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/sor/order';
};

export type PostApiV3SorOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostApiV3SorOrderError = PostApiV3SorOrderErrors[keyof PostApiV3SorOrderErrors];

export type PostApiV3SorOrderResponses = {
    /**
     * New order details
     */
    200: {
        symbol: string;
        orderId: number;
        orderListId: number;
        clientOrderId: string;
        transactTime: number;
        price: string;
        origQty: string;
        executedQty: string;
        cummulativeQuoteQty: string;
        status: string;
        timeInForce: string;
        type: string;
        side: string;
        workingTime: number;
        fills: Array<{
            matchType: string;
            price: string;
            qty: string;
            commission: string;
            commissionAsset: string;
            tradeId: number;
            allocId: number;
        }>;
        workingFloor: string;
        selfTradePreventionMode: string;
        usedSor: boolean;
    };
};

export type PostApiV3SorOrderResponse = PostApiV3SorOrderResponses[keyof PostApiV3SorOrderResponses];

export type PostApiV3SorOrderTestData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        side: 'SELL' | 'BUY';
        /**
         * Order type
         */
        type: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';
        /**
         * Order time in force
         */
        timeInForce?: 'GTC' | 'IOC' | 'FOK';
        quantity: number;
        price?: number;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        strategyId?: number;
        /**
         * The value cannot be less than 1000000.
         */
        strategyType?: number;
        /**
         * Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
         */
        icebergQty?: number;
        /**
         * Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * Default: false
         */
        computeCommissionRates?: boolean;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/sor/order/test';
};

export type PostApiV3SorOrderTestErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostApiV3SorOrderTestError = PostApiV3SorOrderTestErrors[keyof PostApiV3SorOrderTestErrors];

export type PostApiV3SorOrderTestResponses = {
    /**
     * Test new order
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostApiV3SorOrderTestResponse = PostApiV3SorOrderTestResponses[keyof PostApiV3SorOrderTestResponses];

export type GetApiV3AccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/account';
};

export type GetApiV3AccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3AccountError = GetApiV3AccountErrors[keyof GetApiV3AccountErrors];

export type GetApiV3AccountResponses = {
    /**
     * Account details
     */
    200: Account;
};

export type GetApiV3AccountResponse = GetApiV3AccountResponses[keyof GetApiV3AccountResponses];

export type GetApiV3MyTradesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * This can only be used in combination with symbol.
         */
        orderId?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Trade id to fetch from. Default gets most recent trades.
         */
        fromId?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/myTrades';
};

export type GetApiV3MyTradesErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3MyTradesError = GetApiV3MyTradesErrors[keyof GetApiV3MyTradesErrors];

export type GetApiV3MyTradesResponses = {
    /**
     * List of trades
     */
    200: Array<MyTrade>;
};

export type GetApiV3MyTradesResponse = GetApiV3MyTradesResponses[keyof GetApiV3MyTradesResponses];

export type GetApiV3RateLimitOrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/rateLimit/order';
};

export type GetApiV3RateLimitOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3RateLimitOrderError = GetApiV3RateLimitOrderErrors[keyof GetApiV3RateLimitOrderErrors];

export type GetApiV3RateLimitOrderResponses = {
    /**
     * Order rate limits
     */
    200: Array<{
        rateLimitType: string;
        interval: string;
        intervalNum: number;
        limit: number;
        count?: number;
    }>;
};

export type GetApiV3RateLimitOrderResponse = GetApiV3RateLimitOrderResponses[keyof GetApiV3RateLimitOrderResponses];

export type GetApiV3MyPreventedMatchesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        preventedMatchId?: number;
        /**
         * Order id
         */
        orderId?: number;
        fromPreventedMatchId?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/myPreventedMatches';
};

export type GetApiV3MyPreventedMatchesErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3MyPreventedMatchesError = GetApiV3MyPreventedMatchesErrors[keyof GetApiV3MyPreventedMatchesErrors];

export type GetApiV3MyPreventedMatchesResponses = {
    /**
     * Order list that were expired due to STP
     */
    200: Array<{
        symbol: string;
        preventedMatchId: number;
        takerOrderId: number;
        makerOrderId: number;
        tradeGroupId: number;
        selfTradePreventionMode: string;
        price: string;
        makerPreventedQuantity: string;
        transactTime: number;
    }>;
};

export type GetApiV3MyPreventedMatchesResponse = GetApiV3MyPreventedMatchesResponses[keyof GetApiV3MyPreventedMatchesResponses];

export type GetApiV3MyAllocationsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        fromAllocationId?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * Order id
         */
        orderId?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/myAllocations';
};

export type GetApiV3MyAllocationsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3MyAllocationsError = GetApiV3MyAllocationsErrors[keyof GetApiV3MyAllocationsErrors];

export type GetApiV3MyAllocationsResponses = {
    /**
     * Allocations resulting from SOR order placement
     */
    200: Array<{
        symbol: string;
        allocationId: number;
        allocationType: string;
        orderId: number;
        orderListId: number;
        price: string;
        qty: string;
        quoteQty: string;
        commission: string;
        commissionAsset: string;
        time: number;
        isBuyer: boolean;
        isMaker: boolean;
        isAllocator: boolean;
    }>;
};

export type GetApiV3MyAllocationsResponse = GetApiV3MyAllocationsResponses[keyof GetApiV3MyAllocationsResponses];

export type GetApiV3AccountCommissionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/api/v3/account/commission';
};

export type GetApiV3AccountCommissionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetApiV3AccountCommissionError = GetApiV3AccountCommissionErrors[keyof GetApiV3AccountCommissionErrors];

export type GetApiV3AccountCommissionResponses = {
    /**
     * Current account commission rates.
     */
    200: {
        symbol: string;
        /**
         * Standard commission rates on trades from the order.
         */
        standardCommission: {
            maker: string;
            taker: string;
            buyer: string;
            seller: string;
        };
        /**
         * Tax commission rates for trades from the order.
         */
        taxCommission: {
            maker: string;
            taker: string;
            buyer: string;
            seller: string;
        };
        /**
         * Discount commission when paying in BNB.
         */
        discount: {
            enabledForAccount?: boolean;
            enabledForSymbol?: boolean;
            discountAsset?: string;
            /**
             * Standard commission is reduced by this rate when paying commission in BNB.
             */
            discount?: string;
        };
    };
};

export type GetApiV3AccountCommissionResponse = GetApiV3AccountCommissionResponses[keyof GetApiV3AccountCommissionResponses];

export type GetSapiV1MarginBorrowRepayData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        /**
         * Isolated symbol
         */
        isolatedSymbol?: string;
        /**
         * tranId in POST /sapi/v1/margin/loan
         */
        txId?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * BORROW or REPAY
         */
        type: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/borrow-repay';
};

export type GetSapiV1MarginBorrowRepayErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1MarginBorrowRepayError = GetSapiV1MarginBorrowRepayErrors[keyof GetSapiV1MarginBorrowRepayErrors];

export type GetSapiV1MarginBorrowRepayResponses = {
    /**
     * Margin account borrow/repay
     */
    200: {
        rows: Array<{
            /**
             * Isolated symbol, will not be returned for crossed margin
             */
            isolatedSymbol?: string;
            /**
             * Total amount borrowed/repaid
             */
            amount?: string;
            asset: string;
            /**
             * Interest repaid
             */
            interest?: string;
            /**
             * Principal repaid
             */
            principal: string;
            /**
             * one of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account)
             */
            status: string;
            timestamp: number;
            txId: number;
        }>;
        total: number;
    };
};

export type GetSapiV1MarginBorrowRepayResponse = GetSapiV1MarginBorrowRepayResponses[keyof GetSapiV1MarginBorrowRepayResponses];

export type PostSapiV1MarginBorrowRepayData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        /**
         * TRUE for isolated margin, FALSE for crossed margin
         */
        isIsolated: string;
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        amount: number;
        /**
         * BORROW or REPAY
         */
        type: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/borrow-repay';
};

export type PostSapiV1MarginBorrowRepayErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type PostSapiV1MarginBorrowRepayError = PostSapiV1MarginBorrowRepayErrors[keyof PostSapiV1MarginBorrowRepayErrors];

export type PostSapiV1MarginBorrowRepayResponses = {
    /**
     * Margin account borrow/repay
     */
    200: {
        tranId: number;
    };
};

export type PostSapiV1MarginBorrowRepayResponse = PostSapiV1MarginBorrowRepayResponses[keyof PostSapiV1MarginBorrowRepayResponses];

export type GetSapiV1MarginTransferData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        type?: 'ROLL_IN' | 'ROLL_OUT';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * Isolated symbol
         */
        isolatedSymbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/transfer';
};

export type GetSapiV1MarginTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginTransferError = GetSapiV1MarginTransferErrors[keyof GetSapiV1MarginTransferErrors];

export type GetSapiV1MarginTransferResponses = {
    /**
     * Margin account transfer history, response in descending order
     */
    200: {
        rows: Array<{
            amount: string;
            asset: string;
            status: string;
            timestamp: number;
            txId: number;
            type: string;
        }>;
        total: number;
    };
};

export type GetSapiV1MarginTransferResponse = GetSapiV1MarginTransferResponses[keyof GetSapiV1MarginTransferResponses];

export type GetSapiV1MarginAllAssetsData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
    };
    url: '/sapi/v1/margin/allAssets';
};

export type GetSapiV1MarginAllAssetsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1MarginAllAssetsError = GetSapiV1MarginAllAssetsErrors[keyof GetSapiV1MarginAllAssetsErrors];

export type GetSapiV1MarginAllAssetsResponses = {
    /**
     * Assets details
     */
    200: Array<{
        assetFullName: string;
        assetName: string;
        isBorrowable: boolean;
        isMortgageable: boolean;
        userMinBorrow: string;
        userMinRepay: string;
    }>;
};

export type GetSapiV1MarginAllAssetsResponse = GetSapiV1MarginAllAssetsResponses[keyof GetSapiV1MarginAllAssetsResponses];

export type GetSapiV1MarginAllPairsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
    };
    url: '/sapi/v1/margin/allPairs';
};

export type GetSapiV1MarginAllPairsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1MarginAllPairsError = GetSapiV1MarginAllPairsErrors[keyof GetSapiV1MarginAllPairsErrors];

export type GetSapiV1MarginAllPairsResponses = {
    /**
     * Margin pairs
     */
    200: Array<{
        base: string;
        id: number;
        isBuyAllowed: boolean;
        isMarginTrade: boolean;
        isSellAllowed: boolean;
        quote: string;
        symbol: string;
    }>;
};

export type GetSapiV1MarginAllPairsResponse = GetSapiV1MarginAllPairsResponses[keyof GetSapiV1MarginAllPairsResponses];

export type GetSapiV1MarginPriceIndexData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
    };
    url: '/sapi/v1/margin/priceIndex';
};

export type GetSapiV1MarginPriceIndexErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1MarginPriceIndexError = GetSapiV1MarginPriceIndexErrors[keyof GetSapiV1MarginPriceIndexErrors];

export type GetSapiV1MarginPriceIndexResponses = {
    /**
     * Price index
     */
    200: {
        calcTime: number;
        price: string;
        symbol: string;
    };
};

export type GetSapiV1MarginPriceIndexResponse = GetSapiV1MarginPriceIndexResponses[keyof GetSapiV1MarginPriceIndexResponses];

export type DeleteSapiV1MarginOrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * Order id
         */
        orderId?: number;
        /**
         * Order id from client
         */
        origClientOrderId?: string;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/order';
};

export type DeleteSapiV1MarginOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteSapiV1MarginOrderError = DeleteSapiV1MarginOrderErrors[keyof DeleteSapiV1MarginOrderErrors];

export type DeleteSapiV1MarginOrderResponses = {
    /**
     * Cancelled margin order details
     */
    200: MarginOrder;
};

export type DeleteSapiV1MarginOrderResponse = DeleteSapiV1MarginOrderResponses[keyof DeleteSapiV1MarginOrderResponses];

export type GetSapiV1MarginOrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * Order id
         */
        orderId?: number;
        /**
         * Order id from client
         */
        origClientOrderId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/order';
};

export type GetSapiV1MarginOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginOrderError = GetSapiV1MarginOrderErrors[keyof GetSapiV1MarginOrderErrors];

export type GetSapiV1MarginOrderResponses = {
    /**
     * Interest History, response in descending order
     */
    200: MarginOrderDetail;
};

export type GetSapiV1MarginOrderResponse = GetSapiV1MarginOrderResponses[keyof GetSapiV1MarginOrderResponses];

export type PostSapiV1MarginOrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        side: 'SELL' | 'BUY';
        /**
         * Order type
         */
        type: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';
        quantity: number;
        /**
         * Quote quantity
         */
        quoteOrderQty?: number;
        /**
         * Order price
         */
        price?: number;
        /**
         * Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
         */
        stopPrice?: number;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        /**
         * Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
         */
        icebergQty?: number;
        /**
         * Set the response JSON.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * Default `NO_SIDE_EFFECT`
         */
        sideEffectType?: 'NO_SIDE_EFFECT' | 'MARGIN_BUY' | 'AUTO_REPAY';
        /**
         * Order time in force
         */
        timeInForce?: 'GTC' | 'IOC' | 'FOK';
        autoRepayAtCancel: boolean;
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/order';
};

export type PostSapiV1MarginOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1MarginOrderError = PostSapiV1MarginOrderErrors[keyof PostSapiV1MarginOrderErrors];

export type PostSapiV1MarginOrderResponses = {
    /**
     * Margin order info
     */
    200: MarginOrderResponseAck | MarginOrderResponseResult | MarginOrderResponseFull;
};

export type PostSapiV1MarginOrderResponse = PostSapiV1MarginOrderResponses[keyof PostSapiV1MarginOrderResponses];

export type GetSapiV1MarginInterestHistoryData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        /**
         * Isolated symbol
         */
        isolatedSymbol?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * Default: false. Set to true for archived data from 6 months ago
         */
        archived?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/interestHistory';
};

export type GetSapiV1MarginInterestHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginInterestHistoryError = GetSapiV1MarginInterestHistoryErrors[keyof GetSapiV1MarginInterestHistoryErrors];

export type GetSapiV1MarginInterestHistoryResponses = {
    /**
     * Interest History, response in descending order
     */
    200: {
        rows: Array<{
            isolatedSymbol: string;
            asset: string;
            interest: string;
            interestAccuredTime: number;
            interestRate: string;
            principal: string;
            type: string;
        }>;
        total: number;
    };
};

export type GetSapiV1MarginInterestHistoryResponse = GetSapiV1MarginInterestHistoryResponses[keyof GetSapiV1MarginInterestHistoryResponses];

export type GetSapiV1MarginForceLiquidationRecData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Isolated symbol
         */
        isolatedSymbol?: string;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/forceLiquidationRec';
};

export type GetSapiV1MarginForceLiquidationRecErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginForceLiquidationRecError = GetSapiV1MarginForceLiquidationRecErrors[keyof GetSapiV1MarginForceLiquidationRecErrors];

export type GetSapiV1MarginForceLiquidationRecResponses = {
    /**
     * Force Liquidation History, response in descending order
     */
    200: {
        rows: Array<{
            avgPrice: string;
            executedQty: string;
            orderId: number;
            price: string;
            qty: string;
            side: string;
            symbol: string;
            timeInForce: string;
            isIsolated: boolean;
            updatedTime: number;
        }>;
        total: number;
    };
};

export type GetSapiV1MarginForceLiquidationRecResponse = GetSapiV1MarginForceLiquidationRecResponses[keyof GetSapiV1MarginForceLiquidationRecResponses];

export type GetSapiV1MarginAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/account';
};

export type GetSapiV1MarginAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginAccountError = GetSapiV1MarginAccountErrors[keyof GetSapiV1MarginAccountErrors];

export type GetSapiV1MarginAccountResponses = {
    /**
     * Margin account details
     */
    200: {
        created: boolean;
        borrowEnabled: boolean;
        marginLevel: string;
        collateralMarginLevel: string;
        totalAssetOfBtc: string;
        totalLiabilityOfBtc: string;
        totalNetAssetOfBtc: string;
        TotalCollateralValueInUSDT: string;
        tradeEnabled: boolean;
        transferInEnabled: boolean;
        transferOutEnabled: boolean;
        accountType: string;
        userAssets: Array<{
            asset: string;
            borrowed: string;
            free: string;
            interest: string;
            locked: string;
            netAsset: string;
        }>;
    };
};

export type GetSapiV1MarginAccountResponse = GetSapiV1MarginAccountResponses[keyof GetSapiV1MarginAccountResponses];

export type DeleteSapiV1MarginOpenOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/openOrders';
};

export type DeleteSapiV1MarginOpenOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteSapiV1MarginOpenOrdersError = DeleteSapiV1MarginOpenOrdersErrors[keyof DeleteSapiV1MarginOpenOrdersErrors];

export type DeleteSapiV1MarginOpenOrdersResponses = {
    /**
     * Cancelled margin orders
     */
    200: Array<CanceledMarginOrderDetail | MarginOcoOrder>;
};

export type DeleteSapiV1MarginOpenOrdersResponse = DeleteSapiV1MarginOpenOrdersResponses[keyof DeleteSapiV1MarginOpenOrdersResponses];

export type GetSapiV1MarginOpenOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/openOrders';
};

export type GetSapiV1MarginOpenOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginOpenOrdersError = GetSapiV1MarginOpenOrdersErrors[keyof GetSapiV1MarginOpenOrdersErrors];

export type GetSapiV1MarginOpenOrdersResponses = {
    /**
     * Margin open orders list
     */
    200: Array<MarginOrderDetail>;
};

export type GetSapiV1MarginOpenOrdersResponse = GetSapiV1MarginOpenOrdersResponses[keyof GetSapiV1MarginOpenOrdersResponses];

export type GetSapiV1MarginAllOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * Order id
         */
        orderId?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/allOrders';
};

export type GetSapiV1MarginAllOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginAllOrdersError = GetSapiV1MarginAllOrdersErrors[keyof GetSapiV1MarginAllOrdersErrors];

export type GetSapiV1MarginAllOrdersResponses = {
    /**
     * Margin order list
     */
    200: Array<MarginOrderDetail>;
};

export type GetSapiV1MarginAllOrdersResponse = GetSapiV1MarginAllOrdersResponses[keyof GetSapiV1MarginAllOrdersResponses];

export type PostSapiV1MarginOrderOcoData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * A unique Id for the entire orderList
         */
        listClientOrderId?: string;
        side: 'SELL' | 'BUY';
        quantity: number;
        /**
         * A unique Id for the limit order
         */
        limitClientOrderId?: string;
        /**
         * Order price
         */
        price: number;
        limitIcebergQty?: number;
        /**
         * A unique Id for the stop loss/stop loss limit leg
         */
        stopClientOrderId?: string;
        stopPrice: number;
        /**
         * If provided, stopLimitTimeInForce is required.
         */
        stopLimitPrice?: number;
        stopIcebergQty?: number;
        stopLimitTimeInForce?: 'GTC' | 'FOK' | 'IOC';
        /**
         * Set the response JSON.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * Default `NO_SIDE_EFFECT`
         */
        sideEffectType?: 'NO_SIDE_EFFECT' | 'MARGIN_BUY' | 'AUTO_REPAY';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/order/oco';
};

export type PostSapiV1MarginOrderOcoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1MarginOrderOcoError = PostSapiV1MarginOrderOcoErrors[keyof PostSapiV1MarginOrderOcoErrors];

export type PostSapiV1MarginOrderOcoResponses = {
    /**
     * New Margin OCO details
     */
    200: {
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        /**
         * will not return if no margin trade happens
         */
        marginBuyBorrowAmount: string;
        /**
         * will not return if no margin trade happens
         */
        marginBuyBorrowAsset: string;
        isIsolated: boolean;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
        orderReports: Array<{
            symbol: string;
            orderId: number;
            orderListId: number;
            clientOrderId: string;
            transactTime: number;
            price: string;
            origQty: string;
            executedQty: string;
            cummulativeQuoteQty: string;
            status: string;
            timeInForce: string;
            type: string;
            side: string;
            stopPrice: string;
        }>;
    };
};

export type PostSapiV1MarginOrderOcoResponse = PostSapiV1MarginOrderOcoResponses[keyof PostSapiV1MarginOrderOcoResponses];

export type DeleteSapiV1MarginOrderListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * Order list id
         */
        orderListId?: number;
        /**
         * A unique Id for the entire orderList
         */
        listClientOrderId?: string;
        /**
         * Used to uniquely identify this cancel. Automatically generated by default
         */
        newClientOrderId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/orderList';
};

export type DeleteSapiV1MarginOrderListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteSapiV1MarginOrderListError = DeleteSapiV1MarginOrderListErrors[keyof DeleteSapiV1MarginOrderListErrors];

export type DeleteSapiV1MarginOrderListResponses = {
    /**
     * Margin OCO details
     */
    200: MarginOcoOrder;
};

export type DeleteSapiV1MarginOrderListResponse = DeleteSapiV1MarginOrderListResponses[keyof DeleteSapiV1MarginOrderListResponses];

export type GetSapiV1MarginOrderListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * Mandatory for isolated margin, not supported for cross margin
         */
        symbol?: string;
        /**
         * Order list id
         */
        orderListId?: number;
        /**
         * Order id from client
         */
        origClientOrderId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/orderList';
};

export type GetSapiV1MarginOrderListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginOrderListError = GetSapiV1MarginOrderListErrors[keyof GetSapiV1MarginOrderListErrors];

export type GetSapiV1MarginOrderListResponses = {
    /**
     * Margin OCO details
     */
    200: {
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        isIsolated: boolean;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
    };
};

export type GetSapiV1MarginOrderListResponse = GetSapiV1MarginOrderListResponses[keyof GetSapiV1MarginOrderListResponses];

export type GetSapiV1MarginAllOrderListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * Mandatory for isolated margin, not supported for cross margin
         */
        symbol?: string;
        /**
         * If supplied, neither `startTime` or `endTime` can be provided
         */
        fromId?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default Value: 500; Max Value: 1000
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/allOrderList';
};

export type GetSapiV1MarginAllOrderListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginAllOrderListError = GetSapiV1MarginAllOrderListErrors[keyof GetSapiV1MarginAllOrderListErrors];

export type GetSapiV1MarginAllOrderListResponses = {
    /**
     * List of Margin OCO orders
     */
    200: Array<{
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        isIsolated: boolean;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
    }>;
};

export type GetSapiV1MarginAllOrderListResponse = GetSapiV1MarginAllOrderListResponses[keyof GetSapiV1MarginAllOrderListResponses];

export type GetSapiV1MarginOpenOrderListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * Mandatory for isolated margin, not supported for cross margin
         */
        symbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/openOrderList';
};

export type GetSapiV1MarginOpenOrderListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginOpenOrderListError = GetSapiV1MarginOpenOrderListErrors[keyof GetSapiV1MarginOpenOrderListErrors];

export type GetSapiV1MarginOpenOrderListResponses = {
    /**
     * List of Open Margin OCO orders
     */
    200: Array<{
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        isIsolated: boolean;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
    }>;
};

export type GetSapiV1MarginOpenOrderListResponse = GetSapiV1MarginOpenOrderListResponses[keyof GetSapiV1MarginOpenOrderListResponses];

export type GetSapiV1MarginMyTradesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Trade id to fetch from. Default gets most recent trades.
         */
        fromId?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/myTrades';
};

export type GetSapiV1MarginMyTradesErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginMyTradesError = GetSapiV1MarginMyTradesErrors[keyof GetSapiV1MarginMyTradesErrors];

export type GetSapiV1MarginMyTradesResponses = {
    /**
     * List of margin trades
     */
    200: Array<MarginTrade>;
};

export type GetSapiV1MarginMyTradesResponse = GetSapiV1MarginMyTradesResponses[keyof GetSapiV1MarginMyTradesResponses];

export type GetSapiV1MarginMaxBorrowableData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        /**
         * Isolated symbol
         */
        isolatedSymbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/maxBorrowable';
};

export type GetSapiV1MarginMaxBorrowableErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginMaxBorrowableError = GetSapiV1MarginMaxBorrowableErrors[keyof GetSapiV1MarginMaxBorrowableErrors];

export type GetSapiV1MarginMaxBorrowableResponses = {
    /**
     * Details on max borrow amount
     */
    200: {
        /**
         * account's currently max borrowable amount with sufficient system availability
         */
        amount: string;
        /**
         * max borrowable amount limited by the account level
         */
        borrowLimit: string;
    };
};

export type GetSapiV1MarginMaxBorrowableResponse = GetSapiV1MarginMaxBorrowableResponses[keyof GetSapiV1MarginMaxBorrowableResponses];

export type GetSapiV1MarginMaxTransferableData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        /**
         * Isolated symbol
         */
        isolatedSymbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/maxTransferable';
};

export type GetSapiV1MarginMaxTransferableErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginMaxTransferableError = GetSapiV1MarginMaxTransferableErrors[keyof GetSapiV1MarginMaxTransferableErrors];

export type GetSapiV1MarginMaxTransferableResponses = {
    /**
     * Details on max transferable amount
     */
    200: {
        /**
         * Account's currently max borrowable amount with sufficient system availability
         */
        amount: string;
        /**
         * Max borrowable amount limited by the account level
         */
        borrowLimit: string;
    };
};

export type GetSapiV1MarginMaxTransferableResponse = GetSapiV1MarginMaxTransferableResponses[keyof GetSapiV1MarginMaxTransferableResponses];

export type GetSapiV1MarginTradeCoeffData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Email Address
         */
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/tradeCoeff';
};

export type GetSapiV1MarginTradeCoeffErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginTradeCoeffError = GetSapiV1MarginTradeCoeffErrors[keyof GetSapiV1MarginTradeCoeffErrors];

export type GetSapiV1MarginTradeCoeffResponses = {
    /**
     * Summary of Margin Account
     */
    200: {
        /**
         * Account's currently max borrowable amount with sufficient system availability
         */
        normalBar?: string;
        /**
         * Max borrowable amount limited by the account level
         */
        marginCallBar?: string;
        /**
         * Liquidation Margin Ratio
         */
        forceLiquidationBar?: string;
    };
};

export type GetSapiV1MarginTradeCoeffResponse = GetSapiV1MarginTradeCoeffResponses[keyof GetSapiV1MarginTradeCoeffResponses];

export type DeleteSapiV1MarginIsolatedAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/isolated/account';
};

export type DeleteSapiV1MarginIsolatedAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteSapiV1MarginIsolatedAccountError = DeleteSapiV1MarginIsolatedAccountErrors[keyof DeleteSapiV1MarginIsolatedAccountErrors];

export type DeleteSapiV1MarginIsolatedAccountResponses = {
    /**
     * Isolated Margin Account status
     */
    200: {
        success: boolean;
        symbol: string;
    };
};

export type DeleteSapiV1MarginIsolatedAccountResponse = DeleteSapiV1MarginIsolatedAccountResponses[keyof DeleteSapiV1MarginIsolatedAccountResponses];

export type GetSapiV1MarginIsolatedAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Max 5 symbols can be sent; separated by ','
         */
        symbols?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/isolated/account';
};

export type GetSapiV1MarginIsolatedAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginIsolatedAccountError = GetSapiV1MarginIsolatedAccountErrors[keyof GetSapiV1MarginIsolatedAccountErrors];

export type GetSapiV1MarginIsolatedAccountResponses = {
    /**
     * Isolated Margin Account Info when "symbols" is not sent
     */
    200: IsolatedMarginAccountInfo;
};

export type GetSapiV1MarginIsolatedAccountResponse = GetSapiV1MarginIsolatedAccountResponses[keyof GetSapiV1MarginIsolatedAccountResponses];

export type PostSapiV1MarginIsolatedAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/isolated/account';
};

export type PostSapiV1MarginIsolatedAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1MarginIsolatedAccountError = PostSapiV1MarginIsolatedAccountErrors[keyof PostSapiV1MarginIsolatedAccountErrors];

export type PostSapiV1MarginIsolatedAccountResponses = {
    /**
     * Isolated Margin Account status
     */
    200: {
        success: boolean;
        symbol: string;
    };
};

export type PostSapiV1MarginIsolatedAccountResponse = PostSapiV1MarginIsolatedAccountResponses[keyof PostSapiV1MarginIsolatedAccountResponses];

export type GetSapiV1MarginIsolatedAccountLimitData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/isolated/accountLimit';
};

export type GetSapiV1MarginIsolatedAccountLimitErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginIsolatedAccountLimitError = GetSapiV1MarginIsolatedAccountLimitErrors[keyof GetSapiV1MarginIsolatedAccountLimitErrors];

export type GetSapiV1MarginIsolatedAccountLimitResponses = {
    /**
     * Number of enabled Isolated Margin Account and its limit
     */
    200: {
        enabledAccount: number;
        maxAccount: number;
    };
};

export type GetSapiV1MarginIsolatedAccountLimitResponse = GetSapiV1MarginIsolatedAccountLimitResponses[keyof GetSapiV1MarginIsolatedAccountLimitResponses];

export type GetSapiV1MarginIsolatedAllPairsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/isolated/allPairs';
};

export type GetSapiV1MarginIsolatedAllPairsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginIsolatedAllPairsError = GetSapiV1MarginIsolatedAllPairsErrors[keyof GetSapiV1MarginIsolatedAllPairsErrors];

export type GetSapiV1MarginIsolatedAllPairsResponses = {
    /**
     * All Isolated Margin Symbols
     */
    200: Array<{
        symbol: string;
        base: string;
        quote: string;
        isMarginTrade: boolean;
        isBuyAllowed: boolean;
        isSellAllowed: boolean;
    }>;
};

export type GetSapiV1MarginIsolatedAllPairsResponse = GetSapiV1MarginIsolatedAllPairsResponses[keyof GetSapiV1MarginIsolatedAllPairsResponses];

export type GetSapiV1BnbBurnData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/bnbBurn';
};

export type GetSapiV1BnbBurnErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1BnbBurnError = GetSapiV1BnbBurnErrors[keyof GetSapiV1BnbBurnErrors];

export type GetSapiV1BnbBurnResponses = {
    /**
     * Status on BNB to pay for trading fees
     */
    200: BnbBurnStatus;
};

export type GetSapiV1BnbBurnResponse = GetSapiV1BnbBurnResponses[keyof GetSapiV1BnbBurnResponses];

export type PostSapiV1BnbBurnData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Determines whether to use BNB to pay for trading fees on SPOT
         */
        spotBNBBurn?: 'true' | 'false';
        /**
         * Determines whether to use BNB to pay for margin loan's interest
         */
        interestBNBBurn?: 'true' | 'false';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/bnbBurn';
};

export type PostSapiV1BnbBurnErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1BnbBurnError = PostSapiV1BnbBurnErrors[keyof PostSapiV1BnbBurnErrors];

export type PostSapiV1BnbBurnResponses = {
    /**
     * Status on BNB to pay for trading fees
     */
    200: BnbBurnStatus;
};

export type PostSapiV1BnbBurnResponse = PostSapiV1BnbBurnResponses[keyof PostSapiV1BnbBurnResponses];

export type GetSapiV1MarginInterestRateHistoryData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        /**
         * Defaults to user's vip level
         */
        vipLevel?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/interestRateHistory';
};

export type GetSapiV1MarginInterestRateHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginInterestRateHistoryError = GetSapiV1MarginInterestRateHistoryErrors[keyof GetSapiV1MarginInterestRateHistoryErrors];

export type GetSapiV1MarginInterestRateHistoryResponses = {
    /**
     * Margin Interest Rate History
     */
    200: Array<{
        asset: string;
        dailyInterestRate: string;
        timestamp: number;
        vipLevel: number;
    }>;
};

export type GetSapiV1MarginInterestRateHistoryResponse = GetSapiV1MarginInterestRateHistoryResponses[keyof GetSapiV1MarginInterestRateHistoryResponses];

export type GetSapiV1MarginCrossMarginDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Defaults to user's vip level
         */
        vipLevel?: number;
        /**
         * Coin name
         */
        coin?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/crossMarginData';
};

export type GetSapiV1MarginCrossMarginDataErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginCrossMarginDataError = GetSapiV1MarginCrossMarginDataErrors[keyof GetSapiV1MarginCrossMarginDataErrors];

export type GetSapiV1MarginCrossMarginDataResponses = {
    /**
     * Cross Margin Fee Data
     */
    200: Array<{
        vipLevel: number;
        coin: string;
        transferIn: boolean;
        borrowable: boolean;
        dailyInterest: string;
        yearlyInterest: string;
        borrowLimit: string;
        marginablePairs: Array<string>;
    }>;
};

export type GetSapiV1MarginCrossMarginDataResponse = GetSapiV1MarginCrossMarginDataResponses[keyof GetSapiV1MarginCrossMarginDataResponses];

export type GetSapiV1MarginIsolatedMarginDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Defaults to user's vip level
         */
        vipLevel?: number;
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/isolatedMarginData';
};

export type GetSapiV1MarginIsolatedMarginDataErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginIsolatedMarginDataError = GetSapiV1MarginIsolatedMarginDataErrors[keyof GetSapiV1MarginIsolatedMarginDataErrors];

export type GetSapiV1MarginIsolatedMarginDataResponses = {
    /**
     * Isolated Margin Fee Data
     */
    200: Array<{
        vipLevel?: number;
        symbol?: string;
        leverage?: string;
        data?: Array<{
            coin?: string;
            dailyInterest?: string;
            borrowLimit?: string;
        }>;
    }>;
};

export type GetSapiV1MarginIsolatedMarginDataResponse = GetSapiV1MarginIsolatedMarginDataResponses[keyof GetSapiV1MarginIsolatedMarginDataResponses];

export type GetSapiV1MarginIsolatedMarginTierData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * All margin tier data will be returned if tier is omitted
         */
        tier?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/isolatedMarginTier';
};

export type GetSapiV1MarginIsolatedMarginTierErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginIsolatedMarginTierError = GetSapiV1MarginIsolatedMarginTierErrors[keyof GetSapiV1MarginIsolatedMarginTierErrors];

export type GetSapiV1MarginIsolatedMarginTierResponses = {
    /**
     * Isolated Margin Tier Data
     */
    200: Array<{
        symbol?: string;
        tier?: number;
        effectiveMultiple?: string;
        initialRiskRatio?: string;
        liquidationRiskRatio?: string;
        baseAssetMaxBorrowable?: string;
        quoteAssetMaxBorrowable?: string;
    }>;
};

export type GetSapiV1MarginIsolatedMarginTierResponse = GetSapiV1MarginIsolatedMarginTierResponses[keyof GetSapiV1MarginIsolatedMarginTierResponses];

export type GetSapiV1MarginRateLimitOrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: string;
        /**
         * isolated symbol, mandatory for isolated margin
         */
        symbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/rateLimit/order';
};

export type GetSapiV1MarginRateLimitOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginRateLimitOrderError = GetSapiV1MarginRateLimitOrderErrors[keyof GetSapiV1MarginRateLimitOrderErrors];

export type GetSapiV1MarginRateLimitOrderResponses = {
    /**
     * Usage.
     */
    200: Array<{
        rateLimitType: string;
        interval: string;
        intervalNum: number;
        limit: number;
        count: number;
    }>;
};

export type GetSapiV1MarginRateLimitOrderResponse = GetSapiV1MarginRateLimitOrderResponses[keyof GetSapiV1MarginRateLimitOrderResponses];

export type GetSapiV1MarginCrossMarginCollateralRatioData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/margin/crossMarginCollateralRatio';
};

export type GetSapiV1MarginCrossMarginCollateralRatioErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1MarginCrossMarginCollateralRatioError = GetSapiV1MarginCrossMarginCollateralRatioErrors[keyof GetSapiV1MarginCrossMarginCollateralRatioErrors];

export type GetSapiV1MarginCrossMarginCollateralRatioResponses = {
    /**
     * Margin collateral ratio
     */
    200: Array<{
        collaterals: Array<{
            minUsdValue: string;
            maxUsdValue: string;
            discountRate: string;
        }>;
        assetNames: Array<string>;
    }>;
};

export type GetSapiV1MarginCrossMarginCollateralRatioResponse = GetSapiV1MarginCrossMarginCollateralRatioResponses[keyof GetSapiV1MarginCrossMarginCollateralRatioResponses];

export type GetSapiV1MarginExchangeSmallLiabilityData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/exchange-small-liability';
};

export type GetSapiV1MarginExchangeSmallLiabilityErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginExchangeSmallLiabilityError = GetSapiV1MarginExchangeSmallLiabilityErrors[keyof GetSapiV1MarginExchangeSmallLiabilityErrors];

export type GetSapiV1MarginExchangeSmallLiabilityResponses = {
    /**
     * coin list
     */
    200: Array<{
        asset: string;
        interest: string;
        principal: string;
        liabilityAsset: string;
        liabilityQty: number;
    }>;
};

export type GetSapiV1MarginExchangeSmallLiabilityResponse = GetSapiV1MarginExchangeSmallLiabilityResponses[keyof GetSapiV1MarginExchangeSmallLiabilityResponses];

export type GetSapiV1MarginExchangeSmallLiabilityHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/exchange-small-liability-history';
};

export type GetSapiV1MarginExchangeSmallLiabilityHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginExchangeSmallLiabilityHistoryError = GetSapiV1MarginExchangeSmallLiabilityHistoryErrors[keyof GetSapiV1MarginExchangeSmallLiabilityHistoryErrors];

export type GetSapiV1MarginExchangeSmallLiabilityHistoryResponses = {
    /**
     * coin list
     */
    200: {
        total: number;
        rows: Array<{
            asset: string;
            amount: string;
            targetAsset: string;
            targetAmount: string;
            bizType: string;
            timestamp: number;
        }>;
    };
};

export type GetSapiV1MarginExchangeSmallLiabilityHistoryResponse = GetSapiV1MarginExchangeSmallLiabilityHistoryResponses[keyof GetSapiV1MarginExchangeSmallLiabilityHistoryResponses];

export type GetSapiV1MarginNextHourlyInterestRateData = {
    body?: never;
    path?: never;
    query: {
        /**
         * List of assets, separated by commas, up to 20
         */
        assets?: string;
        /**
         * for isolated margin or not, "TRUE", "FALSE"
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/next-hourly-interest-rate';
};

export type GetSapiV1MarginNextHourlyInterestRateErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginNextHourlyInterestRateError = GetSapiV1MarginNextHourlyInterestRateErrors[keyof GetSapiV1MarginNextHourlyInterestRateErrors];

export type GetSapiV1MarginNextHourlyInterestRateResponses = {
    /**
     * hourly interest
     */
    200: Array<{
        asset: string;
        nextHourlyInterestRate: string;
    }>;
};

export type GetSapiV1MarginNextHourlyInterestRateResponse = GetSapiV1MarginNextHourlyInterestRateResponses[keyof GetSapiV1MarginNextHourlyInterestRateResponses];

export type GetSapiV1MarginCapitalFlowData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        /**
         * Required when querying isolated data
         */
        symbol?: string;
        type?: 'TRANSFER' | 'BORROW' | 'REPAY' | 'BUY_INCOME' | 'BUY_EXPENSE' | 'SELL_INCOME' | 'SELL_EXPENSE' | 'TRADING_COMMISSION' | 'BUY_LIQUIDATION' | 'SELL_LIQUIDATION' | 'REPAY_LIQUIDATION' | 'OTHER_LIQUIDATION' | 'LIQUIDATION_FEE' | 'SMALL_BALANCE_CONVERT' | 'COMMISSION_RETURN' | 'SMALL_CONVERT';
        /**
         * Only supports querying the data of the last 90 days
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * If fromId is set, the data with id > fromId will be returned. Otherwise the latest data will be returned
         */
        fromId?: number;
        /**
         * The number of data items returned each time is limited. Default 500; Max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/capital-flow';
};

export type GetSapiV1MarginCapitalFlowErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginCapitalFlowError = GetSapiV1MarginCapitalFlowErrors[keyof GetSapiV1MarginCapitalFlowErrors];

export type GetSapiV1MarginCapitalFlowResponses = {
    /**
     * Margin capital flow
     */
    200: Array<{
        id: number;
        tranId: number;
        timestamp: number;
        asset: string;
        symbol: string;
        type: string;
        amount: string;
    }>;
};

export type GetSapiV1MarginCapitalFlowResponse = GetSapiV1MarginCapitalFlowResponses[keyof GetSapiV1MarginCapitalFlowResponses];

export type GetSapiV1MarginDelistScheduleData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/delist-schedule';
};

export type GetSapiV1MarginDelistScheduleErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginDelistScheduleError = GetSapiV1MarginDelistScheduleErrors[keyof GetSapiV1MarginDelistScheduleErrors];

export type GetSapiV1MarginDelistScheduleResponses = {
    /**
     * tokens or symbols delist schedule
     */
    200: Array<{
        delistTime?: number;
        crossMarginAssets?: Array<string>;
        isolatedMarginSymbols?: Array<string>;
    }>;
};

export type GetSapiV1MarginDelistScheduleResponse = GetSapiV1MarginDelistScheduleResponses[keyof GetSapiV1MarginDelistScheduleResponses];

export type GetSapiV1MarginAvailableInventoryData = {
    body?: never;
    path?: never;
    query: {
        type: 'MARGIN' | 'ISOLATED';
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/available-inventory';
};

export type GetSapiV1MarginAvailableInventoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MarginAvailableInventoryError = GetSapiV1MarginAvailableInventoryErrors[keyof GetSapiV1MarginAvailableInventoryErrors];

export type GetSapiV1MarginAvailableInventoryResponses = {
    /**
     * Margin available Inventory
     */
    200: {
        assets: {
            MATIC: string;
            STPT: string;
            TVK: string;
            SHIB: string;
        };
        updateTime: number;
    };
};

export type GetSapiV1MarginAvailableInventoryResponse = GetSapiV1MarginAvailableInventoryResponses[keyof GetSapiV1MarginAvailableInventoryResponses];

export type PostSapiV1MarginManualLiquidationData = {
    body?: never;
    path?: never;
    query: {
        type: 'MARGIN' | 'ISOLATED';
        symbol?: string;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/manual-liquidation';
};

export type PostSapiV1MarginManualLiquidationErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1MarginManualLiquidationError = PostSapiV1MarginManualLiquidationErrors[keyof PostSapiV1MarginManualLiquidationErrors];

export type PostSapiV1MarginManualLiquidationResponses = {
    /**
     * Margin manual liquidation
     */
    200: Array<{
        asset: string;
        interest: string;
        principal: string;
        liabilityAsset: string;
        liabilityQty: number;
    }>;
};

export type PostSapiV1MarginManualLiquidationResponse = PostSapiV1MarginManualLiquidationResponses[keyof PostSapiV1MarginManualLiquidationResponses];

export type PostSapiV1MarginOrderOtoData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * Arbitrary unique ID among open order lists. Automatically generated if not sent.
         * A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
         * `listClientOrderId` is distinct from the `workingClientOrderId` and the `pendingClientOrderId`.
         */
        listClientOrderId?: string;
        /**
         * Set the response JSON.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * Default `NO_SIDE_EFFECT`
         */
        sideEffectType?: 'NO_SIDE_EFFECT' | 'MARGIN_BUY';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * Only when MARGIN_BUY order takes effect, true means that the debt generated by the order needs to be repay after the order is cancelled. The default is true
         */
        autoRepayAtCancel?: boolean;
        /**
         * Supported values: LIMIT,LIMIT_MAKER
         */
        workingType: 'LIMIT' | 'LIMIT_MAKER';
        /**
         * BUY,SELL
         */
        workingSide: 'BUY' | 'SELL';
        /**
         * Arbitrary unique ID among open orders for the working order. Automatically generated if not sent.
         */
        workingClientOrderId?: string;
        workingPrice: number;
        /**
         * Sets the quantity for the working order.
         */
        workingQuantity: number;
        /**
         * This can only be used if workingTimeInForce is GTC.
         */
        workingIcebergQty: number;
        /**
         * GTC, IOC, FOK
         */
        workingTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Supported values: Order Types Note that MARKET orders using quoteOrderQty are not supported.
         */
        pendingType: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT' | 'TAKE_PROFIT' | 'TAKE_PROFIT_LIMIT' | 'LIMIT_MAKER';
        /**
         * BUY,SELL
         */
        pendingSide: 'BUY' | 'SELL';
        /**
         * Arbitrary unique ID among open orders for the pending order. Automatically generated if not sent.
         */
        pendingClientOrderId?: string;
        pendingPrice?: number;
        pendingStopPrice?: number;
        pendingTrailingDelta?: number;
        /**
         * Sets the quantity for the pending order.
         */
        pendingQuantity: number;
        /**
         * This can only be used if pendingTimeInForce is GTC.
         */
        pendingIcebergQty?: number;
        /**
         * GTC, IOC, FOK
         */
        pendingTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/order/oto';
};

export type PostSapiV1MarginOrderOtoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1MarginOrderOtoError = PostSapiV1MarginOrderOtoErrors[keyof PostSapiV1MarginOrderOtoErrors];

export type PostSapiV1MarginOrderOtoResponses = {
    /**
     * OTO order
     */
    200: {
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        isIsolated: boolean;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
        orderReports: Array<{
            symbol: string;
            orderId: number;
            orderListId: number;
            clientOrderId: string;
            transactTime: number;
            price: string;
            origQty: string;
            executedQty: string;
            cummulativeQuoteQty: string;
            status: string;
            timeInForce: string;
            type: string;
            side: string;
            selfTradePreventionMode: string;
        }>;
    };
};

export type PostSapiV1MarginOrderOtoResponse = PostSapiV1MarginOrderOtoResponses[keyof PostSapiV1MarginOrderOtoResponses];

export type PostSapiV1MarginOrderOtocoData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        /**
         * * `TRUE` - For isolated margin
         * * `FALSE` - Default, not for isolated margin
         */
        isIsolated?: 'TRUE' | 'FALSE';
        /**
         * Default `NO_SIDE_EFFECT`
         */
        sideEffectType?: 'NO_SIDE_EFFECT' | 'MARGIN_BUY';
        /**
         * Only when MARGIN_BUY order takes effect, true means that the debt generated by the order needs to be repay after the order is cancelled. The default is true
         */
        autoRepayAtCancel?: boolean;
        /**
         * Arbitrary unique ID among open order lists. Automatically generated if not sent.
         * A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
         * `listClientOrderId` is distinct from the `workingClientOrderId` and the `pendingClientOrderId`.
         */
        listClientOrderId?: string;
        /**
         * Set the response JSON.
         */
        newOrderRespType?: 'ACK' | 'RESULT' | 'FULL';
        /**
         * The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.
         */
        selfTradePreventionMode?: 'EXPIRE_TAKER' | 'EXPIRE_MAKER' | 'EXPIRE_BOTH' | 'NONE';
        /**
         * Supported values: LIMIT,LIMIT_MAKER
         */
        workingType: 'LIMIT' | 'LIMIT_MAKER';
        /**
         * BUY,SELL
         */
        workingSide: 'BUY' | 'SELL';
        /**
         * Arbitrary unique ID among open orders for the working order. Automatically generated if not sent.
         */
        workingClientOrderId?: string;
        workingPrice: number;
        /**
         * Sets the quantity for the working order.
         */
        workingQuantity: number;
        /**
         * This can only be used if workingTimeInForce is GTC.
         */
        workingIcebergQty: number;
        /**
         * GTC, IOC, FOK
         */
        workingTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * BUY,SELL
         */
        pendingSide: 'BUY' | 'SELL';
        /**
         * Sets the quantity for the pending order.
         */
        pendingQuantity: number;
        /**
         * Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT
         */
        pendingAboveType: 'LIMIT_MAKER' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT';
        /**
         * Arbitrary unique ID among open orders for the pending above order. Automatically generated if not sent.
         */
        pendingAboveClientOrderId?: string;
        pendingAbovePrice?: number;
        pendingAboveStopPrice?: number;
        pendingAboveTrailingDelta?: number;
        /**
         * This can only be used if pendingAboveTimeInForce is GTC.
         */
        pendingAboveIcebergQty?: number;
        pendingAboveTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT
         */
        pendingBelowType?: 'LIMIT_MAKER' | 'STOP_LOSS' | 'STOP_LOSS_LIMIT';
        /**
         * Arbitrary unique ID among open orders for the pending below order. Automatically generated if not sent.
         */
        pendingBelowClientOrderId?: string;
        pendingBelowPrice?: number;
        pendingBelowStopPrice?: number;
        pendingBelowTrailingDelta?: number;
        /**
         * This can only be used if pendingBelowTimeInForce is GTC.
         */
        pendingBelowIcebergQty?: number;
        pendingBelowTimeInForce?: 'GTC' | 'IOC' | 'FOK';
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/order/otoco';
};

export type PostSapiV1MarginOrderOtocoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1MarginOrderOtocoError = PostSapiV1MarginOrderOtocoErrors[keyof PostSapiV1MarginOrderOtocoErrors];

export type PostSapiV1MarginOrderOtocoResponses = {
    /**
     * OTOCO order
     */
    200: {
        orderListId: number;
        contingencyType: string;
        listStatusType: string;
        listOrderStatus: string;
        listClientOrderId: string;
        transactionTime: number;
        symbol: string;
        isIsolated: boolean;
        orders: Array<{
            symbol: string;
            orderId: number;
            clientOrderId: string;
        }>;
        orderReports: Array<{
            symbol: string;
            orderId: number;
            orderListId: number;
            clientOrderId: string;
            transactTime: number;
            price: string;
            origQty: string;
            executedQty: string;
            cummulativeQuoteQty: string;
            status: string;
            timeInForce: string;
            type: string;
            side: string;
            selfTradePreventionMode: string;
        }>;
    };
};

export type PostSapiV1MarginOrderOtocoResponse = PostSapiV1MarginOrderOtocoResponses[keyof PostSapiV1MarginOrderOtocoResponses];

export type PostSapiV1MarginMaxLeverageData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Can only adjust 3 or 5
         */
        maxLeverage: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/margin/max-leverage';
};

export type PostSapiV1MarginMaxLeverageErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1MarginMaxLeverageError = PostSapiV1MarginMaxLeverageErrors[keyof PostSapiV1MarginMaxLeverageErrors];

export type PostSapiV1MarginMaxLeverageResponses = {
    /**
     * Adjust result
     */
    200: {
        success: boolean;
    };
};

export type PostSapiV1MarginMaxLeverageResponse = PostSapiV1MarginMaxLeverageResponses[keyof PostSapiV1MarginMaxLeverageResponses];

export type GetSapiV1MarginLeverageBracketData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/margin/leverageBracket';
};

export type GetSapiV1MarginLeverageBracketErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1MarginLeverageBracketError = GetSapiV1MarginLeverageBracketErrors[keyof GetSapiV1MarginLeverageBracketErrors];

export type GetSapiV1MarginLeverageBracketResponses = {
    /**
     * Leverage info
     */
    200: Array<{
        assetNames: Array<string>;
        rank: number;
        brackets: Array<{
            leverage?: number;
            maxDebt?: number;
            maintenanceMarginRate?: number;
            initialMarginRate?: number;
            fastNum?: number;
        }>;
    }>;
};

export type GetSapiV1MarginLeverageBracketResponse = GetSapiV1MarginLeverageBracketResponses[keyof GetSapiV1MarginLeverageBracketResponses];

export type GetSapiV1SystemStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/system/status';
};

export type GetSapiV1SystemStatusResponses = {
    /**
     * OK
     */
    200: {
        /**
         * 0: normal, 1：system maintenance
         */
        status: number;
        /**
         * "normal", "system_maintenance"
         */
        msg: string;
    };
};

export type GetSapiV1SystemStatusResponse = GetSapiV1SystemStatusResponses[keyof GetSapiV1SystemStatusResponses];

export type GetSapiV1CapitalConfigGetallData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/capital/config/getall';
};

export type GetSapiV1CapitalConfigGetallErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CapitalConfigGetallError = GetSapiV1CapitalConfigGetallErrors[keyof GetSapiV1CapitalConfigGetallErrors];

export type GetSapiV1CapitalConfigGetallResponses = {
    /**
     * All coins details information
     */
    200: Array<{
        coin: string;
        depositAllEnable: boolean;
        free: string;
        freeze: string;
        ipoable: string;
        ipoing: string;
        isLegalMoney: boolean;
        locked: string;
        name: string;
        networkList: Array<{
            addressRegex: string;
            coin: string;
            /**
             * shown only when "depositEnable" is false.
             */
            depositDesc: string;
            depositEnable: boolean;
            isDefault: boolean;
            memoRegex: string;
            /**
             * min number for balance confirmation.
             */
            minConfirm: number;
            name: string;
            network: string;
            specialTips: string;
            /**
             * confirmation number for balance unlock.
             */
            unLockConfirm: number;
            /**
             * shown only when "withdrawEnable" is false
             */
            withdrawDesc: string;
            withdrawEnable: boolean;
            withdrawFee: string;
            withdrawIntegerMultiple: string;
            withdrawMax: string;
            withdrawMin: string;
            sameAddress: boolean;
        }>;
        storage: string;
        trading: boolean;
        withdrawAllEnable: boolean;
        withdrawing: string;
    }>;
};

export type GetSapiV1CapitalConfigGetallResponse = GetSapiV1CapitalConfigGetallResponses[keyof GetSapiV1CapitalConfigGetallResponses];

export type GetSapiV1AccountSnapshotData = {
    body?: never;
    path?: never;
    query: {
        type: 'SPOT' | 'MARGIN' | 'FUTURES';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/accountSnapshot';
};

export type GetSapiV1AccountSnapshotErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AccountSnapshotError = GetSapiV1AccountSnapshotErrors[keyof GetSapiV1AccountSnapshotErrors];

export type GetSapiV1AccountSnapshotResponses = {
    /**
     * Account Snapshot
     */
    200: SnapshotSpot | SnapshotMargin | SnapshotFutures;
};

export type GetSapiV1AccountSnapshotResponse = GetSapiV1AccountSnapshotResponses[keyof GetSapiV1AccountSnapshotResponses];

export type PostSapiV1AccountDisableFastWithdrawSwitchData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/account/disableFastWithdrawSwitch';
};

export type PostSapiV1AccountDisableFastWithdrawSwitchErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AccountDisableFastWithdrawSwitchError = PostSapiV1AccountDisableFastWithdrawSwitchErrors[keyof PostSapiV1AccountDisableFastWithdrawSwitchErrors];

export type PostSapiV1AccountDisableFastWithdrawSwitchResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostSapiV1AccountDisableFastWithdrawSwitchResponse = PostSapiV1AccountDisableFastWithdrawSwitchResponses[keyof PostSapiV1AccountDisableFastWithdrawSwitchResponses];

export type PostSapiV1AccountEnableFastWithdrawSwitchData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/account/enableFastWithdrawSwitch';
};

export type PostSapiV1AccountEnableFastWithdrawSwitchErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AccountEnableFastWithdrawSwitchError = PostSapiV1AccountEnableFastWithdrawSwitchErrors[keyof PostSapiV1AccountEnableFastWithdrawSwitchErrors];

export type PostSapiV1AccountEnableFastWithdrawSwitchResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostSapiV1AccountEnableFastWithdrawSwitchResponse = PostSapiV1AccountEnableFastWithdrawSwitchResponses[keyof PostSapiV1AccountEnableFastWithdrawSwitchResponses];

export type PostSapiV1CapitalWithdrawApplyData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin name
         */
        coin: string;
        /**
         * Client id for withdraw
         */
        withdrawOrderId?: string;
        network?: string;
        address: string;
        /**
         * Secondary address identifier for coins like XRP,XMR etc.
         */
        addressTag?: string;
        amount: number;
        /**
         * When making internal transfer
         * - `true` ->  returning the fee to the destination account;
         * - `false` -> returning the fee back to the departure account.
         */
        transactionFeeFlag?: boolean;
        name?: string;
        /**
         * The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet
         */
        walletType?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/capital/withdraw/apply';
};

export type PostSapiV1CapitalWithdrawApplyErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1CapitalWithdrawApplyError = PostSapiV1CapitalWithdrawApplyErrors[keyof PostSapiV1CapitalWithdrawApplyErrors];

export type PostSapiV1CapitalWithdrawApplyResponses = {
    /**
     * Transafer Id
     */
    200: {
        id: string;
    };
};

export type PostSapiV1CapitalWithdrawApplyResponse = PostSapiV1CapitalWithdrawApplyResponses[keyof PostSapiV1CapitalWithdrawApplyResponses];

export type GetSapiV1CapitalDepositHisrecData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin name
         */
        coin?: string;
        /**
         * * `0` - pending
         * * `6` - credited but cannot withdraw
         * * `1` - success
         */
        status?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        offset?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/capital/deposit/hisrec';
};

export type GetSapiV1CapitalDepositHisrecErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CapitalDepositHisrecError = GetSapiV1CapitalDepositHisrecErrors[keyof GetSapiV1CapitalDepositHisrecErrors];

export type GetSapiV1CapitalDepositHisrecResponses = {
    /**
     * List of deposits
     */
    200: Array<{
        amount: string;
        coin: string;
        network: string;
        status: number;
        address: string;
        addressTag: string;
        txId: string;
        insertTime: number;
        transferType: number;
        /**
         * confirm times for unlocking
         */
        unlockConfirm: string;
        confirmTimes: string;
    }>;
};

export type GetSapiV1CapitalDepositHisrecResponse = GetSapiV1CapitalDepositHisrecResponses[keyof GetSapiV1CapitalDepositHisrecResponses];

export type GetSapiV1CapitalWithdrawHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin name
         */
        coin?: string;
        withdrawOrderId?: string;
        /**
         * * `0` - Email Sent
         * * `1` - Cancelled
         * * `2` - Awaiting Approval
         * * `3` - Rejected
         * * `4` - Processing
         * * `5` - Failure
         * * `6` - Completed
         */
        status?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        offset?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/capital/withdraw/history';
};

export type GetSapiV1CapitalWithdrawHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CapitalWithdrawHistoryError = GetSapiV1CapitalWithdrawHistoryErrors[keyof GetSapiV1CapitalWithdrawHistoryErrors];

export type GetSapiV1CapitalWithdrawHistoryResponses = {
    /**
     * List of withdraw history
     */
    200: Array<{
        address: string;
        amount: string;
        applyTime: string;
        coin: string;
        id: string;
        /**
         * will not be returned if there's no withdrawOrderId for this withdraw.
         */
        withdrawOrderId: string;
        network: string;
        /**
         * 1 for internal transfer, 0 for external transfer
         */
        transferType: number;
        status: number;
        transactionFee: string;
        confirmNo?: number;
        /**
         * Reason for withdrawal failure
         */
        info?: string;
        txId: string;
    }>;
};

export type GetSapiV1CapitalWithdrawHistoryResponse = GetSapiV1CapitalWithdrawHistoryResponses[keyof GetSapiV1CapitalWithdrawHistoryResponses];

export type GetSapiV1CapitalDepositAddressData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin name
         */
        coin: string;
        network?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/capital/deposit/address';
};

export type GetSapiV1CapitalDepositAddressErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CapitalDepositAddressError = GetSapiV1CapitalDepositAddressErrors[keyof GetSapiV1CapitalDepositAddressErrors];

export type GetSapiV1CapitalDepositAddressResponses = {
    /**
     * Deposit address info
     */
    200: {
        address: string;
        coin: string;
        tag: string;
        url: string;
    };
};

export type GetSapiV1CapitalDepositAddressResponse = GetSapiV1CapitalDepositAddressResponses[keyof GetSapiV1CapitalDepositAddressResponses];

export type GetSapiV1AccountStatusData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/account/status';
};

export type GetSapiV1AccountStatusErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AccountStatusError = GetSapiV1AccountStatusErrors[keyof GetSapiV1AccountStatusErrors];

export type GetSapiV1AccountStatusResponses = {
    /**
     * OK
     */
    200: {
        data: string;
    };
};

export type GetSapiV1AccountStatusResponse = GetSapiV1AccountStatusResponses[keyof GetSapiV1AccountStatusResponses];

export type GetSapiV1AccountApiTradingStatusData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/account/apiTradingStatus';
};

export type GetSapiV1AccountApiTradingStatusErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AccountApiTradingStatusError = GetSapiV1AccountApiTradingStatusErrors[keyof GetSapiV1AccountApiTradingStatusErrors];

export type GetSapiV1AccountApiTradingStatusResponses = {
    /**
     * Account API trading status
     */
    200: {
        data: {
            /**
             * API trading function is locked or not
             */
            isLocked: boolean;
            /**
             * If API trading function is locked, this is the planned recover time
             */
            plannedRecoverTime: number;
            triggerCondition: {
                /**
                 * Number of GTC orders
                 */
                GCR: number;
                /**
                 * Number of FOK/IOC orders
                 */
                IFER: number;
                /**
                 * Number of orders
                 */
                UFR: number;
            };
            /**
             * The indicators updated every 30 seconds
             */
            indicators: {
                BTCUSDT: Array<{
                    /**
                     * Unfilled Ratio (UFR)
                     */
                    i: string;
                    /**
                     * Count of all orders
                     */
                    c: number;
                    /**
                     * Current UFR value
                     */
                    v: number;
                    /**
                     * Trigger UFR value
                     */
                    t: number;
                }>;
            };
            updateTime: number;
        };
    };
};

export type GetSapiV1AccountApiTradingStatusResponse = GetSapiV1AccountApiTradingStatusResponses[keyof GetSapiV1AccountApiTradingStatusResponses];

export type GetSapiV1AssetDribbletData = {
    body?: never;
    path?: never;
    query: {
        /**
         * SPOT or MARGIN, default SPOT
         */
        accountType?: 'SPOT' | 'MARGIN';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/dribblet';
};

export type GetSapiV1AssetDribbletErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AssetDribbletError = GetSapiV1AssetDribbletErrors[keyof GetSapiV1AssetDribbletErrors];

export type GetSapiV1AssetDribbletResponses = {
    /**
     * Dust log records
     */
    200: {
        /**
         * Total counts of exchange
         */
        total: number;
        userAssetDribblets: Array<{
            operateTime: number;
            /**
             * Total transfered BNB amount for this exchange.
             */
            totalTransferedAmount: string;
            /**
             * Total service charge amount for this exchange.
             */
            totalServiceChargeAmount: string;
            transId: number;
            userAssetDribbletDetails: Array<{
                transId: number;
                serviceChargeAmount: string;
                amount: string;
                operateTime: number;
                transferedAmount: string;
                fromAsset: string;
            }>;
        }>;
    };
};

export type GetSapiV1AssetDribbletResponse = GetSapiV1AssetDribbletResponses[keyof GetSapiV1AssetDribbletResponses];

export type PostSapiV1AssetDustBtcData = {
    body?: never;
    path?: never;
    query: {
        /**
         * SPOT or MARGIN, default SPOT
         */
        accountType?: 'SPOT' | 'MARGIN';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/dust-btc';
};

export type PostSapiV1AssetDustBtcErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AssetDustBtcError = PostSapiV1AssetDustBtcErrors[keyof PostSapiV1AssetDustBtcErrors];

export type PostSapiV1AssetDustBtcResponses = {
    /**
     * Account assets available to be converted to BNB
     */
    200: {
        details: Array<{
            asset: string;
            assetFullName: string;
            /**
             * Convertible amount
             */
            amountFree: string;
            /**
             * BTC amount
             */
            toBTC: string;
            /**
             * BNB amount(Not deducted commission fee
             */
            toBNB: string;
            /**
             * BNB amount(Deducted commission fee
             */
            toBNBOffExchange: string;
            /**
             * Commission fee
             */
            exchange: string;
        }>;
        totalTransferBtc: string;
        totalTransferBNB: string;
        /**
         * Commission fee
         */
        dribbletPercentage: string;
    };
};

export type PostSapiV1AssetDustBtcResponse = PostSapiV1AssetDustBtcResponses[keyof PostSapiV1AssetDustBtcResponses];

export type PostSapiV1AssetDustData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The asset being converted. For example, asset=BTC&asset=USDT
         */
        asset: Array<string>;
        /**
         * SPOT or MARGIN, default SPOT
         */
        accountType?: 'SPOT' | 'MARGIN';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/dust';
};

export type PostSapiV1AssetDustErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AssetDustError = PostSapiV1AssetDustErrors[keyof PostSapiV1AssetDustErrors];

export type PostSapiV1AssetDustResponses = {
    /**
     * Dust log records
     */
    200: {
        totalServiceCharge: string;
        totalTransfered: string;
        transferResult: Array<{
            amount: string;
            fromAsset: string;
            operateTime: number;
            serviceChargeAmount: string;
            tranId: number;
            transferedAmount: string;
        }>;
    };
};

export type PostSapiV1AssetDustResponse = PostSapiV1AssetDustResponses[keyof PostSapiV1AssetDustResponses];

export type GetSapiV1AssetAssetDividendData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/assetDividend';
};

export type GetSapiV1AssetAssetDividendErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AssetAssetDividendError = GetSapiV1AssetAssetDividendErrors[keyof GetSapiV1AssetAssetDividendErrors];

export type GetSapiV1AssetAssetDividendResponses = {
    /**
     * Records of asset devidend
     */
    200: {
        rows: Array<{
            id: number;
            amount: string;
            asset: string;
            divTime: number;
            enInfo: string;
            tranId: number;
        }>;
        total: number;
    };
};

export type GetSapiV1AssetAssetDividendResponse = GetSapiV1AssetAssetDividendResponses[keyof GetSapiV1AssetAssetDividendResponses];

export type GetSapiV1AssetAssetDetailData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/assetDetail';
};

export type GetSapiV1AssetAssetDetailErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AssetAssetDetailError = GetSapiV1AssetAssetDetailErrors[keyof GetSapiV1AssetAssetDetailErrors];

export type GetSapiV1AssetAssetDetailResponses = {
    /**
     * Asset detail
     */
    200: {
        CTR: {
            minWithdrawAmount: string;
            /**
             * deposit status (false if ALL of networks' are false)
             */
            depositStatus: boolean;
            withdrawFee: number;
            /**
             * withdrawStatus status (false if ALL of networks' are false)
             */
            withdrawStatus: boolean;
            depositTip: string;
        };
    };
};

export type GetSapiV1AssetAssetDetailResponse = GetSapiV1AssetAssetDetailResponses[keyof GetSapiV1AssetAssetDetailResponses];

export type GetSapiV1AssetTradeFeeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/tradeFee';
};

export type GetSapiV1AssetTradeFeeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AssetTradeFeeError = GetSapiV1AssetTradeFeeErrors[keyof GetSapiV1AssetTradeFeeErrors];

export type GetSapiV1AssetTradeFeeResponses = {
    /**
     * Trade fee info per symbol
     */
    200: Array<{
        symbol: string;
        makerCommission: string;
        takerCommission: string;
    }>;
};

export type GetSapiV1AssetTradeFeeResponse = GetSapiV1AssetTradeFeeResponses[keyof GetSapiV1AssetTradeFeeResponses];

export type GetSapiV1AssetTransferData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Universal transfer type
         */
        type: 'MAIN_C2C' | 'MAIN_UMFUTURE' | 'MAIN_CMFUTURE' | 'MAIN_MARGIN' | 'MAIN_MINING' | 'C2C_MAIN' | 'C2C_UMFUTURE' | 'C2C_MINING' | 'C2C_MARGIN' | 'UMFUTURE_MAIN' | 'UMFUTURE_C2C' | 'UMFUTURE_MARGIN' | 'CMFUTURE_MAIN' | 'CMFUTURE_MARGIN' | 'MARGIN_MAIN' | 'MARGIN_UMFUTURE' | 'MARGIN_CMFUTURE' | 'MARGIN_MINING' | 'MARGIN_C2C' | 'MINING_MAIN' | 'MINING_UMFUTURE' | 'MINING_C2C' | 'MINING_MARGIN' | 'MAIN_PAY' | 'PAY_MAIN' | 'ISOLATEDMARGIN_MARGIN' | 'MARGIN_ISOLATEDMARGIN' | 'ISOLATEDMARGIN_ISOLATEDMARGIN';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         */
        fromSymbol?: string;
        /**
         * Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         */
        toSymbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/transfer';
};

export type GetSapiV1AssetTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AssetTransferError = GetSapiV1AssetTransferErrors[keyof GetSapiV1AssetTransferErrors];

export type GetSapiV1AssetTransferResponses = {
    /**
     * Universal transfer history
     */
    200: {
        total: number;
        rows: Array<{
            asset: string;
            amount: string;
            type: string;
            status: string;
            tranId: number;
            timestamp: number;
        }>;
    };
};

export type GetSapiV1AssetTransferResponse = GetSapiV1AssetTransferResponses[keyof GetSapiV1AssetTransferResponses];

export type PostSapiV1AssetTransferData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Universal transfer type
         */
        type: 'MAIN_C2C' | 'MAIN_UMFUTURE' | 'MAIN_CMFUTURE' | 'MAIN_MARGIN' | 'MAIN_MINING' | 'C2C_MAIN' | 'C2C_UMFUTURE' | 'C2C_MINING' | 'C2C_MARGIN' | 'UMFUTURE_MAIN' | 'UMFUTURE_C2C' | 'UMFUTURE_MARGIN' | 'CMFUTURE_MAIN' | 'CMFUTURE_MARGIN' | 'MARGIN_MAIN' | 'MARGIN_UMFUTURE' | 'MARGIN_CMFUTURE' | 'MARGIN_MINING' | 'MARGIN_C2C' | 'MINING_MAIN' | 'MINING_UMFUTURE' | 'MINING_C2C' | 'MINING_MARGIN' | 'MAIN_PAY' | 'PAY_MAIN' | 'ISOLATEDMARGIN_MARGIN' | 'MARGIN_ISOLATEDMARGIN' | 'ISOLATEDMARGIN_ISOLATEDMARGIN';
        asset: string;
        amount: number;
        /**
         * Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         */
        fromSymbol?: string;
        /**
         * Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         */
        toSymbol?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/transfer';
};

export type PostSapiV1AssetTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AssetTransferError = PostSapiV1AssetTransferErrors[keyof PostSapiV1AssetTransferErrors];

export type PostSapiV1AssetTransferResponses = {
    /**
     * Transfer id
     */
    200: {
        tranId: number;
    };
};

export type PostSapiV1AssetTransferResponse = PostSapiV1AssetTransferResponses[keyof PostSapiV1AssetTransferResponses];

export type PostSapiV1AssetGetFundingAssetData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        needBtcValuation?: 'true' | 'false';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/get-funding-asset';
};

export type PostSapiV1AssetGetFundingAssetErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AssetGetFundingAssetError = PostSapiV1AssetGetFundingAssetErrors[keyof PostSapiV1AssetGetFundingAssetErrors];

export type PostSapiV1AssetGetFundingAssetResponses = {
    /**
     * Funding asset detail
     */
    200: Array<{
        asset: string;
        free: string;
        locked: string;
        freeze: string;
        withdrawing: string;
        btcValuation: string;
    }>;
};

export type PostSapiV1AssetGetFundingAssetResponse = PostSapiV1AssetGetFundingAssetResponses[keyof PostSapiV1AssetGetFundingAssetResponses];

export type PostSapiV3AssetGetUserAssetData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        needBtcValuation?: 'true' | 'false';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v3/asset/getUserAsset';
};

export type PostSapiV3AssetGetUserAssetErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV3AssetGetUserAssetError = PostSapiV3AssetGetUserAssetErrors[keyof PostSapiV3AssetGetUserAssetErrors];

export type PostSapiV3AssetGetUserAssetResponses = {
    /**
     * User assets
     */
    200: Array<{
        asset: string;
        free: string;
        locked: string;
        freeze: string;
        withdrawing: string;
        ipoable: string;
        btcValuation: string;
    }>;
};

export type PostSapiV3AssetGetUserAssetResponse = PostSapiV3AssetGetUserAssetResponses[keyof PostSapiV3AssetGetUserAssetResponses];

export type PostSapiV1AssetConvertTransferData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique flag, the min length is 20
         */
        clientTranId: string;
        asset: string;
        amount: number;
        /**
         * Target asset you want to convert
         */
        targetAsset: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/convert-transfer';
};

export type PostSapiV1AssetConvertTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AssetConvertTransferError = PostSapiV1AssetConvertTransferErrors[keyof PostSapiV1AssetConvertTransferErrors];

export type PostSapiV1AssetConvertTransferResponses = {
    /**
     * Conversion Information
     */
    200: {
        tranId: number;
        status: string;
    };
};

export type PostSapiV1AssetConvertTransferResponse = PostSapiV1AssetConvertTransferResponses[keyof PostSapiV1AssetConvertTransferResponses];

export type GetSapiV1AssetConvertTransferQueryByPageData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The transaction id
         */
        tranId?: number;
        /**
         * If it is blank, we will match deducted asset and target asset.
         */
        asset?: string;
        /**
         * UTC timestamp in ms
         */
        startTime: number;
        /**
         * UTC timestamp in ms
         */
        endTime: number;
        /**
         * MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet
         */
        accountType?: 'MAIN' | 'CARD';
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/convert-transfer/queryByPage';
};

export type GetSapiV1AssetConvertTransferQueryByPageErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AssetConvertTransferQueryByPageError = GetSapiV1AssetConvertTransferQueryByPageErrors[keyof GetSapiV1AssetConvertTransferQueryByPageErrors];

export type GetSapiV1AssetConvertTransferQueryByPageResponses = {
    /**
     * Query Convert Transfer
     */
    200: {
        total: number;
        rows: Array<{
            tranId: number;
            type: number;
            time: number;
            deductedAsset: string;
            deductedAmount: string;
            targetAsset: string;
            targetAmount: string;
            status: string;
            accountType: string;
        }>;
    };
};

export type GetSapiV1AssetConvertTransferQueryByPageResponse = GetSapiV1AssetConvertTransferQueryByPageResponses[keyof GetSapiV1AssetConvertTransferQueryByPageResponses];

export type GetSapiV1AssetLedgerTransferCloudMiningQueryByPageData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The transaction id
         */
        tranId?: number;
        /**
         * The unique flag
         */
        clientTranId?: string;
        /**
         * If it is blank, we will query all assets
         */
        asset?: string;
        /**
         * UTC timestamp in ms
         */
        startTime: number;
        /**
         * UTC timestamp in ms
         */
        endTime: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage';
};

export type GetSapiV1AssetLedgerTransferCloudMiningQueryByPageErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AssetLedgerTransferCloudMiningQueryByPageError = GetSapiV1AssetLedgerTransferCloudMiningQueryByPageErrors[keyof GetSapiV1AssetLedgerTransferCloudMiningQueryByPageErrors];

export type GetSapiV1AssetLedgerTransferCloudMiningQueryByPageResponses = {
    /**
     * Cloud Mining Payment and Refund History
     */
    200: {
        total: number;
        rows: Array<{
            createTime: number;
            tranId: number;
            type: number;
            asset: string;
            amount: string;
            status: string;
        }>;
    };
};

export type GetSapiV1AssetLedgerTransferCloudMiningQueryByPageResponse = GetSapiV1AssetLedgerTransferCloudMiningQueryByPageResponses[keyof GetSapiV1AssetLedgerTransferCloudMiningQueryByPageResponses];

export type GetSapiV1AccountApiRestrictionsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/account/apiRestrictions';
};

export type GetSapiV1AccountApiRestrictionsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AccountApiRestrictionsError = GetSapiV1AccountApiRestrictionsErrors[keyof GetSapiV1AccountApiRestrictionsErrors];

export type GetSapiV1AccountApiRestrictionsResponses = {
    /**
     * API Key permissions
     */
    200: {
        ipRestrict: boolean;
        createTime: number;
        /**
         * This option authorizes this key to transfer funds between your master account and your sub account instantly
         */
        enableInternalTransfer: boolean;
        /**
         * API Key created before your futures account opened does not support futures API service
         */
        enableFutures: boolean;
        /**
         * API Key created before your activate portfolio margin does not support portfolio margin API service
         */
        enablePortfolioMarginTrading?: boolean;
        /**
         * Authorizes this key to Vanilla options trading
         */
        enableVanillaOptions: boolean;
        /**
         * Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization
         */
        permitsUniversalTransfer: boolean;
        enableReading: boolean;
        enableSpotAndMarginTrading: boolean;
        /**
         * This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals
         */
        enableWithdrawals: boolean;
        /**
         * This option can be adjusted after the Cross Margin account transfer is completed
         */
        enableMargin: boolean;
        /**
         * Expiration time for spot and margin trading permission
         */
        tradingAuthorityExpirationTime: number;
    };
};

export type GetSapiV1AccountApiRestrictionsResponse = GetSapiV1AccountApiRestrictionsResponses[keyof GetSapiV1AccountApiRestrictionsResponses];

export type GetSapiV1CapitalContractConvertibleCoinsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/capital/contract/convertible-coins';
};

export type GetSapiV1CapitalContractConvertibleCoinsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CapitalContractConvertibleCoinsError = GetSapiV1CapitalContractConvertibleCoinsErrors[keyof GetSapiV1CapitalContractConvertibleCoinsErrors];

export type GetSapiV1CapitalContractConvertibleCoinsResponses = {
    /**
     * User's auto-conversion settings i
     */
    200: {
        convertEnabled: boolean;
        coins: Array<string>;
        exchangeRates: {
            USDC: string;
            TUSD: string;
            USDP: string;
        };
    };
};

export type GetSapiV1CapitalContractConvertibleCoinsResponse = GetSapiV1CapitalContractConvertibleCoinsResponses[keyof GetSapiV1CapitalContractConvertibleCoinsResponses];

export type PostSapiV1CapitalContractConvertibleCoinsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Must be USDC, USDP or TUSD
         */
        coin: string;
        /**
         * true: turn on the auto-conversion. false: turn off the auto-conversion
         */
        enable: boolean;
    };
    url: '/sapi/v1/capital/contract/convertible-coins';
};

export type PostSapiV1CapitalContractConvertibleCoinsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1CapitalContractConvertibleCoinsError = PostSapiV1CapitalContractConvertibleCoinsErrors[keyof PostSapiV1CapitalContractConvertibleCoinsErrors];

export type PostSapiV1CapitalContractConvertibleCoinsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PostSapiV1CapitalContractConvertibleCoinsResponse = PostSapiV1CapitalContractConvertibleCoinsResponses[keyof PostSapiV1CapitalContractConvertibleCoinsResponses];

export type PostSapiV1SubAccountVirtualSubAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Please input a string. We will create a virtual email using that string for you to register
         */
        subAccountString: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/virtualSubAccount';
};

export type PostSapiV1SubAccountVirtualSubAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountVirtualSubAccountError = PostSapiV1SubAccountVirtualSubAccountErrors[keyof PostSapiV1SubAccountVirtualSubAccountErrors];

export type PostSapiV1SubAccountVirtualSubAccountResponses = {
    /**
     * Return the created virtual email
     */
    200: {
        email: string;
    };
};

export type PostSapiV1SubAccountVirtualSubAccountResponse = PostSapiV1SubAccountVirtualSubAccountResponses[keyof PostSapiV1SubAccountVirtualSubAccountResponses];

export type GetSapiV1SubAccountListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email?: string;
        isFreeze?: 'true' | 'false';
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 1; max 200
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/list';
};

export type GetSapiV1SubAccountListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountListError = GetSapiV1SubAccountListErrors[keyof GetSapiV1SubAccountListErrors];

export type GetSapiV1SubAccountListResponses = {
    /**
     * List of sub-accounts
     */
    200: {
        subAccounts: Array<{
            email: string;
            isFreeze: boolean;
            createTime: number;
            isManagedSubAccount: boolean;
            isAssetManagementSubAccount: boolean;
        }>;
    };
};

export type GetSapiV1SubAccountListResponse = GetSapiV1SubAccountListResponses[keyof GetSapiV1SubAccountListResponses];

export type GetSapiV1SubAccountSubTransferHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        fromEmail?: string;
        /**
         * Sub-account email
         */
        toEmail?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 1
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/sub/transfer/history';
};

export type GetSapiV1SubAccountSubTransferHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountSubTransferHistoryError = GetSapiV1SubAccountSubTransferHistoryErrors[keyof GetSapiV1SubAccountSubTransferHistoryErrors];

export type GetSapiV1SubAccountSubTransferHistoryResponses = {
    /**
     * Sub-account Spot Asset Transfer History
     */
    200: Array<{
        from: string;
        to: string;
        asset: string;
        qty: string;
        status: string;
        tranId: number;
        time: number;
    }>;
};

export type GetSapiV1SubAccountSubTransferHistoryResponse = GetSapiV1SubAccountSubTransferHistoryResponses[keyof GetSapiV1SubAccountSubTransferHistoryResponses];

export type GetSapiV1SubAccountFuturesInternalTransferData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * 1:USDT-margined Futures, 2: Coin-margined Futures
         */
        futuresType: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default value: 50, Max value: 500
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/futures/internalTransfer';
};

export type GetSapiV1SubAccountFuturesInternalTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountFuturesInternalTransferError = GetSapiV1SubAccountFuturesInternalTransferErrors[keyof GetSapiV1SubAccountFuturesInternalTransferErrors];

export type GetSapiV1SubAccountFuturesInternalTransferResponses = {
    /**
     * Sub-account Futures Asset Transfer History
     */
    200: {
        success: boolean;
        futuresType: number;
        transfers: Array<{
            from: string;
            to: string;
            asset: string;
            qty: string;
            tranId: number;
            time: number;
        }>;
    };
};

export type GetSapiV1SubAccountFuturesInternalTransferResponse = GetSapiV1SubAccountFuturesInternalTransferResponses[keyof GetSapiV1SubAccountFuturesInternalTransferResponses];

export type PostSapiV1SubAccountFuturesInternalTransferData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sender email
         */
        fromEmail: string;
        /**
         * Recipient email
         */
        toEmail: string;
        /**
         * 1:USDT-margined Futures,2: Coin-margined Futures
         */
        futuresType: number;
        asset: string;
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/futures/internalTransfer';
};

export type PostSapiV1SubAccountFuturesInternalTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountFuturesInternalTransferError = PostSapiV1SubAccountFuturesInternalTransferErrors[keyof PostSapiV1SubAccountFuturesInternalTransferErrors];

export type PostSapiV1SubAccountFuturesInternalTransferResponses = {
    /**
     * Futures Asset Transfer Info
     */
    200: {
        success: boolean;
        txnId: string;
    };
};

export type PostSapiV1SubAccountFuturesInternalTransferResponse = PostSapiV1SubAccountFuturesInternalTransferResponses[keyof PostSapiV1SubAccountFuturesInternalTransferResponses];

export type GetSapiV3SubAccountAssetsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v3/sub-account/assets';
};

export type GetSapiV3SubAccountAssetsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV3SubAccountAssetsError = GetSapiV3SubAccountAssetsErrors[keyof GetSapiV3SubAccountAssetsErrors];

export type GetSapiV3SubAccountAssetsResponses = {
    /**
     * List of assets balances
     */
    200: {
        balances: Array<{
            asset: string;
            free: number;
            locked: number;
        }>;
    };
};

export type GetSapiV3SubAccountAssetsResponse = GetSapiV3SubAccountAssetsResponses[keyof GetSapiV3SubAccountAssetsResponses];

export type GetSapiV1SubAccountSpotSummaryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email?: string;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default:10 Max:20
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/spotSummary';
};

export type GetSapiV1SubAccountSpotSummaryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountSpotSummaryError = GetSapiV1SubAccountSpotSummaryErrors[keyof GetSapiV1SubAccountSpotSummaryErrors];

export type GetSapiV1SubAccountSpotSummaryResponses = {
    /**
     * Summary of Sub-account Spot Assets
     */
    200: {
        totalCount: number;
        masterAccountTotalAsset: string;
        spotSubUserAssetBtcVoList: Array<{
            email: string;
            totalAsset: string;
        }>;
    };
};

export type GetSapiV1SubAccountSpotSummaryResponse = GetSapiV1SubAccountSpotSummaryResponses[keyof GetSapiV1SubAccountSpotSummaryResponses];

export type GetSapiV1CapitalDepositSubAddressData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * Coin name
         */
        coin: string;
        network?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/capital/deposit/subAddress';
};

export type GetSapiV1CapitalDepositSubAddressErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CapitalDepositSubAddressError = GetSapiV1CapitalDepositSubAddressErrors[keyof GetSapiV1CapitalDepositSubAddressErrors];

export type GetSapiV1CapitalDepositSubAddressResponses = {
    /**
     * Deposit address info
     */
    200: {
        address: string;
        coin: string;
        tag: string;
        url: string;
    };
};

export type GetSapiV1CapitalDepositSubAddressResponse = GetSapiV1CapitalDepositSubAddressResponses[keyof GetSapiV1CapitalDepositSubAddressResponses];

export type GetSapiV1CapitalDepositSubHisrecData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * Coin name
         */
        coin?: string;
        /**
         * 0(0:pending,6: credited but cannot withdraw, 1:success)
         */
        status?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        limit?: number;
        offset?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/capital/deposit/subHisrec';
};

export type GetSapiV1CapitalDepositSubHisrecErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CapitalDepositSubHisrecError = GetSapiV1CapitalDepositSubHisrecErrors[keyof GetSapiV1CapitalDepositSubHisrecErrors];

export type GetSapiV1CapitalDepositSubHisrecResponses = {
    /**
     * Sub-account deposit history
     */
    200: Array<{
        amount: string;
        coin: string;
        network: string;
        status: number;
        address: string;
        addressTag: string;
        txId: string;
        insertTime: number;
        transferType: number;
        confirmTimes: string;
    }>;
};

export type GetSapiV1CapitalDepositSubHisrecResponse = GetSapiV1CapitalDepositSubHisrecResponses[keyof GetSapiV1CapitalDepositSubHisrecResponses];

export type PostSapiV1CapitalDepositCreditApplyData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Deposit record Id, priority use
         */
        depositId?: number;
        /**
         * Deposit txId, used when depositId is not specified
         */
        txId?: string;
        subAccountId?: number;
        subUserId?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/capital/deposit/credit-apply';
};

export type PostSapiV1CapitalDepositCreditApplyErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1CapitalDepositCreditApplyError = PostSapiV1CapitalDepositCreditApplyErrors[keyof PostSapiV1CapitalDepositCreditApplyErrors];

export type PostSapiV1CapitalDepositCreditApplyResponses = {
    /**
     * deposit result
     */
    200: {
        code: string;
        message: string;
        data: boolean;
        success: boolean;
    };
};

export type PostSapiV1CapitalDepositCreditApplyResponse = PostSapiV1CapitalDepositCreditApplyResponses[keyof PostSapiV1CapitalDepositCreditApplyResponses];

export type GetSapiV1AssetWalletBalanceData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/wallet/balance';
};

export type GetSapiV1AssetWalletBalanceErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AssetWalletBalanceError = GetSapiV1AssetWalletBalanceErrors[keyof GetSapiV1AssetWalletBalanceErrors];

export type GetSapiV1AssetWalletBalanceResponses = {
    /**
     * wallet balance
     */
    200: Array<{
        activate: boolean;
        balance: string;
        walletName: string;
    }>;
};

export type GetSapiV1AssetWalletBalanceResponse = GetSapiV1AssetWalletBalanceResponses[keyof GetSapiV1AssetWalletBalanceResponses];

export type GetSapiV1AssetCustodyTransferHistoryData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        startTime: number;
        endTime: number;
        type?: string;
        asset: string;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/asset/custody/transfer-history';
};

export type GetSapiV1AssetCustodyTransferHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AssetCustodyTransferHistoryError = GetSapiV1AssetCustodyTransferHistoryErrors[keyof GetSapiV1AssetCustodyTransferHistoryErrors];

export type GetSapiV1AssetCustodyTransferHistoryResponses = {
    /**
     * Delegation History
     */
    200: {
        total: number;
        rows: Array<{
            clientTranId: string;
            transferType: string;
            asset: string;
            amount: string;
            time: number;
        }>;
    };
};

export type GetSapiV1AssetCustodyTransferHistoryResponse = GetSapiV1AssetCustodyTransferHistoryResponses[keyof GetSapiV1AssetCustodyTransferHistoryResponses];

export type GetSapiV1CapitalDepositAddressListData = {
    body?: never;
    path?: never;
    query: {
        coin: string;
        network?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/capital/deposit/address/list';
};

export type GetSapiV1CapitalDepositAddressListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CapitalDepositAddressListError = GetSapiV1CapitalDepositAddressListErrors[keyof GetSapiV1CapitalDepositAddressListErrors];

export type GetSapiV1CapitalDepositAddressListResponses = {
    /**
     * Coin address
     */
    200: Array<{
        coin: string;
        address: string;
        isDefault: number;
    }>;
};

export type GetSapiV1CapitalDepositAddressListResponse = GetSapiV1CapitalDepositAddressListResponses[keyof GetSapiV1CapitalDepositAddressListResponses];

export type GetSapiV1SpotDelistScheduleData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/spot/delist-schedule';
};

export type GetSapiV1SpotDelistScheduleErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SpotDelistScheduleError = GetSapiV1SpotDelistScheduleErrors[keyof GetSapiV1SpotDelistScheduleErrors];

export type GetSapiV1SpotDelistScheduleResponses = {
    /**
     * Symbols delist schedule
     */
    200: Array<{
        delistTime: number;
        symbol: Array<string>;
    }>;
};

export type GetSapiV1SpotDelistScheduleResponse = GetSapiV1SpotDelistScheduleResponses[keyof GetSapiV1SpotDelistScheduleResponses];

export type GetSapiV1CapitalWithdrawAddressListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/capital/withdraw/address/list';
};

export type GetSapiV1CapitalWithdrawAddressListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CapitalWithdrawAddressListError = GetSapiV1CapitalWithdrawAddressListErrors[keyof GetSapiV1CapitalWithdrawAddressListErrors];

export type GetSapiV1CapitalWithdrawAddressListResponses = {
    /**
     * Withdraw address list
     */
    200: Array<{
        address: string;
        addressTag: string;
        coin: string;
        name: string;
        network: string;
        origin: string;
        originType: string;
        whiteStatus: boolean;
    }>;
};

export type GetSapiV1CapitalWithdrawAddressListResponse = GetSapiV1CapitalWithdrawAddressListResponses[keyof GetSapiV1CapitalWithdrawAddressListResponses];

export type GetSapiV1AccountInfoData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/account/info';
};

export type GetSapiV1AccountInfoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AccountInfoError = GetSapiV1AccountInfoErrors[keyof GetSapiV1AccountInfoErrors];

export type GetSapiV1AccountInfoResponses = {
    /**
     * Account info detail
     */
    200: {
        vipLevel: number;
        /**
         * true or false for margin.
         */
        isMarginEnabled: boolean;
        /**
         * true or false for futures.
         */
        isFutureEnabled: boolean;
    };
};

export type GetSapiV1AccountInfoResponse = GetSapiV1AccountInfoResponses[keyof GetSapiV1AccountInfoResponses];

export type GetSapiV1SubAccountStatusData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/status';
};

export type GetSapiV1SubAccountStatusErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountStatusError = GetSapiV1SubAccountStatusErrors[keyof GetSapiV1SubAccountStatusErrors];

export type GetSapiV1SubAccountStatusResponses = {
    /**
     * Status on Margin/Futures
     */
    200: Array<{
        email: string;
        isSubUserEnabled: boolean;
        isUserActive: boolean;
        /**
         * sub account create time
         */
        insertTime: number;
        isMarginEnabled: boolean;
        isFutureEnabled: boolean;
        /**
         * user mobile number
         */
        mobile: number;
    }>;
};

export type GetSapiV1SubAccountStatusResponse = GetSapiV1SubAccountStatusResponses[keyof GetSapiV1SubAccountStatusResponses];

export type PostSapiV1SubAccountMarginEnableData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/margin/enable';
};

export type PostSapiV1SubAccountMarginEnableErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountMarginEnableError = PostSapiV1SubAccountMarginEnableErrors[keyof PostSapiV1SubAccountMarginEnableErrors];

export type PostSapiV1SubAccountMarginEnableResponses = {
    /**
     * Margin status
     */
    200: {
        email: string;
        isMarginEnabled: boolean;
    };
};

export type PostSapiV1SubAccountMarginEnableResponse = PostSapiV1SubAccountMarginEnableResponses[keyof PostSapiV1SubAccountMarginEnableResponses];

export type GetSapiV1SubAccountMarginAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/margin/account';
};

export type GetSapiV1SubAccountMarginAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountMarginAccountError = GetSapiV1SubAccountMarginAccountErrors[keyof GetSapiV1SubAccountMarginAccountErrors];

export type GetSapiV1SubAccountMarginAccountResponses = {
    /**
     * Margin sub-account details
     */
    200: {
        email: string;
        marginLevel: string;
        totalAssetOfBtc: string;
        totalLiabilityOfBtc: string;
        totalNetAssetOfBtc: string;
        marginTradeCoeffVo: {
            /**
             * Liquidation margin ratio
             */
            forceLiquidationBar: string;
            /**
             * Margin call margin ratio
             */
            marginCallBar: string;
            /**
             * Initial margin ratio
             */
            normalBar: string;
        };
        marginUserAssetVoList: Array<{
            asset: string;
            borrowed: string;
            free: string;
            interest: string;
            locked: string;
            netAsset: string;
        }>;
    };
};

export type GetSapiV1SubAccountMarginAccountResponse = GetSapiV1SubAccountMarginAccountResponses[keyof GetSapiV1SubAccountMarginAccountResponses];

export type GetSapiV1SubAccountMarginAccountSummaryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/margin/accountSummary';
};

export type GetSapiV1SubAccountMarginAccountSummaryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountMarginAccountSummaryError = GetSapiV1SubAccountMarginAccountSummaryErrors[keyof GetSapiV1SubAccountMarginAccountSummaryErrors];

export type GetSapiV1SubAccountMarginAccountSummaryResponses = {
    /**
     * Margin sub-account details
     */
    200: {
        totalAssetOfBtc: string;
        totalLiabilityOfBtc: string;
        totalNetAssetOfBtc: string;
        subAccountList: Array<{
            email: string;
            totalAssetOfBtc: string;
            totalLiabilityOfBtc: string;
            totalNetAssetOfBtc: string;
        }>;
    };
};

export type GetSapiV1SubAccountMarginAccountSummaryResponse = GetSapiV1SubAccountMarginAccountSummaryResponses[keyof GetSapiV1SubAccountMarginAccountSummaryResponses];

export type PostSapiV1SubAccountFuturesEnableData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/futures/enable';
};

export type PostSapiV1SubAccountFuturesEnableErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountFuturesEnableError = PostSapiV1SubAccountFuturesEnableErrors[keyof PostSapiV1SubAccountFuturesEnableErrors];

export type PostSapiV1SubAccountFuturesEnableResponses = {
    /**
     * Futures status
     */
    200: {
        email: string;
        isFuturesEnabled: boolean;
    };
};

export type PostSapiV1SubAccountFuturesEnableResponse = PostSapiV1SubAccountFuturesEnableResponses[keyof PostSapiV1SubAccountFuturesEnableResponses];

export type GetSapiV1SubAccountFuturesAccountData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/futures/account';
};

export type GetSapiV1SubAccountFuturesAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountFuturesAccountError = GetSapiV1SubAccountFuturesAccountErrors[keyof GetSapiV1SubAccountFuturesAccountErrors];

export type GetSapiV1SubAccountFuturesAccountResponses = {
    /**
     * Futures account details
     */
    200: {
        email: string;
        asset: string;
        assets: Array<{
            asset: string;
            initialMargin: string;
            maintenanceMargin: string;
            marginBalance: string;
            maxWithdrawAmount: string;
            openOrderInitialMargin: string;
            positionInitialMargin: string;
            unrealizedProfit: string;
            walletBalance: string;
        }>;
        canDeposit: boolean;
        canTrade: boolean;
        canWithdraw: boolean;
        feeTier: number;
        maxWithdrawAmount: string;
        totalInitialMargin: string;
        totalMaintenanceMargin: string;
        totalMarginBalance: string;
        totalOpenOrderInitialMargin: string;
        totalPositionInitialMargin: string;
        totalUnrealizedProfit: string;
        totalWalletBalance: string;
        updateTime: number;
    };
};

export type GetSapiV1SubAccountFuturesAccountResponse = GetSapiV1SubAccountFuturesAccountResponses[keyof GetSapiV1SubAccountFuturesAccountResponses];

export type GetSapiV1SubAccountFuturesAccountSummaryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/futures/accountSummary';
};

export type GetSapiV1SubAccountFuturesAccountSummaryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountFuturesAccountSummaryError = GetSapiV1SubAccountFuturesAccountSummaryErrors[keyof GetSapiV1SubAccountFuturesAccountSummaryErrors];

export type GetSapiV1SubAccountFuturesAccountSummaryResponses = {
    /**
     * Futures account summary
     */
    200: {
        totalInitialMargin: string;
        totalMaintenanceMargin: string;
        totalMarginBalance: string;
        totalOpenOrderInitialMargin: string;
        totalPositionInitialMargin: string;
        totalUnrealizedProfit: string;
        totalWalletBalance: string;
        asset: string;
        subAccountList: Array<{
            email: string;
            totalInitialMargin: string;
            totalMaintenanceMargin: string;
            totalMarginBalance: string;
            totalOpenOrderInitialMargin: string;
            totalPositionInitialMargin: string;
            totalUnrealizedProfit: string;
            totalWalletBalance: string;
            asset: string;
        }>;
    };
};

export type GetSapiV1SubAccountFuturesAccountSummaryResponse = GetSapiV1SubAccountFuturesAccountSummaryResponses[keyof GetSapiV1SubAccountFuturesAccountSummaryResponses];

export type GetSapiV1SubAccountFuturesPositionRiskData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/futures/positionRisk';
};

export type GetSapiV1SubAccountFuturesPositionRiskErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountFuturesPositionRiskError = GetSapiV1SubAccountFuturesPositionRiskErrors[keyof GetSapiV1SubAccountFuturesPositionRiskErrors];

export type GetSapiV1SubAccountFuturesPositionRiskResponses = {
    /**
     * Futures account summary
     */
    200: Array<{
        entryPrice: string;
        /**
         * current initial leverage
         */
        leverage: string;
        /**
         * notional value limit of current initial leverage
         */
        maxNotional: string;
        liquidationPrice: string;
        markPrice: string;
        positionAmount: string;
        symbol: string;
        unrealizedProfit: string;
    }>;
};

export type GetSapiV1SubAccountFuturesPositionRiskResponse = GetSapiV1SubAccountFuturesPositionRiskResponses[keyof GetSapiV1SubAccountFuturesPositionRiskResponses];

export type PostSapiV1SubAccountFuturesTransferData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        asset: string;
        amount: number;
        /**
         * * `1` - transfer from subaccount's spot account to its USDT-margined futures account
         * * `2` - transfer from subaccount's USDT-margined futures account to its spot account
         * * `3` - transfer from subaccount's spot account to its COIN-margined futures account
         * * `4` - transfer from subaccount's COIN-margined futures account to its spot account
         */
        type: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/futures/transfer';
};

export type PostSapiV1SubAccountFuturesTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountFuturesTransferError = PostSapiV1SubAccountFuturesTransferErrors[keyof PostSapiV1SubAccountFuturesTransferErrors];

export type PostSapiV1SubAccountFuturesTransferResponses = {
    /**
     * Transfer id
     */
    200: {
        txnId: string;
    };
};

export type PostSapiV1SubAccountFuturesTransferResponse = PostSapiV1SubAccountFuturesTransferResponses[keyof PostSapiV1SubAccountFuturesTransferResponses];

export type PostSapiV1SubAccountMarginTransferData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        asset: string;
        amount: number;
        /**
         * * `1` - transfer from subaccount's spot account to margin account
         * * `2` - transfer from subaccount's margin account to its spot account
         */
        type: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/margin/transfer';
};

export type PostSapiV1SubAccountMarginTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountMarginTransferError = PostSapiV1SubAccountMarginTransferErrors[keyof PostSapiV1SubAccountMarginTransferErrors];

export type PostSapiV1SubAccountMarginTransferResponses = {
    /**
     * Transfer id
     */
    200: {
        txnId: string;
    };
};

export type PostSapiV1SubAccountMarginTransferResponse = PostSapiV1SubAccountMarginTransferResponses[keyof PostSapiV1SubAccountMarginTransferResponses];

export type PostSapiV1SubAccountTransferSubToSubData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Recipient email
         */
        toEmail: string;
        asset: string;
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/transfer/subToSub';
};

export type PostSapiV1SubAccountTransferSubToSubErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountTransferSubToSubError = PostSapiV1SubAccountTransferSubToSubErrors[keyof PostSapiV1SubAccountTransferSubToSubErrors];

export type PostSapiV1SubAccountTransferSubToSubResponses = {
    /**
     * Transfer id
     */
    200: {
        txnId: string;
    };
};

export type PostSapiV1SubAccountTransferSubToSubResponse = PostSapiV1SubAccountTransferSubToSubResponses[keyof PostSapiV1SubAccountTransferSubToSubResponses];

export type PostSapiV1SubAccountTransferSubToMasterData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/transfer/subToMaster';
};

export type PostSapiV1SubAccountTransferSubToMasterErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountTransferSubToMasterError = PostSapiV1SubAccountTransferSubToMasterErrors[keyof PostSapiV1SubAccountTransferSubToMasterErrors];

export type PostSapiV1SubAccountTransferSubToMasterResponses = {
    /**
     * Transfer id
     */
    200: {
        txnId: string;
    };
};

export type PostSapiV1SubAccountTransferSubToMasterResponse = PostSapiV1SubAccountTransferSubToMasterResponses[keyof PostSapiV1SubAccountTransferSubToMasterResponses];

export type GetSapiV1SubAccountTransferSubUserHistoryData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        /**
         * * `1` - transfer in
         * * `2` - transfer out
         */
        type?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/transfer/subUserHistory';
};

export type GetSapiV1SubAccountTransferSubUserHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountTransferSubUserHistoryError = GetSapiV1SubAccountTransferSubUserHistoryErrors[keyof GetSapiV1SubAccountTransferSubUserHistoryErrors];

export type GetSapiV1SubAccountTransferSubUserHistoryResponses = {
    /**
     * Transfer id
     */
    200: Array<{
        counterParty: string;
        email: string;
        /**
         * 1 for transfer in, 2 for transfer out
         */
        type: number;
        asset: string;
        qty: string;
        fromAccountType: string;
        toAccountType: string;
        status: string;
        tranId: number;
        time: number;
    }>;
};

export type GetSapiV1SubAccountTransferSubUserHistoryResponse = GetSapiV1SubAccountTransferSubUserHistoryResponses[keyof GetSapiV1SubAccountTransferSubUserHistoryResponses];

export type GetSapiV1SubAccountUniversalTransferData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        fromEmail?: string;
        /**
         * Sub-account email
         */
        toEmail?: string;
        clientTranId?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 500, Max 500
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/universalTransfer';
};

export type GetSapiV1SubAccountUniversalTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountUniversalTransferError = GetSapiV1SubAccountUniversalTransferErrors[keyof GetSapiV1SubAccountUniversalTransferErrors];

export type GetSapiV1SubAccountUniversalTransferResponses = {
    /**
     * Transfer History
     */
    200: Array<{
        tranId: number;
        fromEmail: string;
        toEmail: string;
        asset: string;
        amount: string;
        fromAccountType: string;
        toAccountType: string;
        status: string;
        createTimeStamp: number;
        clientTranId: string;
    }>;
};

export type GetSapiV1SubAccountUniversalTransferResponse = GetSapiV1SubAccountUniversalTransferResponses[keyof GetSapiV1SubAccountUniversalTransferResponses];

export type PostSapiV1SubAccountUniversalTransferData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        fromEmail?: string;
        /**
         * Sub-account email
         */
        toEmail?: string;
        fromAccountType: 'SPOT' | 'USDT_FUTURE' | 'COIN_FUTURE' | 'MARGIN' | 'ISOLATED_MARGIN';
        toAccountType: 'SPOT' | 'USDT_FUTURE' | 'COIN_FUTURE' | 'MARGIN' | 'ISOLATED_MARGIN';
        clientTranId?: string;
        /**
         * Only supported under ISOLATED_MARGIN type
         */
        symbol?: string;
        asset: string;
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/universalTransfer';
};

export type PostSapiV1SubAccountUniversalTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountUniversalTransferError = PostSapiV1SubAccountUniversalTransferErrors[keyof PostSapiV1SubAccountUniversalTransferErrors];

export type PostSapiV1SubAccountUniversalTransferResponses = {
    /**
     * Transfer id
     */
    200: {
        tranId: number;
        clientTranId: string;
    };
};

export type PostSapiV1SubAccountUniversalTransferResponse = PostSapiV1SubAccountUniversalTransferResponses[keyof PostSapiV1SubAccountUniversalTransferResponses];

export type GetSapiV2SubAccountFuturesAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * * `1` - USDT Margined Futures
         * * `2` - COIN Margined Futures
         */
        futuresType: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/sub-account/futures/account';
};

export type GetSapiV2SubAccountFuturesAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2SubAccountFuturesAccountError = GetSapiV2SubAccountFuturesAccountErrors[keyof GetSapiV2SubAccountFuturesAccountErrors];

export type GetSapiV2SubAccountFuturesAccountResponses = {
    /**
     * USDT or COIN Margined Futures Details
     */
    200: SubAccountUsdtFuturesDetails | SubAccountCoinFuturesDetails;
};

export type GetSapiV2SubAccountFuturesAccountResponse = GetSapiV2SubAccountFuturesAccountResponses[keyof GetSapiV2SubAccountFuturesAccountResponses];

export type GetSapiV2SubAccountFuturesAccountSummaryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * * `1` - USDT Margined Futures
         * * `2` - COIN Margined Futures
         */
        futuresType: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 10, Max 20
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/sub-account/futures/accountSummary';
};

export type GetSapiV2SubAccountFuturesAccountSummaryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2SubAccountFuturesAccountSummaryError = GetSapiV2SubAccountFuturesAccountSummaryErrors[keyof GetSapiV2SubAccountFuturesAccountSummaryErrors];

export type GetSapiV2SubAccountFuturesAccountSummaryResponses = {
    /**
     * USDT or COIN Margined Futures Summary
     */
    200: SubAccountUsdtFuturesSummary | SubAccountCoinFuturesSummary;
};

export type GetSapiV2SubAccountFuturesAccountSummaryResponse = GetSapiV2SubAccountFuturesAccountSummaryResponses[keyof GetSapiV2SubAccountFuturesAccountSummaryResponses];

export type GetSapiV2SubAccountFuturesPositionRiskData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * * `1` - USDT Margined Futures
         * * `2` - COIN Margined Futures
         */
        futuresType: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/sub-account/futures/positionRisk';
};

export type GetSapiV2SubAccountFuturesPositionRiskErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2SubAccountFuturesPositionRiskError = GetSapiV2SubAccountFuturesPositionRiskErrors[keyof GetSapiV2SubAccountFuturesPositionRiskErrors];

export type GetSapiV2SubAccountFuturesPositionRiskResponses = {
    /**
     * USDT or COIN Margined Futures Position Risk
     */
    200: SubAccountUsdtFuturesPositionRisk | SubAccountCoinFuturesPositionRisk;
};

export type GetSapiV2SubAccountFuturesPositionRiskResponse = GetSapiV2SubAccountFuturesPositionRiskResponses[keyof GetSapiV2SubAccountFuturesPositionRiskResponses];

export type PostSapiV1SubAccountBlvtEnableData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * Only true for now
         */
        enableBlvt: boolean;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/blvt/enable';
};

export type PostSapiV1SubAccountBlvtEnableErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountBlvtEnableError = PostSapiV1SubAccountBlvtEnableErrors[keyof PostSapiV1SubAccountBlvtEnableErrors];

export type PostSapiV1SubAccountBlvtEnableResponses = {
    /**
     * BLVT status
     */
    200: {
        email: string;
        enableBlvt: boolean;
    };
};

export type PostSapiV1SubAccountBlvtEnableResponse = PostSapiV1SubAccountBlvtEnableResponses[keyof PostSapiV1SubAccountBlvtEnableResponses];

export type PostSapiV1ManagedSubaccountDepositData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Recipient email
         */
        toEmail: string;
        asset: string;
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/deposit';
};

export type PostSapiV1ManagedSubaccountDepositErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1ManagedSubaccountDepositError = PostSapiV1ManagedSubaccountDepositErrors[keyof PostSapiV1ManagedSubaccountDepositErrors];

export type PostSapiV1ManagedSubaccountDepositResponses = {
    /**
     * Transfer id
     */
    200: {
        tranId: number;
    };
};

export type PostSapiV1ManagedSubaccountDepositResponse = PostSapiV1ManagedSubaccountDepositResponses[keyof PostSapiV1ManagedSubaccountDepositResponses];

export type GetSapiV1ManagedSubaccountAssetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/asset';
};

export type GetSapiV1ManagedSubaccountAssetErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ManagedSubaccountAssetError = GetSapiV1ManagedSubaccountAssetErrors[keyof GetSapiV1ManagedSubaccountAssetErrors];

export type GetSapiV1ManagedSubaccountAssetResponses = {
    /**
     * List of asset details
     */
    200: Array<{
        coin: string;
        name: string;
        totalBalance: string;
        availableBalance: string;
        inOrder: string;
        btcValue: string;
    }>;
};

export type GetSapiV1ManagedSubaccountAssetResponse = GetSapiV1ManagedSubaccountAssetResponses[keyof GetSapiV1ManagedSubaccountAssetResponses];

export type PostSapiV1ManagedSubaccountWithdrawData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sender email
         */
        fromEmail: string;
        asset: string;
        amount: number;
        /**
         * Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
         */
        transferDate?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/withdraw';
};

export type PostSapiV1ManagedSubaccountWithdrawErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1ManagedSubaccountWithdrawError = PostSapiV1ManagedSubaccountWithdrawErrors[keyof PostSapiV1ManagedSubaccountWithdrawErrors];

export type PostSapiV1ManagedSubaccountWithdrawResponses = {
    /**
     * Transfer id
     */
    200: {
        tranId: number;
    };
};

export type PostSapiV1ManagedSubaccountWithdrawResponse = PostSapiV1ManagedSubaccountWithdrawResponses[keyof PostSapiV1ManagedSubaccountWithdrawResponses];

export type GetSapiV1ManagedSubaccountAccountSnapshotData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        /**
         * "SPOT", "MARGIN"(cross), "FUTURES"(UM)
         */
        type: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * min 7, max 30, default 7
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/accountSnapshot';
};

export type GetSapiV1ManagedSubaccountAccountSnapshotErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ManagedSubaccountAccountSnapshotError = GetSapiV1ManagedSubaccountAccountSnapshotErrors[keyof GetSapiV1ManagedSubaccountAccountSnapshotErrors];

export type GetSapiV1ManagedSubaccountAccountSnapshotResponses = {
    /**
     * Sub-account spot snapshot
     */
    200: {
        code: number;
        msg: string;
        snapshotVos: Array<{
            data: {
                balances: Array<{
                    asset: string;
                    free: string;
                    locked: string;
                }>;
                totalAssetOfBtc: string;
            };
            type: string;
            updateTime: number;
        }>;
    };
};

export type GetSapiV1ManagedSubaccountAccountSnapshotResponse = GetSapiV1ManagedSubaccountAccountSnapshotResponses[keyof GetSapiV1ManagedSubaccountAccountSnapshotResponses];

export type GetSapiV1ManagedSubaccountQueryTransLogForInvestorData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * Transfer Direction (FROM/TO)
         */
        transfers?: string;
        /**
         * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         */
        transferFunctionAccountType?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/queryTransLogForInvestor';
};

export type GetSapiV1ManagedSubaccountQueryTransLogForInvestorErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ManagedSubaccountQueryTransLogForInvestorError = GetSapiV1ManagedSubaccountQueryTransLogForInvestorErrors[keyof GetSapiV1ManagedSubaccountQueryTransLogForInvestorErrors];

export type GetSapiV1ManagedSubaccountQueryTransLogForInvestorResponses = {
    /**
     * Managed sub account transfer logs (for invest account)
     */
    200: {
        count: number;
        managerSubTransferHistoryVos: Array<{
            fromEmail: string;
            fromAccountType: string;
            toEmail: string;
            toAccountType: string;
            asset: string;
            amount: string;
            scheduledData: number;
            createTime: number;
            status: string;
            tranId: number;
        }>;
    };
};

export type GetSapiV1ManagedSubaccountQueryTransLogForInvestorResponse = GetSapiV1ManagedSubaccountQueryTransLogForInvestorResponses[keyof GetSapiV1ManagedSubaccountQueryTransLogForInvestorResponses];

export type GetSapiV1ManagedSubaccountQueryTransLogForTradeParentData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * Transfer Direction (FROM/TO)
         */
        transfers?: string;
        /**
         * Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         */
        transferFunctionAccountType?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/queryTransLogForTradeParent';
};

export type GetSapiV1ManagedSubaccountQueryTransLogForTradeParentErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ManagedSubaccountQueryTransLogForTradeParentError = GetSapiV1ManagedSubaccountQueryTransLogForTradeParentErrors[keyof GetSapiV1ManagedSubaccountQueryTransLogForTradeParentErrors];

export type GetSapiV1ManagedSubaccountQueryTransLogForTradeParentResponses = {
    /**
     * Managed sub account transfer logs (for trading team)
     */
    200: {
        count: number;
        managerSubTransferHistoryVos: Array<{
            fromEmail: string;
            fromAccountType: string;
            toEmail: string;
            toAccountType: string;
            asset: string;
            amount: string;
            scheduledData: number;
            createTime: number;
            status: string;
            tranId: number;
        }>;
    };
};

export type GetSapiV1ManagedSubaccountQueryTransLogForTradeParentResponse = GetSapiV1ManagedSubaccountQueryTransLogForTradeParentResponses[keyof GetSapiV1ManagedSubaccountQueryTransLogForTradeParentResponses];

export type GetSapiV1ManagedSubaccountFetchFutureAssetData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/fetch-future-asset';
};

export type GetSapiV1ManagedSubaccountFetchFutureAssetErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ManagedSubaccountFetchFutureAssetError = GetSapiV1ManagedSubaccountFetchFutureAssetErrors[keyof GetSapiV1ManagedSubaccountFetchFutureAssetErrors];

export type GetSapiV1ManagedSubaccountFetchFutureAssetResponses = {
    /**
     * Sub account futures assset details
     */
    200: {
        code: number;
        message: string;
        snapshotVos: Array<{
            type: string;
            updateTime: number;
            data: {
                assets: Array<{
                    asset: string;
                    marginBalance: number;
                    walletBalance: number;
                }>;
                position: Array<{
                    symbol: string;
                    entryPrice: number;
                    markPrice: number;
                    positionAmt: number;
                }>;
            };
        }>;
    };
};

export type GetSapiV1ManagedSubaccountFetchFutureAssetResponse = GetSapiV1ManagedSubaccountFetchFutureAssetResponses[keyof GetSapiV1ManagedSubaccountFetchFutureAssetResponses];

export type GetSapiV1ManagedSubaccountMarginAssetData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/marginAsset';
};

export type GetSapiV1ManagedSubaccountMarginAssetErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ManagedSubaccountMarginAssetError = GetSapiV1ManagedSubaccountMarginAssetErrors[keyof GetSapiV1ManagedSubaccountMarginAssetErrors];

export type GetSapiV1ManagedSubaccountMarginAssetResponses = {
    /**
     * Sub account margin assset details
     */
    200: {
        marginLevel: string;
        totalAssetOfBtc: string;
        totalLiabilityOfBtc: string;
        totalNetAssetOfBtc: string;
        userAssets: Array<{
            asset: string;
            borrowed: string;
            free: string;
            interest: string;
            locked: string;
            netAsset: string;
        }>;
    };
};

export type GetSapiV1ManagedSubaccountMarginAssetResponse = GetSapiV1ManagedSubaccountMarginAssetResponses[keyof GetSapiV1ManagedSubaccountMarginAssetResponses];

export type GetSapiV1ManagedSubaccountInfoData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/info';
};

export type GetSapiV1ManagedSubaccountInfoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ManagedSubaccountInfoError = GetSapiV1ManagedSubaccountInfoErrors[keyof GetSapiV1ManagedSubaccountInfoErrors];

export type GetSapiV1ManagedSubaccountInfoResponses = {
    /**
     * Managed sub account list
     */
    200: {
        total: number;
        managerSubUserInfoVoList: Array<{
            rootUserId: number;
            managersubUserId: number;
            bindParentUserId: number;
            email?: string;
            insertTimeStamp: number;
            bindParentEmail: string;
            isSubUserEnabled: boolean;
            isUserActive: boolean;
            isMarginEnabled: boolean;
            isFutureEnabled: boolean;
            isSignedLVTRiskAgreement: boolean;
        }>;
    };
};

export type GetSapiV1ManagedSubaccountInfoResponse = GetSapiV1ManagedSubaccountInfoResponses[keyof GetSapiV1ManagedSubaccountInfoResponses];

export type GetSapiV1ManagedSubaccountDepositAddressData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * Coin name
         */
        coin: string;
        network?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/deposit/address';
};

export type GetSapiV1ManagedSubaccountDepositAddressErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ManagedSubaccountDepositAddressError = GetSapiV1ManagedSubaccountDepositAddressErrors[keyof GetSapiV1ManagedSubaccountDepositAddressErrors];

export type GetSapiV1ManagedSubaccountDepositAddressResponses = {
    /**
     * Managed sub deposit address
     */
    200: {
        coin: string;
        address: string;
        tag: string;
        url: string;
    };
};

export type GetSapiV1ManagedSubaccountDepositAddressResponse = GetSapiV1ManagedSubaccountDepositAddressResponses[keyof GetSapiV1ManagedSubaccountDepositAddressResponses];

export type GetSapiV1ManagedSubaccountQueryTransLogData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * Transfer Direction
         */
        transfers: 'FROM' | 'TO';
        /**
         * Transfer function account type
         */
        transferFunctionAccountType: 'SPOT' | 'MARGIN' | 'ISOLATED_MARGIN' | 'USDT_FUTURE' | 'COIN_FUTURE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/managed-subaccount/query-trans-log';
};

export type GetSapiV1ManagedSubaccountQueryTransLogErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ManagedSubaccountQueryTransLogError = GetSapiV1ManagedSubaccountQueryTransLogErrors[keyof GetSapiV1ManagedSubaccountQueryTransLogErrors];

export type GetSapiV1ManagedSubaccountQueryTransLogResponses = {
    /**
     * Managed sub deposit address
     */
    200: {
        count: number;
        managerSubTransferHistoryVos: Array<{
            fromEmail: string;
            fromAccountType: string;
            toEmail: string;
            toAccountType: string;
            asset: string;
            amount: string;
            scheduledData: number;
            createTime: number;
            status: string;
            tranId: number;
        }>;
    };
};

export type GetSapiV1ManagedSubaccountQueryTransLogResponse = GetSapiV1ManagedSubaccountQueryTransLogResponses[keyof GetSapiV1ManagedSubaccountQueryTransLogResponses];

export type GetSapiV1SubAccountSubAccountApiIpRestrictionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        subAccountApiKey: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/subAccountApi/ipRestriction';
};

export type GetSapiV1SubAccountSubAccountApiIpRestrictionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountSubAccountApiIpRestrictionError = GetSapiV1SubAccountSubAccountApiIpRestrictionErrors[keyof GetSapiV1SubAccountSubAccountApiIpRestrictionErrors];

export type GetSapiV1SubAccountSubAccountApiIpRestrictionResponses = {
    /**
     * IP Restriction information
     */
    200: {
        ipRestrict: string;
        ipList: Array<string>;
        updateTime: number;
        apiKey: string;
    };
};

export type GetSapiV1SubAccountSubAccountApiIpRestrictionResponse = GetSapiV1SubAccountSubAccountApiIpRestrictionResponses[keyof GetSapiV1SubAccountSubAccountApiIpRestrictionResponses];

export type DeleteSapiV1SubAccountSubAccountApiIpRestrictionIpListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        subAccountApiKey: string;
        /**
         * Can be added in batches, separated by commas
         */
        ipAddress?: string;
        /**
         * third party IP list name
         */
        thirdPartyName?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList';
};

export type DeleteSapiV1SubAccountSubAccountApiIpRestrictionIpListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteSapiV1SubAccountSubAccountApiIpRestrictionIpListError = DeleteSapiV1SubAccountSubAccountApiIpRestrictionIpListErrors[keyof DeleteSapiV1SubAccountSubAccountApiIpRestrictionIpListErrors];

export type DeleteSapiV1SubAccountSubAccountApiIpRestrictionIpListResponses = {
    /**
     * Delete IP information
     */
    200: {
        ipRestrict: string;
        ipList: Array<string>;
        updateTime: number;
        apiKey: string;
    };
};

export type DeleteSapiV1SubAccountSubAccountApiIpRestrictionIpListResponse = DeleteSapiV1SubAccountSubAccountApiIpRestrictionIpListResponses[keyof DeleteSapiV1SubAccountSubAccountApiIpRestrictionIpListResponses];

export type GetSapiV1SubAccountTransactionStatisticsData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/transaction-statistics';
};

export type GetSapiV1SubAccountTransactionStatisticsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SubAccountTransactionStatisticsError = GetSapiV1SubAccountTransactionStatisticsErrors[keyof GetSapiV1SubAccountTransactionStatisticsErrors];

export type GetSapiV1SubAccountTransactionStatisticsResponses = {
    /**
     * Sub account transaction statistics
     */
    200: {
        recent30BtcTotal: string;
        recent30BtcFuturesTotal: string;
        recent30BtcMarginTotal: string;
        recent30BusdTotal: string;
        recent30BusdFuturesTotal: string;
        recent30BusdMarginTotal: string;
        tradeInfoVos: Array<{
            userId?: number;
            btc?: number;
            btcFutures?: number;
            btcMargin?: number;
            busd?: number;
            busdFutures?: number;
            busdMargin?: number;
            date?: number;
        }>;
    };
};

export type GetSapiV1SubAccountTransactionStatisticsResponse = GetSapiV1SubAccountTransactionStatisticsResponses[keyof GetSapiV1SubAccountTransactionStatisticsResponses];

export type PostSapiV1SubAccountEoptionsEnableData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/sub-account/eoptions/enable';
};

export type PostSapiV1SubAccountEoptionsEnableErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SubAccountEoptionsEnableError = PostSapiV1SubAccountEoptionsEnableErrors[keyof PostSapiV1SubAccountEoptionsEnableErrors];

export type PostSapiV1SubAccountEoptionsEnableResponses = {
    /**
     * Sub account EOptions status
     */
    200: {
        email: string;
        isEOptionsEnabled: boolean;
    };
};

export type PostSapiV1SubAccountEoptionsEnableResponse = PostSapiV1SubAccountEoptionsEnableResponses[keyof PostSapiV1SubAccountEoptionsEnableResponses];

export type PostSapiV2SubAccountSubAccountApiIpRestrictionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Sub-account email
         */
        email: string;
        subAccountApiKey: string;
        /**
         * IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only. 3 = Restrict access to users' trusted third party IPs only
         */
        status: string;
        /**
         * third party IP list name
         */
        thirdPartyName?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/sub-account/subAccountApi/ipRestriction';
};

export type PostSapiV2SubAccountSubAccountApiIpRestrictionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV2SubAccountSubAccountApiIpRestrictionError = PostSapiV2SubAccountSubAccountApiIpRestrictionErrors[keyof PostSapiV2SubAccountSubAccountApiIpRestrictionErrors];

export type PostSapiV2SubAccountSubAccountApiIpRestrictionResponses = {
    /**
     * Update IP Restriction
     */
    200: {
        status: string;
        ipList: Array<string>;
        updateTime: number;
        apiKey: string;
    };
};

export type PostSapiV2SubAccountSubAccountApiIpRestrictionResponse = PostSapiV2SubAccountSubAccountApiIpRestrictionResponses[keyof PostSapiV2SubAccountSubAccountApiIpRestrictionResponses];

export type GetSapiV4SubAccountAssetsData = {
    body?: never;
    path?: never;
    query: {
        email: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v4/sub-account/assets';
};

export type GetSapiV4SubAccountAssetsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV4SubAccountAssetsError = GetSapiV4SubAccountAssetsErrors[keyof GetSapiV4SubAccountAssetsErrors];

export type GetSapiV4SubAccountAssetsResponses = {
    /**
     * Sub account balances
     */
    200: {
        balances: Array<{
            asset: string;
            free: string;
            locked: string;
        }>;
    };
};

export type GetSapiV4SubAccountAssetsResponse = GetSapiV4SubAccountAssetsResponses[keyof GetSapiV4SubAccountAssetsResponses];

export type DeleteApiV3UserDataStreamData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User websocket listen key
         */
        listenKey?: string;
    };
    url: '/api/v3/userDataStream';
};

export type DeleteApiV3UserDataStreamErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type DeleteApiV3UserDataStreamError = DeleteApiV3UserDataStreamErrors[keyof DeleteApiV3UserDataStreamErrors];

export type DeleteApiV3UserDataStreamResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteApiV3UserDataStreamResponse = DeleteApiV3UserDataStreamResponses[keyof DeleteApiV3UserDataStreamResponses];

export type PostApiV3UserDataStreamData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v3/userDataStream';
};

export type PostApiV3UserDataStreamResponses = {
    /**
     * Listen key
     */
    200: {
        listenKey: string;
    };
};

export type PostApiV3UserDataStreamResponse = PostApiV3UserDataStreamResponses[keyof PostApiV3UserDataStreamResponses];

export type PutApiV3UserDataStreamData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User websocket listen key
         */
        listenKey?: string;
    };
    url: '/api/v3/userDataStream';
};

export type PutApiV3UserDataStreamErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type PutApiV3UserDataStreamError = PutApiV3UserDataStreamErrors[keyof PutApiV3UserDataStreamErrors];

export type PutApiV3UserDataStreamResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PutApiV3UserDataStreamResponse = PutApiV3UserDataStreamResponses[keyof PutApiV3UserDataStreamResponses];

export type DeleteSapiV1UserDataStreamData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User websocket listen key
         */
        listenKey?: string;
    };
    url: '/sapi/v1/userDataStream';
};

export type DeleteSapiV1UserDataStreamErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type DeleteSapiV1UserDataStreamError = DeleteSapiV1UserDataStreamErrors[keyof DeleteSapiV1UserDataStreamErrors];

export type DeleteSapiV1UserDataStreamResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteSapiV1UserDataStreamResponse = DeleteSapiV1UserDataStreamResponses[keyof DeleteSapiV1UserDataStreamResponses];

export type PostSapiV1UserDataStreamData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/userDataStream';
};

export type PostSapiV1UserDataStreamResponses = {
    /**
     * Margin listen key
     */
    200: {
        listenKey: string;
    };
};

export type PostSapiV1UserDataStreamResponse = PostSapiV1UserDataStreamResponses[keyof PostSapiV1UserDataStreamResponses];

export type PutSapiV1UserDataStreamData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User websocket listen key
         */
        listenKey?: string;
    };
    url: '/sapi/v1/userDataStream';
};

export type PutSapiV1UserDataStreamErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type PutSapiV1UserDataStreamError = PutSapiV1UserDataStreamErrors[keyof PutSapiV1UserDataStreamErrors];

export type PutSapiV1UserDataStreamResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PutSapiV1UserDataStreamResponse = PutSapiV1UserDataStreamResponses[keyof PutSapiV1UserDataStreamResponses];

export type DeleteSapiV1UserDataStreamIsolatedData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User websocket listen key
         */
        listenKey?: string;
    };
    url: '/sapi/v1/userDataStream/isolated';
};

export type DeleteSapiV1UserDataStreamIsolatedErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type DeleteSapiV1UserDataStreamIsolatedError = DeleteSapiV1UserDataStreamIsolatedErrors[keyof DeleteSapiV1UserDataStreamIsolatedErrors];

export type DeleteSapiV1UserDataStreamIsolatedResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type DeleteSapiV1UserDataStreamIsolatedResponse = DeleteSapiV1UserDataStreamIsolatedResponses[keyof DeleteSapiV1UserDataStreamIsolatedResponses];

export type PostSapiV1UserDataStreamIsolatedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/userDataStream/isolated';
};

export type PostSapiV1UserDataStreamIsolatedResponses = {
    /**
     * Isolated margin listen key
     */
    200: {
        listenKey: string;
    };
};

export type PostSapiV1UserDataStreamIsolatedResponse = PostSapiV1UserDataStreamIsolatedResponses[keyof PostSapiV1UserDataStreamIsolatedResponses];

export type PutSapiV1UserDataStreamIsolatedData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User websocket listen key
         */
        listenKey?: string;
    };
    url: '/sapi/v1/userDataStream/isolated';
};

export type PutSapiV1UserDataStreamIsolatedErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type PutSapiV1UserDataStreamIsolatedError = PutSapiV1UserDataStreamIsolatedErrors[keyof PutSapiV1UserDataStreamIsolatedErrors];

export type PutSapiV1UserDataStreamIsolatedResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type PutSapiV1UserDataStreamIsolatedResponse = PutSapiV1UserDataStreamIsolatedResponses[keyof PutSapiV1UserDataStreamIsolatedResponses];

export type GetSapiV1FiatOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * * `0` - deposit
         * * `1` - withdraw
         */
        transactionType: number;
        beginTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 100, max 500
         */
        rows?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/fiat/orders';
};

export type GetSapiV1FiatOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1FiatOrdersError = GetSapiV1FiatOrdersErrors[keyof GetSapiV1FiatOrdersErrors];

export type GetSapiV1FiatOrdersResponses = {
    /**
     * History of deposit/withdraw orders
     */
    200: {
        code: string;
        message: string;
        data: Array<{
            orderNo: string;
            fiatCurrency: string;
            indicatedAmount: string;
            amount: string;
            totalFee: string;
            method: string;
            /**
             * Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
             */
            status: string;
            createTime: number;
            updateTime: number;
        }>;
        total: number;
        success: boolean;
    };
};

export type GetSapiV1FiatOrdersResponse = GetSapiV1FiatOrdersResponses[keyof GetSapiV1FiatOrdersResponses];

export type GetSapiV1FiatPaymentsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * * `0` - deposit
         * * `1` - withdraw
         */
        transactionType: number;
        beginTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * Default 100, max 500
         */
        rows?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/fiat/payments';
};

export type GetSapiV1FiatPaymentsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1FiatPaymentsError = GetSapiV1FiatPaymentsErrors[keyof GetSapiV1FiatPaymentsErrors];

export type GetSapiV1FiatPaymentsResponses = {
    /**
     * History of fiat payments
     */
    200: {
        code: string;
        message: string;
        data: Array<{
            orderNo: string;
            /**
             * Fiat trade amount
             */
            sourceAmount: string;
            /**
             * Fiat token
             */
            fiatCurrency: string;
            /**
             * Crypto trade amount
             */
            obtainAmount: string;
            /**
             * Crypto token
             */
            cryptoCurrency: string;
            /**
             * Trade fee
             */
            totalFee: string;
            price: string;
            /**
             * Processing, Completed, Failed, Refunded
             */
            status: string;
            createTime: number;
            updateTime: number;
        }>;
        total: number;
        success: boolean;
    };
};

export type GetSapiV1FiatPaymentsResponse = GetSapiV1FiatPaymentsResponses[keyof GetSapiV1FiatPaymentsResponses];

export type GetSapiV1LendingProjectListData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        type: 'ACTIVITY' | 'CUSTOMIZED_FIXED';
        /**
         * Default `ALL`
         */
        status?: 'ALL' | 'SUBSCRIBABLE' | 'UNSUBSCRIBABLE';
        /**
         * default "true"
         */
        isSortAsc?: boolean;
        /**
         * Default `START_TIME`
         */
        sortBy?: 'START_TIME' | 'LOT_SIZE' | 'INTEREST_RATE' | 'DURATION';
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/project/list';
};

export type GetSapiV1LendingProjectListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingProjectListError = GetSapiV1LendingProjectListErrors[keyof GetSapiV1LendingProjectListErrors];

export type GetSapiV1LendingProjectListResponses = {
    /**
     * List of fixed projects
     */
    200: Array<{
        asset: string;
        displayPriority: number;
        duration: number;
        interestPerLot: string;
        interestRate: string;
        lotSize: string;
        lotsLowLimit: number;
        lotsPurchased: number;
        lotsUpLimit: number;
        maxLotsPerUser: number;
        needKyc: boolean;
        projectId: string;
        projectName: string;
        status: string;
        type: string;
        withAreaLimitation: boolean;
    }>;
};

export type GetSapiV1LendingProjectListResponse = GetSapiV1LendingProjectListResponses[keyof GetSapiV1LendingProjectListResponses];

export type PostSapiV1LendingCustomizedFixedPurchaseData = {
    body?: never;
    path?: never;
    query: {
        projectId: string;
        lot: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/customizedFixed/purchase';
};

export type PostSapiV1LendingCustomizedFixedPurchaseErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LendingCustomizedFixedPurchaseError = PostSapiV1LendingCustomizedFixedPurchaseErrors[keyof PostSapiV1LendingCustomizedFixedPurchaseErrors];

export type PostSapiV1LendingCustomizedFixedPurchaseResponses = {
    /**
     * Generated Purchase Id
     */
    200: {
        purchaseId: string;
    };
};

export type PostSapiV1LendingCustomizedFixedPurchaseResponse = PostSapiV1LendingCustomizedFixedPurchaseResponses[keyof PostSapiV1LendingCustomizedFixedPurchaseResponses];

export type GetSapiV1LendingProjectPositionListData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        projectId?: string;
        /**
         * Default `ALL`
         */
        status?: 'ALL' | 'SUBSCRIBABLE' | 'UNSUBSCRIBABLE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/project/position/list';
};

export type GetSapiV1LendingProjectPositionListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingProjectPositionListError = GetSapiV1LendingProjectPositionListErrors[keyof GetSapiV1LendingProjectPositionListErrors];

export type GetSapiV1LendingProjectPositionListResponses = {
    /**
     * List of fixed project positions
     */
    200: Array<{
        asset: string;
        canTransfer: boolean;
        createTimestamp: number;
        duration: number;
        endTime: number;
        interest: string;
        interestRate: string;
        lot: number;
        positionId: number;
        principal: string;
        projectId: string;
        projectName: string;
        purchaseTime: number;
        redeemDate: string;
        startTime: number;
        status: string;
        type: string;
    }>;
};

export type GetSapiV1LendingProjectPositionListResponse = GetSapiV1LendingProjectPositionListResponses[keyof GetSapiV1LendingProjectPositionListResponses];

export type PostSapiV1LendingPositionChangedData = {
    body?: never;
    path?: never;
    query: {
        projectId: string;
        lot: string;
        positionId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/positionChanged';
};

export type PostSapiV1LendingPositionChangedErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LendingPositionChangedError = PostSapiV1LendingPositionChangedErrors[keyof PostSapiV1LendingPositionChangedErrors];

export type PostSapiV1LendingPositionChangedResponses = {
    /**
     * Purchase information
     */
    200: {
        dailyPurchaseId: number;
        success: boolean;
        time: number;
    };
};

export type PostSapiV1LendingPositionChangedResponse = PostSapiV1LendingPositionChangedResponses[keyof PostSapiV1LendingPositionChangedResponses];

export type GetSapiV1MiningPubAlgoListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/mining/pub/algoList';
};

export type GetSapiV1MiningPubAlgoListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1MiningPubAlgoListError = GetSapiV1MiningPubAlgoListErrors[keyof GetSapiV1MiningPubAlgoListErrors];

export type GetSapiV1MiningPubAlgoListResponses = {
    /**
     * Algorithm information
     */
    200: {
        code: number;
        msg: string;
        data: Array<{
            algoName: string;
            algoId: number;
            poolIndex: number;
            unit: string;
        }>;
    };
};

export type GetSapiV1MiningPubAlgoListResponse = GetSapiV1MiningPubAlgoListResponses[keyof GetSapiV1MiningPubAlgoListResponses];

export type GetSapiV1MiningPubCoinListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/mining/pub/coinList';
};

export type GetSapiV1MiningPubCoinListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1MiningPubCoinListError = GetSapiV1MiningPubCoinListErrors[keyof GetSapiV1MiningPubCoinListErrors];

export type GetSapiV1MiningPubCoinListResponses = {
    /**
     * Coin information
     */
    200: {
        code: number;
        msg: string;
        data: Array<{
            coinName: string;
            coinId: number;
            poolIndex: number;
            algoId: number;
            algoName: string;
        }>;
    };
};

export type GetSapiV1MiningPubCoinListResponse = GetSapiV1MiningPubCoinListResponses[keyof GetSapiV1MiningPubCoinListResponses];

export type GetSapiV1MiningWorkerDetailData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Algorithm(sha256)
         */
        algo: string;
        /**
         * Mining Account
         */
        userName: string;
        /**
         * Miner’s name
         */
        workerName: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/worker/detail';
};

export type GetSapiV1MiningWorkerDetailErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MiningWorkerDetailError = GetSapiV1MiningWorkerDetailErrors[keyof GetSapiV1MiningWorkerDetailErrors];

export type GetSapiV1MiningWorkerDetailResponses = {
    /**
     * List of workers' hashrates'
     */
    200: {
        code: number;
        msg: string;
        data: Array<{
            /**
             * Mining Account name
             */
            workerName: string;
            /**
             * Type of hourly hashrate
             */
            type: string;
            hashrateDatas: Array<{
                time: number;
                hashrate: string;
                /**
                 * Rejection Rate
                 */
                reject: number;
            }>;
        }>;
    };
};

export type GetSapiV1MiningWorkerDetailResponse = GetSapiV1MiningWorkerDetailResponses[keyof GetSapiV1MiningWorkerDetailResponses];

export type GetSapiV1MiningWorkerListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Algorithm(sha256)
         */
        algo: string;
        /**
         * Mining Account
         */
        userName: string;
        /**
         * Page number, default is first page, start form 1
         */
        pageIndex?: number;
        /**
         * sort sequence(default=0)0 positive sequence, 1 negative sequence
         */
        sort?: number;
        /**
         * Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time
         */
        sortColumn?: number;
        /**
         * miners status(default=0)0 all, 1 valid, 2 invalid, 3 failure
         */
        workerStatus?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/worker/list';
};

export type GetSapiV1MiningWorkerListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MiningWorkerListError = GetSapiV1MiningWorkerListErrors[keyof GetSapiV1MiningWorkerListErrors];

export type GetSapiV1MiningWorkerListResponses = {
    /**
     * List of workers
     */
    200: {
        code: number;
        msg: string;
        data: {
            workerDatas: Array<{
                workerId: string;
                workerName: string;
                /**
                 * Status：1 valid, 2 invalid, 3 no longer valid
                 */
                status: number;
                /**
                 * Real-time rate
                 */
                hashRate: number;
                /**
                 * 24H Hashrate
                 */
                dayHashRate: number;
                /**
                 * Real-time Rejection Rate
                 */
                rejectRate: number;
                /**
                 * Last submission time
                 */
                lastShareTime: number;
            }>;
            totalNum: number;
            pageSize: number;
        };
    };
};

export type GetSapiV1MiningWorkerListResponse = GetSapiV1MiningWorkerListResponses[keyof GetSapiV1MiningWorkerListResponses];

export type GetSapiV1MiningPaymentListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Algorithm(sha256)
         */
        algo: string;
        /**
         * Mining Account
         */
        userName: string;
        /**
         * Coin name
         */
        coin?: string;
        /**
         * Search date, millisecond timestamp, while empty query all
         */
        startDate?: string;
        /**
         * Search date, millisecond timestamp, while empty query all
         */
        endDate?: string;
        /**
         * Page number, default is first page, start form 1
         */
        pageIndex?: number;
        /**
         * Number of pages, minimum 10, maximum 200
         */
        pageSize?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/payment/list';
};

export type GetSapiV1MiningPaymentListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MiningPaymentListError = GetSapiV1MiningPaymentListErrors[keyof GetSapiV1MiningPaymentListErrors];

export type GetSapiV1MiningPaymentListResponses = {
    /**
     * List of earnings
     */
    200: {
        code: number;
        msg: string;
        data: {
            accountProfits: Array<{
                /**
                 * Mining date
                 */
                time: number;
                /**
                 * 0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings
                 */
                type: number;
                /**
                 * Transferred Hashrate
                 */
                hashTransfer: number;
                /**
                 * Transferred Income
                 */
                transferAmount: number;
                /**
                 * Daily Hashrate
                 */
                dayHashRate: number;
                /**
                 * Earnings Amount
                 */
                profitAmount: number;
                /**
                 * Coin Type
                 */
                coinName: string;
                /**
                 * Status：0:Unpaid, 1:Paying  2：Paid
                 */
                status: number;
            }>;
            /**
             * Total Rows
             */
            totalNum: number;
            /**
             * Rows per page
             */
            pageSize: number;
        };
    };
};

export type GetSapiV1MiningPaymentListResponse = GetSapiV1MiningPaymentListResponses[keyof GetSapiV1MiningPaymentListResponses];

export type GetSapiV1MiningPaymentOtherData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Algorithm(sha256)
         */
        algo: string;
        /**
         * Mining Account
         */
        userName: string;
        /**
         * Coin name
         */
        coin?: string;
        /**
         * Search date, millisecond timestamp, while empty query all
         */
        startDate?: string;
        /**
         * Search date, millisecond timestamp, while empty query all
         */
        endDate?: string;
        /**
         * Page number, default is first page, start form 1
         */
        pageIndex?: number;
        /**
         * Number of pages, minimum 10, maximum 200
         */
        pageSize?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/payment/other';
};

export type GetSapiV1MiningPaymentOtherErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MiningPaymentOtherError = GetSapiV1MiningPaymentOtherErrors[keyof GetSapiV1MiningPaymentOtherErrors];

export type GetSapiV1MiningPaymentOtherResponses = {
    /**
     * List of extra bonuses
     */
    200: {
        code: number;
        msg: string;
        data: {
            otherProfits: Array<{
                /**
                 * Mining date
                 */
                time: number;
                /**
                 * Coin Name
                 */
                coinName: string;
                /**
                 * 1: Merged Mining, 2: Activity Bonus, 3:Rebate 4:Smart Pool 6:Income Transfer 7:Pool Savings
                 */
                type: number;
                profitAmount: number;
                /**
                 * 0:Unpaid, 1:Paying  2：Paid
                 */
                status: number;
            }>;
            /**
             * Total Rows
             */
            totalNum: number;
            /**
             * Rows per page
             */
            pageSize: number;
        };
    };
};

export type GetSapiV1MiningPaymentOtherResponse = GetSapiV1MiningPaymentOtherResponses[keyof GetSapiV1MiningPaymentOtherResponses];

export type GetSapiV1MiningHashTransferConfigDetailsListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Page number, default is first page, start form 1
         */
        pageIndex?: number;
        /**
         * Number of pages, minimum 10, maximum 200
         */
        pageSize?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/hash-transfer/config/details/list';
};

export type GetSapiV1MiningHashTransferConfigDetailsListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MiningHashTransferConfigDetailsListError = GetSapiV1MiningHashTransferConfigDetailsListErrors[keyof GetSapiV1MiningHashTransferConfigDetailsListErrors];

export type GetSapiV1MiningHashTransferConfigDetailsListResponses = {
    /**
     * List of hashrate resales
     */
    200: {
        code: number;
        msg: string;
        data: {
            configDetails: Array<{
                /**
                 * Mining ID
                 */
                configId: number;
                /**
                 * Transfer out of subaccount
                 */
                poolUsername: string;
                /**
                 * Transfer into subaccount
                 */
                toPoolUsername: string;
                /**
                 * Transfer algorithm
                 */
                algoName: string;
                /**
                 * Transferred Hashrate quantity
                 */
                hashRate: number;
                /**
                 * Start date
                 */
                startDay: number;
                /**
                 * End date
                 */
                endDay: number;
                /**
                 * 0 Processing, 1：Cancelled, 2：Terminated
                 */
                status: number;
            }>;
            totalNum: number;
            pageSize: number;
        };
    };
};

export type GetSapiV1MiningHashTransferConfigDetailsListResponse = GetSapiV1MiningHashTransferConfigDetailsListResponses[keyof GetSapiV1MiningHashTransferConfigDetailsListResponses];

export type GetSapiV1MiningHashTransferProfitDetailsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Mining ID
         */
        configId: string;
        /**
         * Mining Account
         */
        userName: string;
        /**
         * Page number, default is first page, start form 1
         */
        pageIndex?: number;
        /**
         * Number of pages, minimum 10, maximum 200
         */
        pageSize?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/hash-transfer/profit/details';
};

export type GetSapiV1MiningHashTransferProfitDetailsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MiningHashTransferProfitDetailsError = GetSapiV1MiningHashTransferProfitDetailsErrors[keyof GetSapiV1MiningHashTransferProfitDetailsErrors];

export type GetSapiV1MiningHashTransferProfitDetailsResponses = {
    /**
     * List of hashrate resale details
     */
    200: {
        code: number;
        msg: string;
        data: {
            profitTransferDetails: Array<{
                /**
                 * Transfer out of sub-account
                 */
                poolUsername: string;
                /**
                 * Transfer into subaccount
                 */
                toPoolUsername: string;
                /**
                 * Transfer algorithm
                 */
                algoName: string;
                /**
                 * Transferred Hashrate quantity
                 */
                hashRate: number;
                /**
                 * Transfer date
                 */
                day: number;
                /**
                 * Transfer income
                 */
                amount: number;
                coinName: string;
            }>;
            totalNum: number;
            pageSize: number;
        };
    };
};

export type GetSapiV1MiningHashTransferProfitDetailsResponse = GetSapiV1MiningHashTransferProfitDetailsResponses[keyof GetSapiV1MiningHashTransferProfitDetailsResponses];

export type PostSapiV1MiningHashTransferConfigData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Mining Account
         */
        userName: string;
        /**
         * Algorithm(sha256)
         */
        algo: string;
        /**
         * Search date, millisecond timestamp, while empty query all
         */
        startDate?: string;
        /**
         * Search date, millisecond timestamp, while empty query all
         */
        endDate?: string;
        /**
         * Mining Account
         */
        toPoolUser: string;
        /**
         * Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)
         */
        hashRate: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/hash-transfer/config';
};

export type PostSapiV1MiningHashTransferConfigErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1MiningHashTransferConfigError = PostSapiV1MiningHashTransferConfigErrors[keyof PostSapiV1MiningHashTransferConfigErrors];

export type PostSapiV1MiningHashTransferConfigResponses = {
    /**
     * Mining Account Id
     */
    200: {
        code: number;
        msg: string;
        /**
         * Mining Account
         */
        data: number;
    };
};

export type PostSapiV1MiningHashTransferConfigResponse = PostSapiV1MiningHashTransferConfigResponses[keyof PostSapiV1MiningHashTransferConfigResponses];

export type PostSapiV1MiningHashTransferConfigCancelData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Mining ID
         */
        configId: string;
        /**
         * Mining Account
         */
        userName: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/hash-transfer/config/cancel';
};

export type PostSapiV1MiningHashTransferConfigCancelErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1MiningHashTransferConfigCancelError = PostSapiV1MiningHashTransferConfigCancelErrors[keyof PostSapiV1MiningHashTransferConfigCancelErrors];

export type PostSapiV1MiningHashTransferConfigCancelResponses = {
    /**
     * Success flag
     */
    200: {
        code: number;
        msg: string;
        data: boolean;
    };
};

export type PostSapiV1MiningHashTransferConfigCancelResponse = PostSapiV1MiningHashTransferConfigCancelResponses[keyof PostSapiV1MiningHashTransferConfigCancelResponses];

export type GetSapiV1MiningStatisticsUserStatusData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Algorithm(sha256)
         */
        algo: string;
        /**
         * Mining Account
         */
        userName: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/statistics/user/status';
};

export type GetSapiV1MiningStatisticsUserStatusErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MiningStatisticsUserStatusError = GetSapiV1MiningStatisticsUserStatusErrors[keyof GetSapiV1MiningStatisticsUserStatusErrors];

export type GetSapiV1MiningStatisticsUserStatusResponses = {
    /**
     * Mining account statistics
     */
    200: {
        code: number;
        msg: string;
        data: {
            fifteenMinHashRate: string;
            dayHashRate: string;
            validNum: number;
            invalidNum: number;
            profitToday: {
                BTC: string;
                BSV: string;
                BCH: string;
            };
            profitYesterday: {
                BTC: string;
                BSV: string;
                BCH: string;
            };
            userName: string;
            unit: string;
            algo: string;
        };
    };
};

export type GetSapiV1MiningStatisticsUserStatusResponse = GetSapiV1MiningStatisticsUserStatusResponses[keyof GetSapiV1MiningStatisticsUserStatusResponses];

export type GetSapiV1MiningStatisticsUserListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Algorithm(sha256)
         */
        algo: string;
        /**
         * Mining Account
         */
        userName: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/statistics/user/list';
};

export type GetSapiV1MiningStatisticsUserListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MiningStatisticsUserListError = GetSapiV1MiningStatisticsUserListErrors[keyof GetSapiV1MiningStatisticsUserListErrors];

export type GetSapiV1MiningStatisticsUserListResponses = {
    /**
     * List of mining accounts
     */
    200: {
        code: number;
        msg: string;
        data: Array<{
            type: string;
            userName: string;
            list: Array<{
                time: number;
                hashrate: string;
                reject: string;
            }>;
        }>;
    };
};

export type GetSapiV1MiningStatisticsUserListResponse = GetSapiV1MiningStatisticsUserListResponses[keyof GetSapiV1MiningStatisticsUserListResponses];

export type GetSapiV1MiningPaymentUidData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Algorithm(sha256)
         */
        algo: string;
        /**
         * Search date, millisecond timestamp, while empty query all
         */
        startDate?: string;
        /**
         * Search date, millisecond timestamp, while empty query all
         */
        endDate?: string;
        /**
         * Page number, default is first page, start form 1
         */
        pageIndex?: number;
        /**
         * Number of pages, minimum 10, maximum 200
         */
        pageSize?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/mining/payment/uid';
};

export type GetSapiV1MiningPaymentUidErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1MiningPaymentUidError = GetSapiV1MiningPaymentUidErrors[keyof GetSapiV1MiningPaymentUidErrors];

export type GetSapiV1MiningPaymentUidResponses = {
    /**
     * Mining account earnings
     */
    200: {
        code: number;
        msg: string;
        data: {
            accountProfits: Array<{
                time: number;
                coinName: string;
                /**
                 * 0:Referral 1:Refund 2:Rebate
                 */
                type: number;
                /**
                 * puid
                 */
                puid: number;
                /**
                 * Mining account
                 */
                subName: string;
                amount: number;
            }>;
            totalNum: number;
            pageSize: number;
        };
    };
};

export type GetSapiV1MiningPaymentUidResponse = GetSapiV1MiningPaymentUidResponses[keyof GetSapiV1MiningPaymentUidResponses];

export type GetSapiV1FuturesTransferData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        /**
         * UTC timestamp in ms
         */
        startTime: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/futures/transfer';
};

export type GetSapiV1FuturesTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1FuturesTransferError = GetSapiV1FuturesTransferErrors[keyof GetSapiV1FuturesTransferErrors];

export type GetSapiV1FuturesTransferResponses = {
    /**
     * Futures Transfer Query
     */
    200: {
        rows: Array<{
            asset: string;
            tranId: number;
            amount: string;
            type: string;
            timestamp: number;
            /**
             * one of PENDING (pending to execution), CONFIRMED (successfully transfered), FAILED (execution failed, nothing happened to your account);
             */
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1FuturesTransferResponse = GetSapiV1FuturesTransferResponses[keyof GetSapiV1FuturesTransferResponses];

export type PostSapiV1FuturesTransferData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        amount: number;
        /**
         * 1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account.
         */
        type: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/futures/transfer';
};

export type PostSapiV1FuturesTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1FuturesTransferError = PostSapiV1FuturesTransferErrors[keyof PostSapiV1FuturesTransferErrors];

export type PostSapiV1FuturesTransferResponses = {
    /**
     * Futures Transfer
     */
    200: {
        tranId: number;
    };
};

export type PostSapiV1FuturesTransferResponse = PostSapiV1FuturesTransferResponses[keyof PostSapiV1FuturesTransferResponses];

export type GetSapiV1FuturesHistDataLinkData = {
    body?: never;
    path?: never;
    query: {
        symbol: string;
        dataType: 'T_DEPTH' | 'S_DEPTH';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/futures/histDataLink';
};

export type GetSapiV1FuturesHistDataLinkErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1FuturesHistDataLinkError = GetSapiV1FuturesHistDataLinkErrors[keyof GetSapiV1FuturesHistDataLinkErrors];

export type GetSapiV1FuturesHistDataLinkResponses = {
    /**
     * data link
     */
    200: {
        data: Array<{
            day: string;
            url: string;
        }>;
    };
};

export type GetSapiV1FuturesHistDataLinkResponse = GetSapiV1FuturesHistDataLinkResponses[keyof GetSapiV1FuturesHistDataLinkResponses];

export type PostSapiV1AlgoFuturesNewOrderVpData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        side: 'SELL' | 'BUY';
        /**
         * Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
         */
        positionSide?: 'BOTH' | 'LONG' | 'SHORT';
        /**
         * Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
         */
        quantity: number;
        /**
         * Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
         */
        urgency: 'LOW' | 'MEDIUM' | 'HIGH';
        /**
         * A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         */
        clientAlgoId?: string;
        /**
         * 'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         */
        reduceOnly?: boolean;
        /**
         * Limit price of the order; If it is not sent, will place order by market price by default
         */
        limitPrice?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/futures/newOrderVp';
};

export type PostSapiV1AlgoFuturesNewOrderVpErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AlgoFuturesNewOrderVpError = PostSapiV1AlgoFuturesNewOrderVpErrors[keyof PostSapiV1AlgoFuturesNewOrderVpErrors];

export type PostSapiV1AlgoFuturesNewOrderVpResponses = {
    /**
     * Volume Participation(VP) Order
     */
    200: {
        clientAlgoId: string;
        success: boolean;
        code: number;
        msg: string;
    };
};

export type PostSapiV1AlgoFuturesNewOrderVpResponse = PostSapiV1AlgoFuturesNewOrderVpResponses[keyof PostSapiV1AlgoFuturesNewOrderVpResponses];

export type PostSapiV1AlgoFuturesNewOrderTwapData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        side: 'SELL' | 'BUY';
        /**
         * Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
         */
        positionSide?: 'BOTH' | 'LONG' | 'SHORT';
        /**
         * Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
         */
        quantity: number;
        /**
         * Duration for TWAP orders in seconds. [300, 86400];Less than 5min => defaults to 5 min; Greater than 24h => defaults to 24h
         */
        duration: number;
        /**
         * A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         */
        clientAlgoId?: string;
        /**
         * 'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         */
        reduceOnly?: boolean;
        /**
         * Limit price of the order; If it is not sent, will place order by market price by default
         */
        limitPrice?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/futures/newOrderTwap';
};

export type PostSapiV1AlgoFuturesNewOrderTwapErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AlgoFuturesNewOrderTwapError = PostSapiV1AlgoFuturesNewOrderTwapErrors[keyof PostSapiV1AlgoFuturesNewOrderTwapErrors];

export type PostSapiV1AlgoFuturesNewOrderTwapResponses = {
    /**
     * Time-Weighted Average Price(Twap) New Order
     */
    200: {
        clientAlgoId: string;
        success: boolean;
        code: number;
        msg: string;
    };
};

export type PostSapiV1AlgoFuturesNewOrderTwapResponse = PostSapiV1AlgoFuturesNewOrderTwapResponses[keyof PostSapiV1AlgoFuturesNewOrderTwapResponses];

export type DeleteSapiV1AlgoFuturesOrderData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Eg. 14511
         */
        algoId: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/futures/order';
};

export type DeleteSapiV1AlgoFuturesOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteSapiV1AlgoFuturesOrderError = DeleteSapiV1AlgoFuturesOrderErrors[keyof DeleteSapiV1AlgoFuturesOrderErrors];

export type DeleteSapiV1AlgoFuturesOrderResponses = {
    /**
     * Cancelled order
     */
    200: {
        algoId: number;
        success: boolean;
        code: number;
        msg: string;
    };
};

export type DeleteSapiV1AlgoFuturesOrderResponse = DeleteSapiV1AlgoFuturesOrderResponses[keyof DeleteSapiV1AlgoFuturesOrderResponses];

export type GetSapiV1AlgoFuturesOpenOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/futures/openOrders';
};

export type GetSapiV1AlgoFuturesOpenOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AlgoFuturesOpenOrdersError = GetSapiV1AlgoFuturesOpenOrdersErrors[keyof GetSapiV1AlgoFuturesOpenOrdersErrors];

export type GetSapiV1AlgoFuturesOpenOrdersResponses = {
    /**
     * Open Algo Orders
     */
    200: {
        total: number;
        orders?: Array<{
            algoId: number;
            symbol: string;
            side: string;
            positionSide: string;
            totalQty: string;
            executedQty: string;
            executedAmt: string;
            avgPrice: string;
            clientAlgoId: string;
            bookTime: number;
            endTime: number;
            algoStatus: string;
            algoType: string;
            urgency: string;
        }>;
    };
};

export type GetSapiV1AlgoFuturesOpenOrdersResponse = GetSapiV1AlgoFuturesOpenOrdersResponses[keyof GetSapiV1AlgoFuturesOpenOrdersResponses];

export type GetSapiV1AlgoFuturesHistoricalOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol?: string;
        side?: 'SELL' | 'BUY';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * MIN 1, MAX 100; Default 100
         */
        pageSize?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/futures/historicalOrders';
};

export type GetSapiV1AlgoFuturesHistoricalOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AlgoFuturesHistoricalOrdersError = GetSapiV1AlgoFuturesHistoricalOrdersErrors[keyof GetSapiV1AlgoFuturesHistoricalOrdersErrors];

export type GetSapiV1AlgoFuturesHistoricalOrdersResponses = {
    /**
     * Historical Algo Orders
     */
    200: {
        total: number;
        orders: Array<{
            algoId: number;
            symbol: string;
            side: string;
            positionSide: string;
            totalQty: string;
            executedQty: string;
            executedAmt: string;
            avgPrice: string;
            clientAlgoId: string;
            bookTime: number;
            endTime: number;
            algoStatus: string;
            algoType: string;
            urgency: string;
        }>;
    };
};

export type GetSapiV1AlgoFuturesHistoricalOrdersResponse = GetSapiV1AlgoFuturesHistoricalOrdersResponses[keyof GetSapiV1AlgoFuturesHistoricalOrdersResponses];

export type GetSapiV1AlgoFuturesSubOrdersData = {
    body?: never;
    path?: never;
    query: {
        algoId: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * MIN 1, MAX 100; Default 100
         */
        pageSize?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/futures/subOrders';
};

export type GetSapiV1AlgoFuturesSubOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AlgoFuturesSubOrdersError = GetSapiV1AlgoFuturesSubOrdersErrors[keyof GetSapiV1AlgoFuturesSubOrdersErrors];

export type GetSapiV1AlgoFuturesSubOrdersResponses = {
    /**
     * Sub orders
     */
    200: {
        total: number;
        executedQty: string;
        executedAmt: string;
        subOrders: Array<{
            algoId: number;
            orderId: number;
            orderStatus: string;
            executedQty?: string;
            executedAmt: string;
            feeAmt: string;
            feeAsset: string;
            bookTime: number;
            avgPrice: string;
            side: string;
            symbol: string;
            subId: number;
            timeInForce: string;
            origQty: string;
        }>;
    };
};

export type GetSapiV1AlgoFuturesSubOrdersResponse = GetSapiV1AlgoFuturesSubOrdersResponses[keyof GetSapiV1AlgoFuturesSubOrdersResponses];

export type PostSapiV1AlgoSpotNewOrderTwapData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        side: 'SELL' | 'BUY';
        quantity: number;
        duration: number;
        clientAlgoId?: string;
        limitPrice?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/spot/newOrderTwap';
};

export type PostSapiV1AlgoSpotNewOrderTwapErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1AlgoSpotNewOrderTwapError = PostSapiV1AlgoSpotNewOrderTwapErrors[keyof PostSapiV1AlgoSpotNewOrderTwapErrors];

export type PostSapiV1AlgoSpotNewOrderTwapResponses = {
    /**
     * twap order response
     */
    200: {
        clientAlgoId: string;
        success: boolean;
        code: number;
        msg: string;
    };
};

export type PostSapiV1AlgoSpotNewOrderTwapResponse = PostSapiV1AlgoSpotNewOrderTwapResponses[keyof PostSapiV1AlgoSpotNewOrderTwapResponses];

export type DeleteSapiV1AlgoSpotOrderData = {
    body?: never;
    path?: never;
    query: {
        algoId: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/spot/order';
};

export type DeleteSapiV1AlgoSpotOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type DeleteSapiV1AlgoSpotOrderError = DeleteSapiV1AlgoSpotOrderErrors[keyof DeleteSapiV1AlgoSpotOrderErrors];

export type DeleteSapiV1AlgoSpotOrderResponses = {
    /**
     * Cancelled twap order response
     */
    200: {
        algoId: number;
        success: boolean;
        code: number;
        msg: string;
    };
};

export type DeleteSapiV1AlgoSpotOrderResponse = DeleteSapiV1AlgoSpotOrderResponses[keyof DeleteSapiV1AlgoSpotOrderResponses];

export type GetSapiV1AlgoSpotOpenOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/spot/openOrders';
};

export type GetSapiV1AlgoSpotOpenOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AlgoSpotOpenOrdersError = GetSapiV1AlgoSpotOpenOrdersErrors[keyof GetSapiV1AlgoSpotOpenOrdersErrors];

export type GetSapiV1AlgoSpotOpenOrdersResponses = {
    /**
     * twap open orders
     */
    200: {
        total: number;
        orders: Array<{
            algoId: number;
            symbol: string;
            side: string;
            totalQty: string;
            executedQty: string;
            executedAmt: string;
            avgPrice: string;
            clientAlgoId: string;
            bookTime: number;
            endTime: number;
            algoStatus: string;
            algoType: string;
            urgency: string;
        }>;
    };
};

export type GetSapiV1AlgoSpotOpenOrdersResponse = GetSapiV1AlgoSpotOpenOrdersResponses[keyof GetSapiV1AlgoSpotOpenOrdersResponses];

export type GetSapiV1AlgoSpotHistoricalOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Trading symbol, e.g. BNBUSDT
         */
        symbol: string;
        side: 'SELL' | 'BUY';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * MIN 1, MAX 100; Default 100
         */
        pageSize?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/spot/historicalOrders';
};

export type GetSapiV1AlgoSpotHistoricalOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AlgoSpotHistoricalOrdersError = GetSapiV1AlgoSpotHistoricalOrdersErrors[keyof GetSapiV1AlgoSpotHistoricalOrdersErrors];

export type GetSapiV1AlgoSpotHistoricalOrdersResponses = {
    /**
     * twap historical orders
     */
    200: {
        total: number;
        orders: Array<{
            algoId: number;
            symbol: string;
            side: string;
            totalQty: string;
            executedQty: string;
            executedAmt: string;
            avgPrice: string;
            clientAlgoId: string;
            bookTime: number;
            endTime: number;
            algoStatus: string;
            algoType: string;
            urgency: string;
        }>;
    };
};

export type GetSapiV1AlgoSpotHistoricalOrdersResponse = GetSapiV1AlgoSpotHistoricalOrdersResponses[keyof GetSapiV1AlgoSpotHistoricalOrdersResponses];

export type GetSapiV1AlgoSpotSubOrdersData = {
    body?: never;
    path?: never;
    query: {
        algoId: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * MIN 1, MAX 100; Default 100
         */
        pageSize?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/algo/spot/subOrders';
};

export type GetSapiV1AlgoSpotSubOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1AlgoSpotSubOrdersError = GetSapiV1AlgoSpotSubOrdersErrors[keyof GetSapiV1AlgoSpotSubOrdersErrors];

export type GetSapiV1AlgoSpotSubOrdersResponses = {
    /**
     * twap sub orders
     */
    200: {
        total: number;
        executedQty: string;
        executedAmt: string;
        subOrders: Array<{
            algoId: number;
            orderId: number;
            orderStatus: string;
            executedQty: string;
            executedAmt: string;
            feeAmt: string;
            feeAsset: string;
            bookTime: number;
            avgPrice: string;
            side: string;
            symbol: string;
            subId: number;
            timeInForce: string;
            origQty: string;
        }>;
    };
};

export type GetSapiV1AlgoSpotSubOrdersResponse = GetSapiV1AlgoSpotSubOrdersResponses[keyof GetSapiV1AlgoSpotSubOrdersResponses];

export type GetSapiV1PortfolioAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/account';
};

export type GetSapiV1PortfolioAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1PortfolioAccountError = GetSapiV1PortfolioAccountErrors[keyof GetSapiV1PortfolioAccountErrors];

export type GetSapiV1PortfolioAccountResponses = {
    /**
     * Portfolio account.
     */
    200: {
        /**
         * Classic Portfolio margin account maintenance margin rate
         */
        uniMMR: string;
        /**
         * Account equity, unit is USD
         */
        accountEquity: string;
        /**
         * Actual equity, unit is USD
         */
        actualEquity: string;
        /**
         * Classic Portfolio margin account maintenance margin, unit is USD
         */
        accountMaintMargin: string;
        /**
         * Classic Portfolio margin account status:"NORMAL", "MARGIN_CALL", "SUPPLY_MARGIN", "REDUCE_ONLY", "ACTIVE_LIQUIDATION", "FORCE_LIQUIDATION", "BANKRUPTED"
         */
        accountStatus: string;
        /**
         * PM_1 for classic PM, PM_2 for PM
         */
        accountType: string;
    };
};

export type GetSapiV1PortfolioAccountResponse = GetSapiV1PortfolioAccountResponses[keyof GetSapiV1PortfolioAccountResponses];

export type GetSapiV1PortfolioCollateralRateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/portfolio/collateralRate';
};

export type GetSapiV1PortfolioCollateralRateErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1PortfolioCollateralRateError = GetSapiV1PortfolioCollateralRateErrors[keyof GetSapiV1PortfolioCollateralRateErrors];

export type GetSapiV1PortfolioCollateralRateResponses = {
    /**
     * Portfolio Margin Collateral Rate.
     */
    200: Array<{
        asset: string;
        collateralRate: string;
    }>;
};

export type GetSapiV1PortfolioCollateralRateResponse = GetSapiV1PortfolioCollateralRateResponses[keyof GetSapiV1PortfolioCollateralRateResponses];

export type GetSapiV2PortfolioCollateralRateData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/portfolio/collateralRate';
};

export type GetSapiV2PortfolioCollateralRateErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2PortfolioCollateralRateError = GetSapiV2PortfolioCollateralRateErrors[keyof GetSapiV2PortfolioCollateralRateErrors];

export type GetSapiV2PortfolioCollateralRateResponses = {
    /**
     * Portfolio Margin Collateral Rate.
     */
    200: Array<{
        asset: string;
        collateralInfo: Array<{
            tierFloor: string;
            tierCap: string;
            collateralRate: string;
        }>;
    }>;
};

export type GetSapiV2PortfolioCollateralRateResponse = GetSapiV2PortfolioCollateralRateResponses[keyof GetSapiV2PortfolioCollateralRateResponses];

export type GetSapiV1PortfolioPmLoanData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/pmLoan';
};

export type GetSapiV1PortfolioPmLoanErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1PortfolioPmLoanError = GetSapiV1PortfolioPmLoanErrors[keyof GetSapiV1PortfolioPmLoanErrors];

export type GetSapiV1PortfolioPmLoanResponses = {
    /**
     * Portfolio Margin Bankruptcy Loan Amount.
     */
    200: {
        asset: string;
        amount: string;
    };
};

export type GetSapiV1PortfolioPmLoanResponse = GetSapiV1PortfolioPmLoanResponses[keyof GetSapiV1PortfolioPmLoanResponses];

export type PostSapiV1PortfolioRepayData = {
    body?: never;
    path?: never;
    query: {
        from?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/repay';
};

export type PostSapiV1PortfolioRepayErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1PortfolioRepayError = PostSapiV1PortfolioRepayErrors[keyof PostSapiV1PortfolioRepayErrors];

export type PostSapiV1PortfolioRepayResponses = {
    /**
     * Transaction.
     */
    200: {
        tranId: number;
    };
};

export type PostSapiV1PortfolioRepayResponse = PostSapiV1PortfolioRepayResponses[keyof PostSapiV1PortfolioRepayResponses];

export type GetSapiV1PortfolioInterestHistoryData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/interest-history';
};

export type GetSapiV1PortfolioInterestHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1PortfolioInterestHistoryError = GetSapiV1PortfolioInterestHistoryErrors[keyof GetSapiV1PortfolioInterestHistoryErrors];

export type GetSapiV1PortfolioInterestHistoryResponses = {
    /**
     * Balance interest history
     */
    200: Array<{
        asset: string;
        interest: string;
        interestAccruedTime: number;
        interestRate: string;
        principal: string;
    }>;
};

export type GetSapiV1PortfolioInterestHistoryResponse = GetSapiV1PortfolioInterestHistoryResponses[keyof GetSapiV1PortfolioInterestHistoryResponses];

export type GetSapiV1PortfolioAssetIndexPriceData = {
    body?: never;
    path?: never;
    query?: {
        asset?: string;
    };
    url: '/sapi/v1/portfolio/asset-index-price';
};

export type GetSapiV1PortfolioAssetIndexPriceErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1PortfolioAssetIndexPriceError = GetSapiV1PortfolioAssetIndexPriceErrors[keyof GetSapiV1PortfolioAssetIndexPriceErrors];

export type GetSapiV1PortfolioAssetIndexPriceResponses = {
    /**
     * asset price index
     */
    200: Array<{
        asset: string;
        assetIndexPrice: string;
        time: number;
    }>;
};

export type GetSapiV1PortfolioAssetIndexPriceResponse = GetSapiV1PortfolioAssetIndexPriceResponses[keyof GetSapiV1PortfolioAssetIndexPriceResponses];

export type PostSapiV1PortfolioAutoCollectionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/auto-collection';
};

export type PostSapiV1PortfolioAutoCollectionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1PortfolioAutoCollectionError = PostSapiV1PortfolioAutoCollectionErrors[keyof PostSapiV1PortfolioAutoCollectionErrors];

export type PostSapiV1PortfolioAutoCollectionResponses = {
    /**
     * Result
     */
    200: {
        msg: string;
    };
};

export type PostSapiV1PortfolioAutoCollectionResponse = PostSapiV1PortfolioAutoCollectionResponses[keyof PostSapiV1PortfolioAutoCollectionResponses];

export type PostSapiV1PortfolioBnbTransferData = {
    body?: never;
    path?: never;
    query: {
        transferSide: 'TO_UM' | 'FROM_UM';
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/bnb-transfer';
};

export type PostSapiV1PortfolioBnbTransferErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1PortfolioBnbTransferError = PostSapiV1PortfolioBnbTransferErrors[keyof PostSapiV1PortfolioBnbTransferErrors];

export type PostSapiV1PortfolioBnbTransferResponses = {
    /**
     * Result
     */
    200: {
        tranId: number;
    };
};

export type PostSapiV1PortfolioBnbTransferResponse = PostSapiV1PortfolioBnbTransferResponses[keyof PostSapiV1PortfolioBnbTransferResponses];

export type GetSapiV1PortfolioRepayFuturesSwitchData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/repay-futures-switch';
};

export type GetSapiV1PortfolioRepayFuturesSwitchErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1PortfolioRepayFuturesSwitchError = GetSapiV1PortfolioRepayFuturesSwitchErrors[keyof GetSapiV1PortfolioRepayFuturesSwitchErrors];

export type GetSapiV1PortfolioRepayFuturesSwitchResponses = {
    /**
     * Result
     */
    200: {
        autoRepay: boolean;
    };
};

export type GetSapiV1PortfolioRepayFuturesSwitchResponse = GetSapiV1PortfolioRepayFuturesSwitchResponses[keyof GetSapiV1PortfolioRepayFuturesSwitchResponses];

export type PostSapiV1PortfolioRepayFuturesSwitchData = {
    body?: never;
    path?: never;
    query: {
        autoRepay: boolean;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/repay-futures-switch';
};

export type PostSapiV1PortfolioRepayFuturesSwitchErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1PortfolioRepayFuturesSwitchError = PostSapiV1PortfolioRepayFuturesSwitchErrors[keyof PostSapiV1PortfolioRepayFuturesSwitchErrors];

export type PostSapiV1PortfolioRepayFuturesSwitchResponses = {
    /**
     * Result
     */
    200: {
        msg: string;
    };
};

export type PostSapiV1PortfolioRepayFuturesSwitchResponse = PostSapiV1PortfolioRepayFuturesSwitchResponses[keyof PostSapiV1PortfolioRepayFuturesSwitchResponses];

export type PostSapiV1PortfolioRepayFuturesNegativeBalanceData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/repay-futures-negative-balance';
};

export type PostSapiV1PortfolioRepayFuturesNegativeBalanceErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1PortfolioRepayFuturesNegativeBalanceError = PostSapiV1PortfolioRepayFuturesNegativeBalanceErrors[keyof PostSapiV1PortfolioRepayFuturesNegativeBalanceErrors];

export type PostSapiV1PortfolioRepayFuturesNegativeBalanceResponses = {
    /**
     * Result
     */
    200: {
        msg: string;
    };
};

export type PostSapiV1PortfolioRepayFuturesNegativeBalanceResponse = PostSapiV1PortfolioRepayFuturesNegativeBalanceResponses[keyof PostSapiV1PortfolioRepayFuturesNegativeBalanceResponses];

export type GetSapiV1PortfolioMarginAssetLeverageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sapi/v1/portfolio/margin-asset-leverage';
};

export type GetSapiV1PortfolioMarginAssetLeverageErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1PortfolioMarginAssetLeverageError = GetSapiV1PortfolioMarginAssetLeverageErrors[keyof GetSapiV1PortfolioMarginAssetLeverageErrors];

export type GetSapiV1PortfolioMarginAssetLeverageResponses = {
    /**
     * Classic Portfolio Margin Collateral Rate
     */
    200: Array<{
        asset?: string;
        collateralRate?: string;
    }>;
};

export type GetSapiV1PortfolioMarginAssetLeverageResponse = GetSapiV1PortfolioMarginAssetLeverageResponses[keyof GetSapiV1PortfolioMarginAssetLeverageResponses];

export type PostSapiV1PortfolioAssetCollectionData = {
    body?: never;
    path?: never;
    query: {
        asset: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/portfolio/asset-collection';
};

export type PostSapiV1PortfolioAssetCollectionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1PortfolioAssetCollectionError = PostSapiV1PortfolioAssetCollectionErrors[keyof PostSapiV1PortfolioAssetCollectionErrors];

export type PostSapiV1PortfolioAssetCollectionResponses = {
    /**
     * Result
     */
    200: {
        msg: string;
    };
};

export type PostSapiV1PortfolioAssetCollectionResponse = PostSapiV1PortfolioAssetCollectionResponses[keyof PostSapiV1PortfolioAssetCollectionResponses];

export type GetSapiV1BlvtTokenInfoData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * BTCDOWN, BTCUP
         */
        tokenName?: string;
    };
    url: '/sapi/v1/blvt/tokenInfo';
};

export type GetSapiV1BlvtTokenInfoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
};

export type GetSapiV1BlvtTokenInfoError = GetSapiV1BlvtTokenInfoErrors[keyof GetSapiV1BlvtTokenInfoErrors];

export type GetSapiV1BlvtTokenInfoResponses = {
    /**
     * List of token information
     */
    200: Array<{
        tokenName: string;
        description: string;
        underlying: string;
        tokenIssued: string;
        basket: string;
        currentBaskets: Array<{
            symbol: string;
            amount: string;
            notionalValue: string;
        }>;
        nav: string;
        realLeverage: string;
        fundingRate: string;
        dailyManagementFee: string;
        purchaseFeePct: string;
        dailyPurchaseLimit: string;
        redeemFeePct: string;
        dailyRedeemLimit: string;
        timestamp: number;
    }>;
};

export type GetSapiV1BlvtTokenInfoResponse = GetSapiV1BlvtTokenInfoResponses[keyof GetSapiV1BlvtTokenInfoResponses];

export type PostSapiV1BlvtSubscribeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * BTCDOWN, BTCUP
         */
        tokenName: string;
        /**
         * Spot balance
         */
        cost: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/blvt/subscribe';
};

export type PostSapiV1BlvtSubscribeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1BlvtSubscribeError = PostSapiV1BlvtSubscribeErrors[keyof PostSapiV1BlvtSubscribeErrors];

export type PostSapiV1BlvtSubscribeResponses = {
    /**
     * Subscription Info
     */
    200: {
        id: number;
        /**
         * S, P, and F for "success", "pending", and "failure"
         */
        status: string;
        tokenName: string;
        /**
         * subscribed token amount
         */
        amount: string;
        /**
         * subscription cost in usdt
         */
        cost: string;
        timestamp: number;
    };
};

export type PostSapiV1BlvtSubscribeResponse = PostSapiV1BlvtSubscribeResponses[keyof PostSapiV1BlvtSubscribeResponses];

export type GetSapiV1BlvtSubscribeRecordData = {
    body?: never;
    path?: never;
    query: {
        /**
         * BTCDOWN, BTCUP
         */
        tokenName?: string;
        id?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/blvt/subscribe/record';
};

export type GetSapiV1BlvtSubscribeRecordErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1BlvtSubscribeRecordError = GetSapiV1BlvtSubscribeRecordErrors[keyof GetSapiV1BlvtSubscribeRecordErrors];

export type GetSapiV1BlvtSubscribeRecordResponses = {
    /**
     * List of subscription record
     */
    200: {
        id: number;
        tokenName: string;
        /**
         * Subscription amount
         */
        amount: string;
        /**
         * NAV price of subscription
         */
        nav: string;
        /**
         * Subscription fee in usdt
         */
        fee: string;
        /**
         * Subscription cost in usdt
         */
        totalCharge: string;
        timestamp: number;
    };
};

export type GetSapiV1BlvtSubscribeRecordResponse = GetSapiV1BlvtSubscribeRecordResponses[keyof GetSapiV1BlvtSubscribeRecordResponses];

export type PostSapiV1BlvtRedeemData = {
    body?: never;
    path?: never;
    query: {
        /**
         * BTCDOWN, BTCUP
         */
        tokenName: string;
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/blvt/redeem';
};

export type PostSapiV1BlvtRedeemErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1BlvtRedeemError = PostSapiV1BlvtRedeemErrors[keyof PostSapiV1BlvtRedeemErrors];

export type PostSapiV1BlvtRedeemResponses = {
    /**
     * Redemption record
     */
    200: {
        id: number;
        /**
         * S, P, and F for "success", "pending", and "failure"
         */
        status: string;
        tokenName: string;
        /**
         * Redemption token amount
         */
        redeemAmount: string;
        /**
         * Redemption value in usdt
         */
        amount: string;
        timestamp: number;
    };
};

export type PostSapiV1BlvtRedeemResponse = PostSapiV1BlvtRedeemResponses[keyof PostSapiV1BlvtRedeemResponses];

export type GetSapiV1BlvtRedeemRecordData = {
    body?: never;
    path?: never;
    query: {
        /**
         * BTCDOWN, BTCUP
         */
        tokenName?: string;
        id?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * default 1000, max 1000
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/blvt/redeem/record';
};

export type GetSapiV1BlvtRedeemRecordErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1BlvtRedeemRecordError = GetSapiV1BlvtRedeemRecordErrors[keyof GetSapiV1BlvtRedeemRecordErrors];

export type GetSapiV1BlvtRedeemRecordResponses = {
    /**
     * List of redemption record
     */
    200: Array<{
        id: number;
        tokenName: string;
        /**
         * Redemption amount
         */
        amount: string;
        /**
         * NAV of redemption
         */
        nav: string;
        /**
         * Reemption fee
         */
        fee: string;
        /**
         * Net redemption value in usdt
         */
        netProceed: string;
        timestamp: number;
    }>;
};

export type GetSapiV1BlvtRedeemRecordResponse = GetSapiV1BlvtRedeemRecordResponses[keyof GetSapiV1BlvtRedeemRecordResponses];

export type GetSapiV1BlvtUserLimitData = {
    body?: never;
    path?: never;
    query: {
        /**
         * BTCDOWN, BTCUP
         */
        tokenName?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/blvt/userLimit';
};

export type GetSapiV1BlvtUserLimitErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1BlvtUserLimitError = GetSapiV1BlvtUserLimitErrors[keyof GetSapiV1BlvtUserLimitErrors];

export type GetSapiV1BlvtUserLimitResponses = {
    /**
     * List of token limits
     */
    200: Array<{
        tokenName: string;
        /**
         * USDT
         */
        userDailyTotalPurchaseLimit: string;
        /**
         * USDT
         */
        userDailyTotalRedeemLimit: string;
    }>;
};

export type GetSapiV1BlvtUserLimitResponse = GetSapiV1BlvtUserLimitResponses[keyof GetSapiV1BlvtUserLimitResponses];

export type GetSapiV1C2cOrderMatchListUserOrderHistoryData = {
    body?: never;
    path?: never;
    query: {
        tradeType: 'BUY' | 'SELL';
        /**
         * UTC timestamp in ms
         */
        startTimestamp?: number;
        /**
         * UTC timestamp in ms
         */
        endTimestamp?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * default 100, max 100
         */
        rows?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/c2c/orderMatch/listUserOrderHistory';
};

export type GetSapiV1C2cOrderMatchListUserOrderHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1C2cOrderMatchListUserOrderHistoryError = GetSapiV1C2cOrderMatchListUserOrderHistoryErrors[keyof GetSapiV1C2cOrderMatchListUserOrderHistoryErrors];

export type GetSapiV1C2cOrderMatchListUserOrderHistoryResponses = {
    /**
     * Trades history
     */
    200: {
        code: string;
        message: string;
        data: Array<{
            orderNumber: string;
            advNo: string;
            tradeType: string;
            asset: string;
            fiat: string;
            fiatSymbol: string;
            /**
             * Quantity (in Crypto)
             */
            amount: string;
            totalPrice: string;
            /**
             * Unit Price (in Fiat)
             */
            unitPrice: string;
            /**
             * PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM
             */
            orderStatus: string;
            createTime: number;
            /**
             * Transaction Fee (in Crypto)
             */
            commission: string;
            counterPartNickName: string;
            advertisementRole: string;
        }>;
        total: number;
        success: boolean;
    };
};

export type GetSapiV1C2cOrderMatchListUserOrderHistoryResponse = GetSapiV1C2cOrderMatchListUserOrderHistoryResponses[keyof GetSapiV1C2cOrderMatchListUserOrderHistoryResponses];

export type GetSapiV1LoanVipOngoingOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order id
         */
        orderId?: number;
        collateralAccountId?: number;
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default 10; max 100.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/ongoing/orders';
};

export type GetSapiV1LoanVipOngoingOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanVipOngoingOrdersError = GetSapiV1LoanVipOngoingOrdersErrors[keyof GetSapiV1LoanVipOngoingOrdersErrors];

export type GetSapiV1LoanVipOngoingOrdersResponses = {
    /**
     * Ongoing VIP Loan Orders
     */
    200: {
        rows: Array<{
            orderId: number;
            loanCoin: string;
            totalDebt: string;
            residualInterest: string;
            collateralAccountId: string;
            collateralCoin: string;
            /**
             * locked collateral value shown in USD value
             */
            collateralValue: string;
            totalCollateralValueAfterHaircut?: string;
            lockedCollateralValue?: string;
            currentLTV: string;
            expirationTime: number;
            loanDate: string;
            loanRate: string;
            loanTerm: string;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanVipOngoingOrdersResponse = GetSapiV1LoanVipOngoingOrdersResponses[keyof GetSapiV1LoanVipOngoingOrdersResponses];

export type PostSapiV1LoanVipRepayData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order id
         */
        orderId?: number;
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/repay';
};

export type PostSapiV1LoanVipRepayErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LoanVipRepayError = PostSapiV1LoanVipRepayErrors[keyof PostSapiV1LoanVipRepayErrors];

export type PostSapiV1LoanVipRepayResponses = {
    /**
     * VIP Loan Repayment
     */
    200: {
        loanCoin: string;
        repayAmount: string;
        remainingPrincipal: string;
        remainingInterest: string;
        collateralCoin: string;
        currentLTV: string;
        /**
         * Repaid, Repaying, Failed
         */
        repayStatus: string;
    };
};

export type PostSapiV1LoanVipRepayResponse = PostSapiV1LoanVipRepayResponses[keyof PostSapiV1LoanVipRepayResponses];

export type GetSapiV1LoanVipRepayHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order id
         */
        orderId?: number;
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default 10; max 100.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/repay/history';
};

export type GetSapiV1LoanVipRepayHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanVipRepayHistoryError = GetSapiV1LoanVipRepayHistoryErrors[keyof GetSapiV1LoanVipRepayHistoryErrors];

export type GetSapiV1LoanVipRepayHistoryResponses = {
    /**
     * VIP Loan Repayment History
     */
    200: {
        rows: Array<{
            loanCoin: string;
            repayAmount: string;
            collateralCoin: string;
            /**
             * Repaid, Repaying, Failed
             */
            repayStatus: string;
            repayTime: string;
            orderId: string;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanVipRepayHistoryResponse = GetSapiV1LoanVipRepayHistoryResponses[keyof GetSapiV1LoanVipRepayHistoryResponses];

export type GetSapiV1LoanVipCollateralAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order id
         */
        orderId?: number;
        collateralAccountId?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/collateral/account';
};

export type GetSapiV1LoanVipCollateralAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanVipCollateralAccountError = GetSapiV1LoanVipCollateralAccountErrors[keyof GetSapiV1LoanVipCollateralAccountErrors];

export type GetSapiV1LoanVipCollateralAccountResponses = {
    /**
     * VIP Locked Value
     */
    200: {
        rows: Array<{
            collateralAccountId: string;
            collateralCoin: string;
            /**
             * locked collateral value shown in USD value
             */
            collateralValue: string;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanVipCollateralAccountResponse = GetSapiV1LoanVipCollateralAccountResponses[keyof GetSapiV1LoanVipCollateralAccountResponses];

export type PostSapiV1LoanVipBorrowData = {
    body?: never;
    path?: never;
    query: {
        loanAccountId: number;
        /**
         * Coin loaned
         */
        loanCoin?: string;
        loanAmount: number;
        collateralAccountId: string;
        collateralCoin: string;
        isFlexibleRate: 'TRUE' | 'FALSE';
        loanTerm?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/borrow';
};

export type PostSapiV1LoanVipBorrowErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LoanVipBorrowError = PostSapiV1LoanVipBorrowErrors[keyof PostSapiV1LoanVipBorrowErrors];

export type PostSapiV1LoanVipBorrowResponses = {
    /**
     * Collateral Assets Data
     */
    200: {
        loanAccountId: string;
        requestId: string;
        loanCoin: string;
        isFlexibleRate: string;
        loanAmount: string;
        collateralAccountId: string;
        collateralCoin: string;
        loanTerm?: string;
    };
};

export type PostSapiV1LoanVipBorrowResponse = PostSapiV1LoanVipBorrowResponses[keyof PostSapiV1LoanVipBorrowResponses];

export type GetSapiV1LoanVipLoanableDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Defaults to user's vip level
         */
        vipLevel?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/loanable/data';
};

export type GetSapiV1LoanVipLoanableDataErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanVipLoanableDataError = GetSapiV1LoanVipLoanableDataErrors[keyof GetSapiV1LoanVipLoanableDataErrors];

export type GetSapiV1LoanVipLoanableDataResponses = {
    /**
     * Loanable Assets Data
     */
    200: {
        total: number;
        rows: Array<{
            loanCoin: string;
            _flexibleDailyInterestRate: string;
            _flexibleYearlyInterestRate: string;
            _30dDailyInterestRate: string;
            _30dYearlyInterestRate: string;
            _60dDailyInterestRate: string;
            _60dYearlyInterestRate: string;
            minLimit: string;
            maxLimit: string;
            vipLevel: number;
        }>;
    };
};

export type GetSapiV1LoanVipLoanableDataResponse = GetSapiV1LoanVipLoanableDataResponses[keyof GetSapiV1LoanVipLoanableDataResponses];

export type GetSapiV1LoanVipCollateralDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/collateral/data';
};

export type GetSapiV1LoanVipCollateralDataErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanVipCollateralDataError = GetSapiV1LoanVipCollateralDataErrors[keyof GetSapiV1LoanVipCollateralDataErrors];

export type GetSapiV1LoanVipCollateralDataResponses = {
    /**
     * Collateral Asset Data
     */
    200: {
        rows: Array<{
            collateralCoin: string;
            _1stCollateralRatio: string;
            _1stCollateralRange: string;
            _2ndCollateralRatio: string;
            _2ndCollateralRange: string;
            _3rdCollateralRatio: string;
            _3rdCollateralRange: string;
            _4thCollateralRatio: string;
            _4thCollateralRange: string;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanVipCollateralDataResponse = GetSapiV1LoanVipCollateralDataResponses[keyof GetSapiV1LoanVipCollateralDataResponses];

export type GetSapiV1LoanVipRequestDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/request/data';
};

export type GetSapiV1LoanVipRequestDataErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanVipRequestDataError = GetSapiV1LoanVipRequestDataErrors[keyof GetSapiV1LoanVipRequestDataErrors];

export type GetSapiV1LoanVipRequestDataResponses = {
    /**
     * Application Status
     */
    200: {
        total: number;
        rows: Array<{
            loanAccountId: string;
            orderId: string;
            requestId: string;
            loanCoin: string;
            loanAmount: string;
            collateralAccountId: string;
            collateralCoin: string;
            loanTerm: number;
            status: number;
        }>;
    };
};

export type GetSapiV1LoanVipRequestDataResponse = GetSapiV1LoanVipRequestDataResponses[keyof GetSapiV1LoanVipRequestDataResponses];

export type GetSapiV1LoanVipRequestInterestRateData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Max 10 assets, Multiple split by ","
         */
        loanCoin?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/request/interestRate';
};

export type GetSapiV1LoanVipRequestInterestRateErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanVipRequestInterestRateError = GetSapiV1LoanVipRequestInterestRateErrors[keyof GetSapiV1LoanVipRequestInterestRateErrors];

export type GetSapiV1LoanVipRequestInterestRateResponses = {
    /**
     * Borrow interest rate
     */
    200: Array<{
        asset: string;
        flexibleDailyInterestRate: string;
        flexibleYearlyInterestRate: string;
        time: number;
    }>;
};

export type GetSapiV1LoanVipRequestInterestRateResponse = GetSapiV1LoanVipRequestInterestRateResponses[keyof GetSapiV1LoanVipRequestInterestRateResponses];

export type PostSapiV1LoanVipRenewData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order id
         */
        orderId?: number;
        loanTerm?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/vip/renew';
};

export type PostSapiV1LoanVipRenewErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LoanVipRenewError = PostSapiV1LoanVipRenewErrors[keyof PostSapiV1LoanVipRenewErrors];

export type PostSapiV1LoanVipRenewResponses = {
    /**
     * Loan renew result
     */
    200: {
        loanAccountId: string;
        loanCoin: string;
        loanAmount: string;
        collateralAccountId: string;
        collateralCoin: string;
        loanTerm: string;
    };
};

export type PostSapiV1LoanVipRenewResponse = PostSapiV1LoanVipRenewResponses[keyof PostSapiV1LoanVipRenewResponses];

export type GetSapiV1LoanIncomeData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        /**
         * All types will be returned by default.
         * * `borrowIn`
         * * `collateralSpent`
         * * `repayAmount`
         * * `collateralReturn` - Collateral return after repayment
         * * `addCollateral`
         * * `removeCollateral`
         * * `collateralReturnAfterLiquidation`
         */
        type?: 'borrowIn' | 'collateralSpent' | 'repayAmount' | 'collateralReturn' | 'addCollateral' | 'removeCollateral' | 'collateralReturnAfterLiquidation';
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * default 20, max 100
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/income';
};

export type GetSapiV1LoanIncomeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanIncomeError = GetSapiV1LoanIncomeErrors[keyof GetSapiV1LoanIncomeErrors];

export type GetSapiV1LoanIncomeResponses = {
    /**
     * Loan History
     */
    200: Array<{
        asset: string;
        type: string;
        amount: string;
        timestamp: number;
        tranId: string;
    }>;
};

export type GetSapiV1LoanIncomeResponse = GetSapiV1LoanIncomeResponses[keyof GetSapiV1LoanIncomeResponses];

export type PostSapiV1LoanBorrowData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin: string;
        /**
         * Loan amount
         */
        loanAmount?: number;
        /**
         * Coin used as collateral
         */
        collateralCoin: string;
        collateralAmount?: number;
        /**
         * 7/14/30/90/180 days
         */
        loanTerm: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/borrow';
};

export type PostSapiV1LoanBorrowErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LoanBorrowError = PostSapiV1LoanBorrowErrors[keyof PostSapiV1LoanBorrowErrors];

export type PostSapiV1LoanBorrowResponses = {
    /**
     * Borrow Information
     */
    200: {
        loanCoin: string;
        loanAmount: string;
        collateralCoin: string;
        collateralAmount: string;
        hourlyInterestRate: string;
        orderId: string;
    };
};

export type PostSapiV1LoanBorrowResponse = PostSapiV1LoanBorrowResponses[keyof PostSapiV1LoanBorrowResponses];

export type GetSapiV1LoanBorrowHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * orderId in POST /sapi/v1/loan/borrow
         */
        orderId?: number;
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * default 10, max 100
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/borrow/history';
};

export type GetSapiV1LoanBorrowHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanBorrowHistoryError = GetSapiV1LoanBorrowHistoryErrors[keyof GetSapiV1LoanBorrowHistoryErrors];

export type GetSapiV1LoanBorrowHistoryResponses = {
    /**
     * Borrow History
     */
    200: {
        rows: Array<{
            orderId: number;
            loanCoin: string;
            initialLoanAmount: string;
            hourlyInterestRate: string;
            loanTerm: string;
            collateralCoin: string;
            initialCollateralAmount: string;
            borrowTime: number;
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanBorrowHistoryResponse = GetSapiV1LoanBorrowHistoryResponses[keyof GetSapiV1LoanBorrowHistoryResponses];

export type GetSapiV1LoanOngoingOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * orderId in POST /sapi/v1/loan/borrow
         */
        orderId?: number;
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * Current querying page. Start from 1; default:1, max:1000
         */
        current?: number;
        /**
         * default 10, max 100
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/ongoing/orders';
};

export type GetSapiV1LoanOngoingOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanOngoingOrdersError = GetSapiV1LoanOngoingOrdersErrors[keyof GetSapiV1LoanOngoingOrdersErrors];

export type GetSapiV1LoanOngoingOrdersResponses = {
    /**
     * Ongoing Orders
     */
    200: {
        rows: Array<{
            orderId: number;
            loanCoin: string;
            totalDebt: string;
            residualInterest: string;
            collateralCoin: string;
            collateralAmount: string;
            currentLTV: string;
            expirationTime: number;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanOngoingOrdersResponse = GetSapiV1LoanOngoingOrdersResponses[keyof GetSapiV1LoanOngoingOrdersResponses];

export type PostSapiV1LoanRepayData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order ID
         */
        orderId: number;
        /**
         * Repayment Amount
         */
        amount: number;
        /**
         * Default: 1. 1 for 'repay with borrowed coin'; 2 for 'repay with collateral'.
         */
        type?: number;
        /**
         * Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.
         */
        collateralReturn?: boolean;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/repay';
};

export type PostSapiV1LoanRepayErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LoanRepayError = PostSapiV1LoanRepayErrors[keyof PostSapiV1LoanRepayErrors];

export type PostSapiV1LoanRepayResponses = {
    /**
     * Repayment Information
     */
    200: RepaymentInfo | RepaymentInfo2;
};

export type PostSapiV1LoanRepayResponse = PostSapiV1LoanRepayResponses[keyof PostSapiV1LoanRepayResponses];

export type GetSapiV1LoanRepayHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order ID
         */
        orderId?: number;
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * default 10, max 100
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/repay/history';
};

export type GetSapiV1LoanRepayHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanRepayHistoryError = GetSapiV1LoanRepayHistoryErrors[keyof GetSapiV1LoanRepayHistoryErrors];

export type GetSapiV1LoanRepayHistoryResponses = {
    /**
     * Loan Repayment History
     */
    200: {
        rows: Array<{
            loanCoin: string;
            repayAmount: string;
            collateralCoin: string;
            collateralUsed: string;
            collateralReturn: string;
            repayType: string;
            /**
             * 'repayType': '1' // 1 for 'repay with borrowed coin', 2 for 'repay with collateral' 'repayStatus': 'Repaid' // Repaid, Repaying, Failed
             */
            repayStatus: string;
            repayTime: number;
            orderId: number;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanRepayHistoryResponse = GetSapiV1LoanRepayHistoryResponses[keyof GetSapiV1LoanRepayHistoryResponses];

export type PostSapiV1LoanAdjustLtvData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order ID
         */
        orderId: number;
        /**
         * Amount
         */
        amount: number;
        /**
         * 'ADDITIONAL', 'REDUCED'
         */
        direction: 'ADDITIONAL' | 'REDUCED';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/adjust/ltv';
};

export type PostSapiV1LoanAdjustLtvErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LoanAdjustLtvError = PostSapiV1LoanAdjustLtvErrors[keyof PostSapiV1LoanAdjustLtvErrors];

export type PostSapiV1LoanAdjustLtvResponses = {
    /**
     * LTV Adjust
     */
    200: {
        loanCoin: string;
        collateralCoin: string;
        direction: string;
        amount: string;
        currentLTV: string;
    };
};

export type PostSapiV1LoanAdjustLtvResponse = PostSapiV1LoanAdjustLtvResponses[keyof PostSapiV1LoanAdjustLtvResponses];

export type GetSapiV1LoanLtvAdjustmentHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Order ID
         */
        orderId?: number;
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * default 10, max 100
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/ltv/adjustment/history';
};

export type GetSapiV1LoanLtvAdjustmentHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanLtvAdjustmentHistoryError = GetSapiV1LoanLtvAdjustmentHistoryErrors[keyof GetSapiV1LoanLtvAdjustmentHistoryErrors];

export type GetSapiV1LoanLtvAdjustmentHistoryResponses = {
    /**
     * LTV Adjustment History
     */
    200: {
        rows: Array<{
            loanCoin: string;
            collateralCoin: string;
            direction: string;
            amount: string;
            preLTV: string;
            afterLTV: string;
            adjustTime: number;
            orderId: number;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanLtvAdjustmentHistoryResponse = GetSapiV1LoanLtvAdjustmentHistoryResponses[keyof GetSapiV1LoanLtvAdjustmentHistoryResponses];

export type GetSapiV1LoanLoanableDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Defaults to user's vip level
         */
        vipLevel?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/loanable/data';
};

export type GetSapiV1LoanLoanableDataErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanLoanableDataError = GetSapiV1LoanLoanableDataErrors[keyof GetSapiV1LoanLoanableDataErrors];

export type GetSapiV1LoanLoanableDataResponses = {
    /**
     * Loanable Assets Data
     */
    200: {
        rows: Array<{
            loanCoin: string;
            _7dHourlyInterestRate: string;
            _7dDailyInterestRate: string;
            _14dHourlyInterestRate: string;
            _14dDailyInterestRate: string;
            _30dHourlyInterestRate: string;
            _30dDailyInterestRate: string;
            _90dHourlyInterestRate: string;
            _90dDailyInterestRate: string;
            _180dHourlyInterestRate: string;
            _180dDailyInterestRate: string;
            minLimit: string;
            maxLimit: string;
            vipLevel: number;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanLoanableDataResponse = GetSapiV1LoanLoanableDataResponses[keyof GetSapiV1LoanLoanableDataResponses];

export type GetSapiV1LoanCollateralDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * Defaults to user's vip level
         */
        vipLevel?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/collateral/data';
};

export type GetSapiV1LoanCollateralDataErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanCollateralDataError = GetSapiV1LoanCollateralDataErrors[keyof GetSapiV1LoanCollateralDataErrors];

export type GetSapiV1LoanCollateralDataResponses = {
    /**
     * Collateral Assets Data
     */
    200: {
        rows: Array<{
            collateralCoin: string;
            initialLTV: string;
            marginCallLTV: string;
            liquidationLTV: string;
            maxLimit: string;
            vipLevel: number;
        }>;
        total: number;
    };
};

export type GetSapiV1LoanCollateralDataResponse = GetSapiV1LoanCollateralDataResponses[keyof GetSapiV1LoanCollateralDataResponses];

export type GetSapiV1LoanRepayCollateralRateData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin: string;
        /**
         * Coin used as collateral
         */
        collateralCoin: string;
        /**
         * repay amount of loanCoin
         */
        repayAmount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/repay/collateral/rate';
};

export type GetSapiV1LoanRepayCollateralRateErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LoanRepayCollateralRateError = GetSapiV1LoanRepayCollateralRateErrors[keyof GetSapiV1LoanRepayCollateralRateErrors];

export type GetSapiV1LoanRepayCollateralRateResponses = {
    /**
     * Collateral Assets Data
     */
    200: {
        loanCoin: string;
        collateralCoin: string;
        repayAmount: string;
        /**
         * rate of collateral coin/loan coin
         */
        rate: string;
    };
};

export type GetSapiV1LoanRepayCollateralRateResponse = GetSapiV1LoanRepayCollateralRateResponses[keyof GetSapiV1LoanRepayCollateralRateResponses];

export type PostSapiV1LoanCustomizeMarginCallData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.
         */
        orderId?: number;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        marginCall: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/loan/customize/margin_call';
};

export type PostSapiV1LoanCustomizeMarginCallErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LoanCustomizeMarginCallError = PostSapiV1LoanCustomizeMarginCallErrors[keyof PostSapiV1LoanCustomizeMarginCallErrors];

export type PostSapiV1LoanCustomizeMarginCallResponses = {
    /**
     * Collateral Assets Data
     */
    200: {
        rows: Array<{
            orderId: string;
            collateralCoin: string;
            preMarginCall: string;
            afterMarginCall: string;
            customizeTime: number;
        }>;
        total: number;
    };
};

export type PostSapiV1LoanCustomizeMarginCallResponse = PostSapiV1LoanCustomizeMarginCallResponses[keyof PostSapiV1LoanCustomizeMarginCallResponses];

export type PostSapiV2LoanFlexibleBorrowData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Loan amount
         */
        loanAmount?: number;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        collateralAmount?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/loan/flexible/borrow';
};

export type PostSapiV2LoanFlexibleBorrowErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV2LoanFlexibleBorrowError = PostSapiV2LoanFlexibleBorrowErrors[keyof PostSapiV2LoanFlexibleBorrowErrors];

export type PostSapiV2LoanFlexibleBorrowResponses = {
    /**
     * Collateral Assets Data
     */
    200: {
        loanCoin: string;
        loanAmount: string;
        collateralCoin?: string;
        collateralAmount: string;
        status: string;
    };
};

export type PostSapiV2LoanFlexibleBorrowResponse = PostSapiV2LoanFlexibleBorrowResponses[keyof PostSapiV2LoanFlexibleBorrowResponses];

export type GetSapiV2LoanFlexibleOngoingOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/loan/flexible/ongoing/orders';
};

export type GetSapiV2LoanFlexibleOngoingOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2LoanFlexibleOngoingOrdersError = GetSapiV2LoanFlexibleOngoingOrdersErrors[keyof GetSapiV2LoanFlexibleOngoingOrdersErrors];

export type GetSapiV2LoanFlexibleOngoingOrdersResponses = {
    /**
     * Collateral Assets Data
     */
    200: {
        total: number;
        rows: Array<{
            loanCoin: string;
            totalDebt: string;
            collateralCoin: string;
            collateralAmount: string;
            currentLTV: string;
        }>;
    };
};

export type GetSapiV2LoanFlexibleOngoingOrdersResponse = GetSapiV2LoanFlexibleOngoingOrdersResponses[keyof GetSapiV2LoanFlexibleOngoingOrdersResponses];

export type GetSapiV2LoanFlexibleBorrowHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/loan/flexible/borrow/history';
};

export type GetSapiV2LoanFlexibleBorrowHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2LoanFlexibleBorrowHistoryError = GetSapiV2LoanFlexibleBorrowHistoryErrors[keyof GetSapiV2LoanFlexibleBorrowHistoryErrors];

export type GetSapiV2LoanFlexibleBorrowHistoryResponses = {
    /**
     * Loan borrow histroy
     */
    200: {
        total: number;
        rows: Array<{
            loanCoin: string;
            initialLoanAmount: string;
            collateralCoin: string;
            initialCollateralAmount: string;
            borrowTime: number;
            status: string;
        }>;
    };
};

export type GetSapiV2LoanFlexibleBorrowHistoryResponse = GetSapiV2LoanFlexibleBorrowHistoryResponses[keyof GetSapiV2LoanFlexibleBorrowHistoryResponses];

export type PostSapiV2LoanFlexibleRepayData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * repay amount of loanCoin
         */
        repayAmount: number;
        /**
         * Default: TRUE.
         * TRUE: Return extra collateral to earn account;
         * FALSE: Keep extra collateral in the order, and lower LTV.
         */
        collateralReturn?: boolean;
        /**
         * Default: FALSE.
         * TRUE: Full repayment;
         * FALSE: Partial repayment, based on loanAmount
         */
        fullRepayment?: boolean;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/loan/flexible/repay';
};

export type PostSapiV2LoanFlexibleRepayErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV2LoanFlexibleRepayError = PostSapiV2LoanFlexibleRepayErrors[keyof PostSapiV2LoanFlexibleRepayErrors];

export type PostSapiV2LoanFlexibleRepayResponses = {
    /**
     * Loan repay
     */
    200: {
        loanCoin: string;
        collateralCoin: string;
        remainingDebt: string;
        remainingCollateral: string;
        fullRepayment: boolean;
        currentLTV: string;
        /**
         * Repaid, Repaying, Failed
         */
        repayStatus: string;
    };
};

export type PostSapiV2LoanFlexibleRepayResponse = PostSapiV2LoanFlexibleRepayResponses[keyof PostSapiV2LoanFlexibleRepayResponses];

export type GetSapiV2LoanFlexibleRepayHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/loan/flexible/repay/history';
};

export type GetSapiV2LoanFlexibleRepayHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2LoanFlexibleRepayHistoryError = GetSapiV2LoanFlexibleRepayHistoryErrors[keyof GetSapiV2LoanFlexibleRepayHistoryErrors];

export type GetSapiV2LoanFlexibleRepayHistoryResponses = {
    /**
     * Loan repay history
     */
    200: {
        rows: Array<{
            loanCoin: string;
            repayAmount: string;
            collateralCoin: string;
            collateralReturn: string;
            repayStatus: string;
            repayTime: number;
        }>;
        total: number;
    };
};

export type GetSapiV2LoanFlexibleRepayHistoryResponse = GetSapiV2LoanFlexibleRepayHistoryResponses[keyof GetSapiV2LoanFlexibleRepayHistoryResponses];

export type PostSapiV2LoanFlexibleAdjustLtvData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        adjustmentAmount: number;
        direction: 'ADDITIONAL' | 'REDUCED';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/loan/flexible/adjust/ltv';
};

export type PostSapiV2LoanFlexibleAdjustLtvErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV2LoanFlexibleAdjustLtvError = PostSapiV2LoanFlexibleAdjustLtvErrors[keyof PostSapiV2LoanFlexibleAdjustLtvErrors];

export type PostSapiV2LoanFlexibleAdjustLtvResponses = {
    /**
     * adjust LTV result
     */
    200: {
        loanCoin: string;
        collateralCoin: string;
        direction: string;
        adjustmentAmount: string;
        currentLTV: string;
    };
};

export type PostSapiV2LoanFlexibleAdjustLtvResponse = PostSapiV2LoanFlexibleAdjustLtvResponses[keyof PostSapiV2LoanFlexibleAdjustLtvResponses];

export type GetSapiV2LoanFlexibleLtvAdjustmentHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default 500; max 1000.
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/loan/flexible/ltv/adjustment/history';
};

export type GetSapiV2LoanFlexibleLtvAdjustmentHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2LoanFlexibleLtvAdjustmentHistoryError = GetSapiV2LoanFlexibleLtvAdjustmentHistoryErrors[keyof GetSapiV2LoanFlexibleLtvAdjustmentHistoryErrors];

export type GetSapiV2LoanFlexibleLtvAdjustmentHistoryResponses = {
    /**
     * LTV adjustment history
     */
    200: {
        rows: Array<{
            loanCoin: string;
            collateralCoin: string;
            direction: string;
            collateralAmount: string;
            preLTV: string;
            afterLTV: string;
            adjustTime: number;
        }>;
        total: number;
    };
};

export type GetSapiV2LoanFlexibleLtvAdjustmentHistoryResponse = GetSapiV2LoanFlexibleLtvAdjustmentHistoryResponses[keyof GetSapiV2LoanFlexibleLtvAdjustmentHistoryResponses];

export type GetSapiV2LoanFlexibleLoanableDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin loaned
         */
        loanCoin?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/loan/flexible/loanable/data';
};

export type GetSapiV2LoanFlexibleLoanableDataErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2LoanFlexibleLoanableDataError = GetSapiV2LoanFlexibleLoanableDataErrors[keyof GetSapiV2LoanFlexibleLoanableDataErrors];

export type GetSapiV2LoanFlexibleLoanableDataResponses = {
    /**
     * Loan asset data
     */
    200: {
        rows: Array<{
            loanCoin: string;
            flexibleInterestRate: string;
            flexibleMinLimit: string;
            flexibleMaxLimit: string;
        }>;
        total: number;
    };
};

export type GetSapiV2LoanFlexibleLoanableDataResponse = GetSapiV2LoanFlexibleLoanableDataResponses[keyof GetSapiV2LoanFlexibleLoanableDataResponses];

export type GetSapiV2LoanFlexibleCollateralDataData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Coin used as collateral
         */
        collateralCoin?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/loan/flexible/collateral/data';
};

export type GetSapiV2LoanFlexibleCollateralDataErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2LoanFlexibleCollateralDataError = GetSapiV2LoanFlexibleCollateralDataErrors[keyof GetSapiV2LoanFlexibleCollateralDataErrors];

export type GetSapiV2LoanFlexibleCollateralDataResponses = {
    /**
     * Loan asset data
     */
    200: {
        rows: Array<{
            collateralCoin: string;
            initialLTV: string;
            marginCallLTV: string;
            liquidationLTV: string;
            maxLimit: string;
        }>;
        total: number;
    };
};

export type GetSapiV2LoanFlexibleCollateralDataResponse = GetSapiV2LoanFlexibleCollateralDataResponses[keyof GetSapiV2LoanFlexibleCollateralDataResponses];

export type GetSapiV1PayTransactionsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * default 100, max 100
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/pay/transactions';
};

export type GetSapiV1PayTransactionsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1PayTransactionsError = GetSapiV1PayTransactionsErrors[keyof GetSapiV1PayTransactionsErrors];

export type GetSapiV1PayTransactionsResponses = {
    /**
     * Pay History
     */
    200: {
        code: string;
        message: string;
        data: Array<{
            /**
             * Enum：PAY(C2B Merchant Acquiring Payment), PAY_REFUND(C2B Merchant Acquiring Payment,refund), C2C(C2C Transfer Payment),CRYPTO_BOX(Crypto box), CRYPTO_BOX_RF(Crypto Box, refund), C2C_HOLDING(Transfer to new Binance user), C2C_HOLDING_RF(Transfer to new Binance user,refund), PAYOUT(B2C Disbursement Payment)
             */
            orderType: string;
            transactionId: string;
            transactionTime: number;
            /**
             * order amount(up to 8 decimal places), positive is income, negative is expenditure
             */
            amount: string;
            currency: string;
            walletType: number;
            walletTypes: Array<number>;
            fundsDetail: Array<{
                currency: string;
                amount: string;
            }>;
            payerInfo: {
                name: string;
                type: string;
                binanceId: string;
                accountId: string;
            };
            receiverInfo: {
                name: string;
                type: string;
                email: string;
                binanceId: string;
                accountId: string;
                countryCode: string;
                phoneNumber: string;
                mobileCode: string;
                extend?: Array<{
                    institutionName: string;
                    cardNumber: string;
                    digitalWalletId: string;
                }>;
            };
        }>;
        success: boolean;
    };
};

export type GetSapiV1PayTransactionsResponse = GetSapiV1PayTransactionsResponses[keyof GetSapiV1PayTransactionsResponses];

export type GetSapiV1ConvertExchangeInfoData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * User spends coin
         */
        fromAsset?: string;
        /**
         * User receives coin
         */
        toAsset?: string;
    };
    url: '/sapi/v1/convert/exchangeInfo';
};

export type GetSapiV1ConvertExchangeInfoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ConvertExchangeInfoError = GetSapiV1ConvertExchangeInfoErrors[keyof GetSapiV1ConvertExchangeInfoErrors];

export type GetSapiV1ConvertExchangeInfoResponses = {
    /**
     * List Convert Pairs
     */
    200: Array<{
        fromAsset: string;
        toAsset: string;
        fromAssetMinAmount: string;
        fromAssetMaxAmount: string;
        toAssetMinAmount: string;
        toAssetMaxAmount: string;
    }>;
};

export type GetSapiV1ConvertExchangeInfoResponse = GetSapiV1ConvertExchangeInfoResponses[keyof GetSapiV1ConvertExchangeInfoResponses];

export type GetSapiV1ConvertAssetInfoData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/convert/assetInfo';
};

export type GetSapiV1ConvertAssetInfoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ConvertAssetInfoError = GetSapiV1ConvertAssetInfoErrors[keyof GetSapiV1ConvertAssetInfoErrors];

export type GetSapiV1ConvertAssetInfoResponses = {
    /**
     * Asset Precision Information
     */
    200: Array<{
        asset: string;
        fraction: number;
    }>;
};

export type GetSapiV1ConvertAssetInfoResponse = GetSapiV1ConvertAssetInfoResponses[keyof GetSapiV1ConvertAssetInfoResponses];

export type PostSapiV1ConvertGetQuoteData = {
    body?: never;
    path?: never;
    query: {
        fromAsset: string;
        toAsset: string;
        /**
         * When specified, it is the amount you will be debited after the conversion
         */
        fromAmount?: number;
        /**
         * When specified, it is the amount you will be debited after the conversion
         */
        toAmount?: number;
        /**
         * 10s, 30s, 1m, 2m, default 10s
         */
        validTime?: string;
        /**
         * SPOT or FUNDING. Default is SPOT
         */
        walletType?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/convert/getQuote';
};

export type PostSapiV1ConvertGetQuoteErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1ConvertGetQuoteError = PostSapiV1ConvertGetQuoteErrors[keyof PostSapiV1ConvertGetQuoteErrors];

export type PostSapiV1ConvertGetQuoteResponses = {
    /**
     * Quote Request
     */
    200: {
        quoteId: string;
        ratio: string;
        inverseRatio: string;
        validTimestamp: number;
        toAmount: string;
        fromAmount: string;
    };
};

export type PostSapiV1ConvertGetQuoteResponse = PostSapiV1ConvertGetQuoteResponses[keyof PostSapiV1ConvertGetQuoteResponses];

export type PostSapiV1ConvertAcceptQuoteData = {
    body?: never;
    path?: never;
    query: {
        quoteId: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/convert/acceptQuote';
};

export type PostSapiV1ConvertAcceptQuoteErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1ConvertAcceptQuoteError = PostSapiV1ConvertAcceptQuoteErrors[keyof PostSapiV1ConvertAcceptQuoteErrors];

export type PostSapiV1ConvertAcceptQuoteResponses = {
    /**
     * Accept Quote
     */
    200: {
        orderId: string;
        createTime: number;
        orderStatus: string;
    };
};

export type PostSapiV1ConvertAcceptQuoteResponse = PostSapiV1ConvertAcceptQuoteResponses[keyof PostSapiV1ConvertAcceptQuoteResponses];

export type GetSapiV1ConvertOrderStatusData = {
    body?: never;
    path?: never;
    query: {
        orderId?: string;
        quoteId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/convert/orderStatus';
};

export type GetSapiV1ConvertOrderStatusErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ConvertOrderStatusError = GetSapiV1ConvertOrderStatusErrors[keyof GetSapiV1ConvertOrderStatusErrors];

export type GetSapiV1ConvertOrderStatusResponses = {
    /**
     * Order Status
     */
    200: {
        orderId: number;
        orderStatus: string;
        fromAsset: string;
        fromAmount: string;
        toAsset: string;
        toAmount: string;
        ratio: string;
        inverseRatio: string;
        createTime: number;
    };
};

export type GetSapiV1ConvertOrderStatusResponse = GetSapiV1ConvertOrderStatusResponses[keyof GetSapiV1ConvertOrderStatusResponses];

export type PostSapiV1ConvertLimitPlaceOrderData = {
    body?: never;
    path?: never;
    query: {
        baseAsset: string;
        quoteAsset: string;
        /**
         * Symbol limit price (from baseAsset to quoteAsset)
         */
        limitPrice: number;
        /**
         * Base asset amount. (One of baseAmount or quoteAmount is required)
         */
        baseAmount?: number;
        /**
         * Quote asset amount. (One of baseAmount or quoteAmount is required)
         */
        quoteAmount?: number;
        side: 'SELL' | 'BUY';
        /**
         * SPOT or FUNDING or SPOT_FUNDING. It is to use which type of assets. Default is SPOT.
         */
        walletType?: 'SPOT' | 'FUNDING' | 'SPOT_FUNDING';
        /**
         * 1_D, 3_D, 7_D, 30_D (D means day)
         */
        expiredType?: '1_D' | '3_D' | '7_D' | '30_D';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/convert/limit/placeOrder';
};

export type PostSapiV1ConvertLimitPlaceOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1ConvertLimitPlaceOrderError = PostSapiV1ConvertLimitPlaceOrderErrors[keyof PostSapiV1ConvertLimitPlaceOrderErrors];

export type PostSapiV1ConvertLimitPlaceOrderResponses = {
    200: {
        orderId: number;
        status: string;
    };
};

export type PostSapiV1ConvertLimitPlaceOrderResponse = PostSapiV1ConvertLimitPlaceOrderResponses[keyof PostSapiV1ConvertLimitPlaceOrderResponses];

export type PostSapiV1ConvertLimitCancelOrderData = {
    body?: never;
    path?: never;
    query: {
        orderId: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/convert/limit/cancelOrder';
};

export type PostSapiV1ConvertLimitCancelOrderErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1ConvertLimitCancelOrderError = PostSapiV1ConvertLimitCancelOrderErrors[keyof PostSapiV1ConvertLimitCancelOrderErrors];

export type PostSapiV1ConvertLimitCancelOrderResponses = {
    /**
     * Cancel Order
     */
    200: {
        orderId: number;
        status: string;
    };
};

export type PostSapiV1ConvertLimitCancelOrderResponse = PostSapiV1ConvertLimitCancelOrderResponses[keyof PostSapiV1ConvertLimitCancelOrderResponses];

export type GetSapiV1ConvertLimitQueryOpenOrdersData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/convert/limit/queryOpenOrders';
};

export type GetSapiV1ConvertLimitQueryOpenOrdersErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ConvertLimitQueryOpenOrdersError = GetSapiV1ConvertLimitQueryOpenOrdersErrors[keyof GetSapiV1ConvertLimitQueryOpenOrdersErrors];

export type GetSapiV1ConvertLimitQueryOpenOrdersResponses = {
    /**
     * All existing limit orders
     */
    200: {
        list: Array<{
            quoteId: string;
            orderId: number;
            orderStatus: string;
            fromAsset: string;
            fromAmount: string;
            toAsset: string;
            toAmount: string;
            ratio: string;
            inverseRatio: string;
            createTime: number;
            expiredTimestamp: number;
        }>;
    };
};

export type GetSapiV1ConvertLimitQueryOpenOrdersResponse = GetSapiV1ConvertLimitQueryOpenOrdersResponses[keyof GetSapiV1ConvertLimitQueryOpenOrdersResponses];

export type GetSapiV1ConvertTradeFlowData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime: number;
        /**
         * UTC timestamp in ms
         */
        endTime: number;
        /**
         * default 100, max 1000
         */
        limit?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/convert/tradeFlow';
};

export type GetSapiV1ConvertTradeFlowErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1ConvertTradeFlowError = GetSapiV1ConvertTradeFlowErrors[keyof GetSapiV1ConvertTradeFlowErrors];

export type GetSapiV1ConvertTradeFlowResponses = {
    /**
     * Convert Trade History
     */
    200: {
        list: Array<{
            quoteId: string;
            orderId: number;
            orderStatus: string;
            fromAsset: string;
            fromAmount: string;
            toAsset: string;
            toAmount: string;
            /**
             * price ratio
             */
            ratio: string;
            /**
             * inverse price
             */
            inverseRatio: string;
            createTime: number;
        }>;
        startTime: number;
        endTime: number;
        limit: number;
        moreData: boolean;
    };
};

export type GetSapiV1ConvertTradeFlowResponse = GetSapiV1ConvertTradeFlowResponses[keyof GetSapiV1ConvertTradeFlowResponses];

export type GetSapiV1RebateTaxQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * default 1
         */
        page?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/rebate/taxQuery';
};

export type GetSapiV1RebateTaxQueryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1RebateTaxQueryError = GetSapiV1RebateTaxQueryErrors[keyof GetSapiV1RebateTaxQueryErrors];

export type GetSapiV1RebateTaxQueryResponses = {
    /**
     * Rebate History
     */
    200: {
        status: string;
        type: string;
        code: string;
        data: {
            page: number;
            totalRecords: number;
            totalPageNum: number;
            data: Array<{
                asset: string;
                /**
                 * rebate type：1 is commission rebate，2 is referral kickback
                 */
                type: number;
                amount: string;
                updateTime: number;
            }>;
        };
    };
};

export type GetSapiV1RebateTaxQueryResponse = GetSapiV1RebateTaxQueryResponses[keyof GetSapiV1RebateTaxQueryResponses];

export type GetSapiV1NftHistoryTransactionsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
         */
        orderType: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 50, Max 50
         */
        limit?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/nft/history/transactions';
};

export type GetSapiV1NftHistoryTransactionsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1NftHistoryTransactionsError = GetSapiV1NftHistoryTransactionsErrors[keyof GetSapiV1NftHistoryTransactionsErrors];

export type GetSapiV1NftHistoryTransactionsResponses = {
    /**
     * NFT Transaction History
     */
    200: {
        total: number;
        list: Array<{
            /**
             * 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
             */
            orderNo: string;
            tokens: Array<{
                network: string;
                tokenId: string;
                contractAddress: string;
            }>;
            tradeTime: number;
            tradeAmount: string;
            tradeCurrency: string;
        }>;
    };
};

export type GetSapiV1NftHistoryTransactionsResponse = GetSapiV1NftHistoryTransactionsResponses[keyof GetSapiV1NftHistoryTransactionsResponses];

export type GetSapiV1NftHistoryDepositData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 50, Max 50
         */
        limit?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/nft/history/deposit';
};

export type GetSapiV1NftHistoryDepositErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1NftHistoryDepositError = GetSapiV1NftHistoryDepositErrors[keyof GetSapiV1NftHistoryDepositErrors];

export type GetSapiV1NftHistoryDepositResponses = {
    /**
     * NFT Deposit History
     */
    200: {
        total: number;
        list: Array<{
            network: string;
            txID: number | null;
            contractAdrress: string;
            tokenId: string;
            timestamp: number;
        }>;
    };
};

export type GetSapiV1NftHistoryDepositResponse = GetSapiV1NftHistoryDepositResponses[keyof GetSapiV1NftHistoryDepositResponses];

export type GetSapiV1NftHistoryWithdrawData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default 50, Max 50
         */
        limit?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/nft/history/withdraw';
};

export type GetSapiV1NftHistoryWithdrawErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1NftHistoryWithdrawError = GetSapiV1NftHistoryWithdrawErrors[keyof GetSapiV1NftHistoryWithdrawErrors];

export type GetSapiV1NftHistoryWithdrawResponses = {
    /**
     * NFT Withdraw History
     */
    200: {
        total: number;
        list: Array<{
            network: string;
            txID: string;
            contractAdrress: string;
            tokenId: string;
            timestamp: number;
            fee: number;
            feeAsset: string;
        }>;
    };
};

export type GetSapiV1NftHistoryWithdrawResponse = GetSapiV1NftHistoryWithdrawResponses[keyof GetSapiV1NftHistoryWithdrawResponses];

export type GetSapiV1NftUserGetAssetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Default 50, Max 50
         */
        limit?: number;
        /**
         * Default 1
         */
        page?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/nft/user/getAsset';
};

export type GetSapiV1NftUserGetAssetErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1NftUserGetAssetError = GetSapiV1NftUserGetAssetErrors[keyof GetSapiV1NftUserGetAssetErrors];

export type GetSapiV1NftUserGetAssetResponses = {
    /**
     * Asset Information
     */
    200: {
        total: number;
        list: Array<{
            network: string;
            contractAddress: string;
            tokenId: string;
        }>;
    };
};

export type GetSapiV1NftUserGetAssetResponse = GetSapiV1NftUserGetAssetResponses[keyof GetSapiV1NftUserGetAssetResponses];

export type PostSapiV1GiftcardCreateCodeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The coin type contained in the Binance Code
         */
        token: string;
        /**
         * The amount of the coin
         */
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/giftcard/createCode';
};

export type PostSapiV1GiftcardCreateCodeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1GiftcardCreateCodeError = PostSapiV1GiftcardCreateCodeErrors[keyof PostSapiV1GiftcardCreateCodeErrors];

export type PostSapiV1GiftcardCreateCodeResponses = {
    /**
     * Code creation
     */
    200: {
        code: string;
        message: string;
        data: {
            referenceNo: string;
            code: string;
            expiredTime: number;
        };
        success: boolean;
    };
};

export type PostSapiV1GiftcardCreateCodeResponse = PostSapiV1GiftcardCreateCodeResponses[keyof PostSapiV1GiftcardCreateCodeResponses];

export type PostSapiV1GiftcardRedeemCodeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Binance Code
         */
        code: string;
        /**
         * Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters).
         */
        externalUid?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/giftcard/redeemCode';
};

export type PostSapiV1GiftcardRedeemCodeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1GiftcardRedeemCodeError = PostSapiV1GiftcardRedeemCodeErrors[keyof PostSapiV1GiftcardRedeemCodeErrors];

export type PostSapiV1GiftcardRedeemCodeResponses = {
    /**
     * Redeemed Information
     */
    200: {
        code: string;
        message: string;
        data: {
            token: string;
            amount: string;
            referenceNo: string;
            identityNo: string;
        };
        success: boolean;
    };
};

export type PostSapiV1GiftcardRedeemCodeResponse = PostSapiV1GiftcardRedeemCodeResponses[keyof PostSapiV1GiftcardRedeemCodeResponses];

export type GetSapiV1GiftcardVerifyData = {
    body?: never;
    path?: never;
    query: {
        /**
         * reference number
         */
        referenceNo: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/giftcard/verify';
};

export type GetSapiV1GiftcardVerifyErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1GiftcardVerifyError = GetSapiV1GiftcardVerifyErrors[keyof GetSapiV1GiftcardVerifyErrors];

export type GetSapiV1GiftcardVerifyResponses = {
    /**
     * Code Verification
     */
    200: {
        code: string;
        message: string;
        data: {
            valid: boolean;
            token: string;
            amount: string;
        };
        success: boolean;
    };
};

export type GetSapiV1GiftcardVerifyResponse = GetSapiV1GiftcardVerifyResponses[keyof GetSapiV1GiftcardVerifyResponses];

export type GetSapiV1GiftcardCryptographyRsaPublicKeyData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/giftcard/cryptography/rsa-public-key';
};

export type GetSapiV1GiftcardCryptographyRsaPublicKeyErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1GiftcardCryptographyRsaPublicKeyError = GetSapiV1GiftcardCryptographyRsaPublicKeyErrors[keyof GetSapiV1GiftcardCryptographyRsaPublicKeyErrors];

export type GetSapiV1GiftcardCryptographyRsaPublicKeyResponses = {
    /**
     * RSA Public Key.
     */
    200: {
        code: string;
        message: string;
        data: string;
        success: boolean;
    };
};

export type GetSapiV1GiftcardCryptographyRsaPublicKeyResponse = GetSapiV1GiftcardCryptographyRsaPublicKeyResponses[keyof GetSapiV1GiftcardCryptographyRsaPublicKeyResponses];

export type PostSapiV1GiftcardBuyCodeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The token you want to pay, example BUSD
         */
        baseToken: string;
        /**
         * The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint.
         */
        faceToken: string;
        /**
         * The base token asset quantity, example  1.002
         */
        baseTokenAmount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/giftcard/buyCode';
};

export type PostSapiV1GiftcardBuyCodeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1GiftcardBuyCodeError = PostSapiV1GiftcardBuyCodeErrors[keyof PostSapiV1GiftcardBuyCodeErrors];

export type PostSapiV1GiftcardBuyCodeResponses = {
    /**
     * Code creation
     */
    200: {
        code: string;
        message: string;
        data: {
            referenceNo: string;
            code: string;
            expiredTime: number;
        };
        success: boolean;
    };
};

export type PostSapiV1GiftcardBuyCodeResponse = PostSapiV1GiftcardBuyCodeResponses[keyof PostSapiV1GiftcardBuyCodeResponses];

export type GetSapiV1GiftcardBuyCodeTokenLimitData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The token you want to pay, example BUSD
         */
        baseToken: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/giftcard/buyCode/token-limit';
};

export type GetSapiV1GiftcardBuyCodeTokenLimitErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1GiftcardBuyCodeTokenLimitError = GetSapiV1GiftcardBuyCodeTokenLimitErrors[keyof GetSapiV1GiftcardBuyCodeTokenLimitErrors];

export type GetSapiV1GiftcardBuyCodeTokenLimitResponses = {
    /**
     * Token limit
     */
    200: {
        code: string;
        message: string;
        data: {
            coin?: string;
            fromMin?: string;
            fromMax?: string;
        };
        success: boolean;
    };
};

export type GetSapiV1GiftcardBuyCodeTokenLimitResponse = GetSapiV1GiftcardBuyCodeTokenLimitResponses[keyof GetSapiV1GiftcardBuyCodeTokenLimitResponses];

export type GetSapiV1LendingAutoInvestTargetAssetListData = {
    body?: never;
    path?: never;
    query: {
        targetAsset?: string;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/target-asset/list';
};

export type GetSapiV1LendingAutoInvestTargetAssetListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestTargetAssetListError = GetSapiV1LendingAutoInvestTargetAssetListErrors[keyof GetSapiV1LendingAutoInvestTargetAssetListErrors];

export type GetSapiV1LendingAutoInvestTargetAssetListResponses = {
    /**
     * Target asset list
     */
    200: {
        targetAssets?: string;
        autoInvestAssetList?: Array<{
            targetAsset: string;
            roiAndDimensionTypeList: Array<{
                simulateRoi: string;
                dimensionValue: string;
                dimensionUnit: string;
            }>;
        }>;
    };
};

export type GetSapiV1LendingAutoInvestTargetAssetListResponse = GetSapiV1LendingAutoInvestTargetAssetListResponses[keyof GetSapiV1LendingAutoInvestTargetAssetListResponses];

export type GetSapiV1LendingAutoInvestTargetAssetRoiListData = {
    body?: never;
    path?: never;
    query: {
        targetAsset: string;
        hisRoiType: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/target-asset/roi/list';
};

export type GetSapiV1LendingAutoInvestTargetAssetRoiListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestTargetAssetRoiListError = GetSapiV1LendingAutoInvestTargetAssetRoiListErrors[keyof GetSapiV1LendingAutoInvestTargetAssetRoiListErrors];

export type GetSapiV1LendingAutoInvestTargetAssetRoiListResponses = {
    /**
     * Target asset list
     */
    200: Array<{
        date: string;
        simulateRoi: string;
    }>;
};

export type GetSapiV1LendingAutoInvestTargetAssetRoiListResponse = GetSapiV1LendingAutoInvestTargetAssetRoiListResponses[keyof GetSapiV1LendingAutoInvestTargetAssetRoiListResponses];

export type GetSapiV1LendingAutoInvestAllAssetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/all/asset';
};

export type GetSapiV1LendingAutoInvestAllAssetErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestAllAssetError = GetSapiV1LendingAutoInvestAllAssetErrors[keyof GetSapiV1LendingAutoInvestAllAssetErrors];

export type GetSapiV1LendingAutoInvestAllAssetResponses = {
    /**
     * Target asset
     */
    200: {
        targetAssets: Array<string>;
        sourceAssets: Array<string>;
    };
};

export type GetSapiV1LendingAutoInvestAllAssetResponse = GetSapiV1LendingAutoInvestAllAssetResponses[keyof GetSapiV1LendingAutoInvestAllAssetResponses];

export type GetSapiV1LendingAutoInvestSourceAssetListData = {
    body?: never;
    path?: never;
    query: {
        targetAsset?: string;
        indexId?: number;
        usageType: string;
        flexibleAllowedToUse?: boolean;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/source-asset/list';
};

export type GetSapiV1LendingAutoInvestSourceAssetListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestSourceAssetListError = GetSapiV1LendingAutoInvestSourceAssetListErrors[keyof GetSapiV1LendingAutoInvestSourceAssetListErrors];

export type GetSapiV1LendingAutoInvestSourceAssetListResponses = {
    /**
     * Asset list
     */
    200: {
        feeRate: string;
        sourceAssets: Array<{
            sourceAsset: string;
            assetMinAmount: string;
            assetMaxAmount: string;
            scale: string;
            flexibleAmount: string;
        }>;
    };
};

export type GetSapiV1LendingAutoInvestSourceAssetListResponse = GetSapiV1LendingAutoInvestSourceAssetListResponses[keyof GetSapiV1LendingAutoInvestSourceAssetListResponses];

export type PostSapiV1LendingAutoInvestPlanAddData = {
    body?: never;
    path?: never;
    query: {
        sourceType: 'MAIN_SITE' | 'TR';
        requestId?: string;
        planType: 'SINGLE' | 'PORTFOLIO' | 'INDEX';
        IndexId?: number;
        subscriptionAmount: number;
        subscriptionCycle: 'H1' | 'H4' | 'H8' | 'H12' | 'WEEKLY' | 'DAILY' | 'MONTHLY' | 'BI_WEEKLY';
        subscriptionStartDay?: number;
        subscriptionStartWeekday?: 'MON' | 'TUE' | 'WED' | 'THU' | 'FRI' | 'SAT' | 'SUN';
        subscriptionStartTime: number;
        sourceAsset: string;
        flexibleAllowedToUse?: boolean;
        details: Array<{
            targetAsset?: string;
            percentage?: number;
        }>;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/plan/add';
};

export type PostSapiV1LendingAutoInvestPlanAddErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LendingAutoInvestPlanAddError = PostSapiV1LendingAutoInvestPlanAddErrors[keyof PostSapiV1LendingAutoInvestPlanAddErrors];

export type PostSapiV1LendingAutoInvestPlanAddResponses = {
    /**
     * Plan result
     */
    200: {
        planId: number;
        nextExecutionDateTime: number;
    };
};

export type PostSapiV1LendingAutoInvestPlanAddResponse = PostSapiV1LendingAutoInvestPlanAddResponses[keyof PostSapiV1LendingAutoInvestPlanAddResponses];

export type PostSapiV1LendingAutoInvestPlanEditData = {
    body?: never;
    path?: never;
    query: {
        planId: number;
        subscriptionAmount: number;
        subscriptionCycle: 'H1' | 'H4' | 'H8' | 'H12' | 'WEEKLY' | 'DAILY' | 'MONTHLY' | 'BI_WEEKLY';
        subscriptionStartDay?: number;
        subscriptionStartWeekday?: 'MON' | 'TUE' | 'WED' | 'THU' | 'FRI' | 'SAT' | 'SUN';
        subscriptionStartTime: number;
        sourceAsset: string;
        flexibleAllowedToUse?: boolean;
        details?: Array<{
            targetAsset?: string;
            percentage?: number;
        }>;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/plan/edit';
};

export type PostSapiV1LendingAutoInvestPlanEditErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LendingAutoInvestPlanEditError = PostSapiV1LendingAutoInvestPlanEditErrors[keyof PostSapiV1LendingAutoInvestPlanEditErrors];

export type PostSapiV1LendingAutoInvestPlanEditResponses = {
    /**
     * Plan result
     */
    200: {
        planId: number;
        nextExecutionDateTime: number;
    };
};

export type PostSapiV1LendingAutoInvestPlanEditResponse = PostSapiV1LendingAutoInvestPlanEditResponses[keyof PostSapiV1LendingAutoInvestPlanEditResponses];

export type PostSapiV1LendingAutoInvestPlanEditStatusData = {
    body?: never;
    path?: never;
    query: {
        planId: number;
        status: 'ONGOING' | 'PAUSED' | 'REMOVED';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/plan/edit-status';
};

export type PostSapiV1LendingAutoInvestPlanEditStatusErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LendingAutoInvestPlanEditStatusError = PostSapiV1LendingAutoInvestPlanEditStatusErrors[keyof PostSapiV1LendingAutoInvestPlanEditStatusErrors];

export type PostSapiV1LendingAutoInvestPlanEditStatusResponses = {
    /**
     * Plan result
     */
    200: {
        planId: number;
        nextExecutionDateTime: number;
        status: string;
    };
};

export type PostSapiV1LendingAutoInvestPlanEditStatusResponse = PostSapiV1LendingAutoInvestPlanEditStatusResponses[keyof PostSapiV1LendingAutoInvestPlanEditStatusResponses];

export type GetSapiV1LendingAutoInvestPlanListData = {
    body?: never;
    path?: never;
    query: {
        planType: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/plan/list';
};

export type GetSapiV1LendingAutoInvestPlanListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestPlanListError = GetSapiV1LendingAutoInvestPlanListErrors[keyof GetSapiV1LendingAutoInvestPlanListErrors];

export type GetSapiV1LendingAutoInvestPlanListResponses = {
    /**
     * Plan result
     */
    200: {
        planValueInUSD: string;
        planValueInBTC: string;
        pnlInUSD: string;
        roi: string;
        plan: Array<{
            planId: number;
            planType: string;
            editAllowed: string;
            creationDateTime: number;
            firstExecutionDateTime: number;
            nextExecutionDateTime: number;
            status: string;
            lastUpdatedDateTime: number;
            targetAsset: string;
            totalTargetAmount: string;
            sourceAsset: string;
            totalInvestedInUSD: string;
            subscriptionAmount: string;
            subscriptionCycle: string;
            subscriptionStartDay: string;
            subscriptionStartWeekday: string;
            subscriptionStartTime: string;
            sourceWallet: string;
            flexibleAllowedToUse: string;
            planValueInUSD: string;
            pnlInUSD: string;
            roi: string;
        }>;
    };
};

export type GetSapiV1LendingAutoInvestPlanListResponse = GetSapiV1LendingAutoInvestPlanListResponses[keyof GetSapiV1LendingAutoInvestPlanListResponses];

export type GetSapiV1LendingAutoInvestPlanIdData = {
    body?: never;
    path?: never;
    query: {
        planId?: number;
        requestId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/plan/id';
};

export type GetSapiV1LendingAutoInvestPlanIdErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestPlanIdError = GetSapiV1LendingAutoInvestPlanIdErrors[keyof GetSapiV1LendingAutoInvestPlanIdErrors];

export type GetSapiV1LendingAutoInvestPlanIdResponses = {
    /**
     * Plan result
     */
    200: {
        planValueInUSD?: string;
        planValueInBTC?: string;
        pnlInUSD?: string;
        roi?: string;
        plan?: Array<{
            planId: number;
            planType: string;
            editAllowed: string;
            flexibleAllowedToUse: string;
            creationDateTime: number;
            firstExecutionDateTime: number;
            nextExecutionDateTime: number;
            status: string;
            targetAsset: string;
            sourceAsset: string;
            totalInvestedInUSD: string;
            planValueInUSD: string;
            pnlInUSD: string;
            roi: string;
            details: Array<{
                targetAsset: string;
                averagePriceInUSD: string;
                totalInvestedInUSD: string;
                purchasedAmount: string;
                purchasedAmountUnit: string;
                pnlInUSD: string;
                roi: string;
                percentage: string;
                assetStatus: string;
                availableAmount: string;
                availableAmountUnit: string;
                redeemedAmout: string;
                redeemedAmoutUnit: string;
                assetValueInUSD: string;
            }>;
        }>;
    };
};

export type GetSapiV1LendingAutoInvestPlanIdResponse = GetSapiV1LendingAutoInvestPlanIdResponses[keyof GetSapiV1LendingAutoInvestPlanIdResponses];

export type GetSapiV1LendingAutoInvestHistoryListData = {
    body?: never;
    path?: never;
    query: {
        planId?: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        targetAsset?: number;
        planType?: 'SINGLE' | 'PORTFOLIO' | 'INDEX' | 'ALL';
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/history/list';
};

export type GetSapiV1LendingAutoInvestHistoryListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestHistoryListError = GetSapiV1LendingAutoInvestHistoryListErrors[keyof GetSapiV1LendingAutoInvestHistoryListErrors];

export type GetSapiV1LendingAutoInvestHistoryListResponses = {
    /**
     * Plan result
     */
    200: Array<{
        id: number;
        targetAsset: string;
        planType: string;
        planName: string;
        planId: number;
        transactionDateTime: number;
        transactionStatus: string;
        failedType: string;
        sourceAsset: string;
        sourceAssetAmount: string;
        targetAssetAmount: string;
        sourceWallet: string;
        flexibleUsed: string;
        transactionFee: string;
        transactionFeeUnit: string;
        executionPrice: string;
        executionType: string;
        subscriptionCycle: string;
    }>;
};

export type GetSapiV1LendingAutoInvestHistoryListResponse = GetSapiV1LendingAutoInvestHistoryListResponses[keyof GetSapiV1LendingAutoInvestHistoryListResponses];

export type GetSapiV1LendingAutoInvestIndexInfoData = {
    body?: never;
    path?: never;
    query: {
        indexId: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/index/info';
};

export type GetSapiV1LendingAutoInvestIndexInfoErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestIndexInfoError = GetSapiV1LendingAutoInvestIndexInfoErrors[keyof GetSapiV1LendingAutoInvestIndexInfoErrors];

export type GetSapiV1LendingAutoInvestIndexInfoResponses = {
    /**
     * Index result
     */
    200: {
        indexId: number;
        indexName: string;
        status: string;
        assetAllocation: Array<{
            targetAsset: string;
            allocation: string;
        }>;
    };
};

export type GetSapiV1LendingAutoInvestIndexInfoResponse = GetSapiV1LendingAutoInvestIndexInfoResponses[keyof GetSapiV1LendingAutoInvestIndexInfoResponses];

export type GetSapiV1LendingAutoInvestIndexUserSummaryData = {
    body?: never;
    path?: never;
    query: {
        indexId: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/index/user-summary';
};

export type GetSapiV1LendingAutoInvestIndexUserSummaryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestIndexUserSummaryError = GetSapiV1LendingAutoInvestIndexUserSummaryErrors[keyof GetSapiV1LendingAutoInvestIndexUserSummaryErrors];

export type GetSapiV1LendingAutoInvestIndexUserSummaryResponses = {
    /**
     * Position Details
     */
    200: {
        indexId: number;
        totalInvestedInUSD: string;
        /**
         * current invest
         */
        currentInvestedInUSD: string;
        /**
         * PNL of the plan in USD based on current amount
         */
        pnlInUSD: string;
        /**
         * ROI of the plan based on current amount
         */
        roi: string;
        assetAllocation: Array<{
            /**
             * for pie chart
             */
            targetAsset: string;
            allocation: string;
        }>;
        details: Array<{
            targetAsset: string;
            /**
             * average price of the asset in USD
             */
            averagePriceInUSD: string;
            /**
             * total source asset invested for this target asset in equivilent of USD
             */
            totalInvestedInUSD: string;
            /**
             * current invest
             */
            currentInvestedInUSD: string;
            /**
             * purchased amount of target asset
             */
            purchasedAmount: string;
            /**
             * PNL denominated in USD
             */
            pnlInUSD: string;
            /**
             * ROI calculated in decimal
             */
            roi: string;
            /**
             * asset allocation in the plan. If it's single plan, then it's 100
             */
            percentage: string;
            availableAmount: string;
            redeemedAmount: string;
            assetValueInUSD: string;
        }>;
    };
};

export type GetSapiV1LendingAutoInvestIndexUserSummaryResponse = GetSapiV1LendingAutoInvestIndexUserSummaryResponses[keyof GetSapiV1LendingAutoInvestIndexUserSummaryResponses];

export type PostSapiV1LendingAutoInvestOneOffData = {
    body?: never;
    path?: never;
    query: {
        sourceType: string;
        requestId?: string;
        subscriptionAmount: number;
        sourceAsset: string;
        flexibleAllowedToUse?: boolean;
        planId?: number;
        indexId?: number;
        details?: Array<{
            targetAsset?: string;
            percentage?: number;
        }>;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/one-off';
};

export type PostSapiV1LendingAutoInvestOneOffErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LendingAutoInvestOneOffError = PostSapiV1LendingAutoInvestOneOffErrors[keyof PostSapiV1LendingAutoInvestOneOffErrors];

export type PostSapiV1LendingAutoInvestOneOffResponses = {
    /**
     * transaction result
     */
    200: {
        transactionId: number;
        waitSecond: number;
    };
};

export type PostSapiV1LendingAutoInvestOneOffResponse = PostSapiV1LendingAutoInvestOneOffResponses[keyof PostSapiV1LendingAutoInvestOneOffResponses];

export type GetSapiV1LendingAutoInvestOneOffStatusData = {
    body?: never;
    path?: never;
    query: {
        transactionId: number;
        requestId?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/one-off/status';
};

export type GetSapiV1LendingAutoInvestOneOffStatusErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestOneOffStatusError = GetSapiV1LendingAutoInvestOneOffStatusErrors[keyof GetSapiV1LendingAutoInvestOneOffStatusErrors];

export type GetSapiV1LendingAutoInvestOneOffStatusResponses = {
    /**
     * transaction result
     */
    200: {
        transactionId: number;
        status: string;
    };
};

export type GetSapiV1LendingAutoInvestOneOffStatusResponse = GetSapiV1LendingAutoInvestOneOffStatusResponses[keyof GetSapiV1LendingAutoInvestOneOffStatusResponses];

export type PostSapiV1LendingAutoInvestRedeemData = {
    body?: never;
    path?: never;
    query: {
        /**
         * PORTFOLIO plan's Id
         */
        indexId: number;
        /**
         * sourceType + unique, transactionId and requestId cannot be empty at the same time
         */
        requestId?: string;
        /**
         * user redeem percentage,10/20/100.
         */
        redemptionPercentage: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/redeem';
};

export type PostSapiV1LendingAutoInvestRedeemErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1LendingAutoInvestRedeemError = PostSapiV1LendingAutoInvestRedeemErrors[keyof PostSapiV1LendingAutoInvestRedeemErrors];

export type PostSapiV1LendingAutoInvestRedeemResponses = {
    /**
     * Redemption result
     */
    200: {
        redemptionId: number;
    };
};

export type PostSapiV1LendingAutoInvestRedeemResponse = PostSapiV1LendingAutoInvestRedeemResponses[keyof PostSapiV1LendingAutoInvestRedeemResponses];

export type GetSapiV1LendingAutoInvestRedeemHistoryData = {
    body?: never;
    path?: never;
    query: {
        requestId: number;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        asset?: string;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/redeem/history';
};

export type GetSapiV1LendingAutoInvestRedeemHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestRedeemHistoryError = GetSapiV1LendingAutoInvestRedeemHistoryErrors[keyof GetSapiV1LendingAutoInvestRedeemHistoryErrors];

export type GetSapiV1LendingAutoInvestRedeemHistoryResponses = {
    /**
     * Redemption history
     */
    200: Array<{
        indexId: number;
        indexName: string;
        redemptionId: number;
        status: string;
        asset: string;
        amount: string;
        redemptionDateTime: number;
        transactionFee: string;
        transactionFeeUnit: string;
    }>;
};

export type GetSapiV1LendingAutoInvestRedeemHistoryResponse = GetSapiV1LendingAutoInvestRedeemHistoryResponses[keyof GetSapiV1LendingAutoInvestRedeemHistoryResponses];

export type GetSapiV1LendingAutoInvestRebalanceHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/lending/auto-invest/rebalance/history';
};

export type GetSapiV1LendingAutoInvestRebalanceHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1LendingAutoInvestRebalanceHistoryError = GetSapiV1LendingAutoInvestRebalanceHistoryErrors[keyof GetSapiV1LendingAutoInvestRebalanceHistoryErrors];

export type GetSapiV1LendingAutoInvestRebalanceHistoryResponses = {
    /**
     * Rebalance Details
     */
    200: Array<{
        indexId: number;
        indexName: string;
        rebalanceId: number;
        status: string;
        rebalanceFee: string;
        rebalanceFeeUnit: string;
        transactionDetails: Array<{
            asset: string;
            transactionDateTime: number;
            rebalanceDirection: string;
            rebalanceAmount: string;
        }>;
    }>;
};

export type GetSapiV1LendingAutoInvestRebalanceHistoryResponse = GetSapiV1LendingAutoInvestRebalanceHistoryResponses[keyof GetSapiV1LendingAutoInvestRebalanceHistoryResponses];

export type PostSapiV2EthStakingEthStakeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Amount in ETH, limit 4 decimals
         */
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/eth-staking/eth/stake';
};

export type PostSapiV2EthStakingEthStakeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV2EthStakingEthStakeError = PostSapiV2EthStakingEthStakeErrors[keyof PostSapiV2EthStakingEthStakeErrors];

export type PostSapiV2EthStakingEthStakeResponses = {
    /**
     * Subscribed WBETH
     */
    200: {
        success: boolean;
        wbethAmount: string;
        /**
         * ETH amount per 1 WBETH
         */
        conversionRatio: string;
    };
};

export type PostSapiV2EthStakingEthStakeResponse = PostSapiV2EthStakingEthStakeResponses[keyof PostSapiV2EthStakingEthStakeResponses];

export type PostSapiV1EthStakingEthRedeemData = {
    body?: never;
    path?: never;
    query: {
        /**
         * WBETH or BETH, default to BETH
         */
        asset?: string;
        /**
         * Amount in BETH, limit 8 decimals
         */
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/eth/redeem';
};

export type PostSapiV1EthStakingEthRedeemErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1EthStakingEthRedeemError = PostSapiV1EthStakingEthRedeemErrors[keyof PostSapiV1EthStakingEthRedeemErrors];

export type PostSapiV1EthStakingEthRedeemResponses = {
    /**
     * Returned ETH
     */
    200: {
        success: boolean;
        arrivalTime: number;
        ethAmount: string;
        conversionRatio: string;
    };
};

export type PostSapiV1EthStakingEthRedeemResponse = PostSapiV1EthStakingEthRedeemResponses[keyof PostSapiV1EthStakingEthRedeemResponses];

export type GetSapiV1EthStakingEthHistoryStakingHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/eth/history/stakingHistory';
};

export type GetSapiV1EthStakingEthHistoryStakingHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1EthStakingEthHistoryStakingHistoryError = GetSapiV1EthStakingEthHistoryStakingHistoryErrors[keyof GetSapiV1EthStakingEthHistoryStakingHistoryErrors];

export type GetSapiV1EthStakingEthHistoryStakingHistoryResponses = {
    /**
     * ETH staking history
     */
    200: {
        rows: Array<{
            time: number;
            asset: string;
            amount: string;
            /**
             * PENDING, SUCCESS, FAILED
             */
            status: string;
            distributeAmount: string;
            conversionRatio: string;
        }>;
        total: number;
    };
};

export type GetSapiV1EthStakingEthHistoryStakingHistoryResponse = GetSapiV1EthStakingEthHistoryStakingHistoryResponses[keyof GetSapiV1EthStakingEthHistoryStakingHistoryResponses];

export type GetSapiV1EthStakingEthHistoryRedemptionHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/eth/history/redemptionHistory';
};

export type GetSapiV1EthStakingEthHistoryRedemptionHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1EthStakingEthHistoryRedemptionHistoryError = GetSapiV1EthStakingEthHistoryRedemptionHistoryErrors[keyof GetSapiV1EthStakingEthHistoryRedemptionHistoryErrors];

export type GetSapiV1EthStakingEthHistoryRedemptionHistoryResponses = {
    /**
     * ETH redemption history
     */
    200: {
        rows: Array<{
            time: number;
            arrivalTime: number;
            asset: string;
            amount: string;
            /**
             * PENDING, SUCCESS, FAILED
             */
            status: string;
            distributeAsset: string;
            distributeAmount: string;
            conversionRatio: string;
        }>;
        total: number;
    };
};

export type GetSapiV1EthStakingEthHistoryRedemptionHistoryResponse = GetSapiV1EthStakingEthHistoryRedemptionHistoryResponses[keyof GetSapiV1EthStakingEthHistoryRedemptionHistoryResponses];

export type GetSapiV1EthStakingEthHistoryRewardsHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/eth/history/rewardsHistory';
};

export type GetSapiV1EthStakingEthHistoryRewardsHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1EthStakingEthHistoryRewardsHistoryError = GetSapiV1EthStakingEthHistoryRewardsHistoryErrors[keyof GetSapiV1EthStakingEthHistoryRewardsHistoryErrors];

export type GetSapiV1EthStakingEthHistoryRewardsHistoryResponses = {
    /**
     * BETH rewards distribution history
     */
    200: {
        rows: Array<{
            time: number;
            asset: string;
            /**
             * BETH holding balance
             */
            holding: string;
            /**
             * Distributed rewards
             */
            amount: string;
            /**
             * 0.5 means 50% here
             */
            annualPercentageRate: string;
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1EthStakingEthHistoryRewardsHistoryResponse = GetSapiV1EthStakingEthHistoryRewardsHistoryResponses[keyof GetSapiV1EthStakingEthHistoryRewardsHistoryResponses];

export type GetSapiV1EthStakingEthQuotaData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/eth/quota';
};

export type GetSapiV1EthStakingEthQuotaErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1EthStakingEthQuotaError = GetSapiV1EthStakingEthQuotaErrors[keyof GetSapiV1EthStakingEthQuotaErrors];

export type GetSapiV1EthStakingEthQuotaResponses = {
    /**
     * Eth staking quota
     */
    200: {
        /**
         * Show min(Daily available limit, total personal staking quota)
         */
        leftStakingPersonalQuota: string;
        /**
         * Show min(Daily personal redeem quota, total redemption limit)
         */
        leftRedemptionPersonalQuota: string;
    };
};

export type GetSapiV1EthStakingEthQuotaResponse = GetSapiV1EthStakingEthQuotaResponses[keyof GetSapiV1EthStakingEthQuotaResponses];

export type GetSapiV1EthStakingEthHistoryRateHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/eth/history/rateHistory';
};

export type GetSapiV1EthStakingEthHistoryRateHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1EthStakingEthHistoryRateHistoryError = GetSapiV1EthStakingEthHistoryRateHistoryErrors[keyof GetSapiV1EthStakingEthHistoryRateHistoryErrors];

export type GetSapiV1EthStakingEthHistoryRateHistoryResponses = {
    /**
     * WBETH Rate History
     */
    200: {
        rows: Array<{
            /**
             * BETH APR
             */
            annualPercentageRate: string;
            /**
             * BETH value per 1 WBETH
             */
            exchangeRate: string;
            time: number;
        }>;
        total: number;
    };
};

export type GetSapiV1EthStakingEthHistoryRateHistoryResponse = GetSapiV1EthStakingEthHistoryRateHistoryResponses[keyof GetSapiV1EthStakingEthHistoryRateHistoryResponses];

export type GetSapiV2EthStakingAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v2/eth-staking/account';
};

export type GetSapiV2EthStakingAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV2EthStakingAccountError = GetSapiV2EthStakingAccountErrors[keyof GetSapiV2EthStakingAccountErrors];

export type GetSapiV2EthStakingAccountResponses = {
    /**
     * ETH Staking account
     */
    200: {
        holdingInETH: string;
        holdings: {
            wbethAmount: string;
            bethAmount: string;
        };
        thirtyDaysProfitInETH: string;
        profit: {
            amountFromWBETH: string;
            amountFromBETH: string;
        };
    };
};

export type GetSapiV2EthStakingAccountResponse = GetSapiV2EthStakingAccountResponses[keyof GetSapiV2EthStakingAccountResponses];

export type PostSapiV1EthStakingWbethWrapData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Amount in BETH, limit 4 decimals
         */
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/wbeth/wrap';
};

export type PostSapiV1EthStakingWbethWrapErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1EthStakingWbethWrapError = PostSapiV1EthStakingWbethWrapErrors[keyof PostSapiV1EthStakingWbethWrapErrors];

export type PostSapiV1EthStakingWbethWrapResponses = {
    /**
     * Wrap BETH
     */
    200: {
        success: boolean;
        wbethAmount: string;
        exchangeRate: string;
    };
};

export type PostSapiV1EthStakingWbethWrapResponse = PostSapiV1EthStakingWbethWrapResponses[keyof PostSapiV1EthStakingWbethWrapResponses];

export type GetSapiV1EthStakingWbethHistoryWrapHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/wbeth/history/wrapHistory';
};

export type GetSapiV1EthStakingWbethHistoryWrapHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1EthStakingWbethHistoryWrapHistoryError = GetSapiV1EthStakingWbethHistoryWrapHistoryErrors[keyof GetSapiV1EthStakingWbethHistoryWrapHistoryErrors];

export type GetSapiV1EthStakingWbethHistoryWrapHistoryResponses = {
    /**
     * WBETH wrap history
     */
    200: {
        rows: Array<{
            time: number;
            fromAsset: string;
            fromAmount: string;
            toAsset: string;
            toAmount: string;
            /**
             * BETH amount per 1 WBETH
             */
            exchangeRate: string;
            /**
             * PENDING, SUCCESS, FAILED
             */
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1EthStakingWbethHistoryWrapHistoryResponse = GetSapiV1EthStakingWbethHistoryWrapHistoryResponses[keyof GetSapiV1EthStakingWbethHistoryWrapHistoryResponses];

export type GetSapiV1EthStakingWbethHistoryUnwrapHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/wbeth/history/unwrapHistory';
};

export type GetSapiV1EthStakingWbethHistoryUnwrapHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1EthStakingWbethHistoryUnwrapHistoryError = GetSapiV1EthStakingWbethHistoryUnwrapHistoryErrors[keyof GetSapiV1EthStakingWbethHistoryUnwrapHistoryErrors];

export type GetSapiV1EthStakingWbethHistoryUnwrapHistoryResponses = {
    /**
     * WBETH unwrap history
     */
    200: {
        rows: Array<{
            time: number;
            fromAsset: string;
            fromAmount: string;
            toAsset: string;
            toAmount: string;
            /**
             * BETH amount per 1 WBETH
             */
            exchangeRate: string;
            /**
             * PENDING, SUCCESS, FAILED
             */
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1EthStakingWbethHistoryUnwrapHistoryResponse = GetSapiV1EthStakingWbethHistoryUnwrapHistoryResponses[keyof GetSapiV1EthStakingWbethHistoryUnwrapHistoryResponses];

export type GetSapiV1EthStakingEthHistoryWbethRewardsHistoryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/eth-staking/eth/history/wbethRewardsHistory';
};

export type GetSapiV1EthStakingEthHistoryWbethRewardsHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1EthStakingEthHistoryWbethRewardsHistoryError = GetSapiV1EthStakingEthHistoryWbethRewardsHistoryErrors[keyof GetSapiV1EthStakingEthHistoryWbethRewardsHistoryErrors];

export type GetSapiV1EthStakingEthHistoryWbethRewardsHistoryResponses = {
    /**
     * WBETH rewards history
     */
    200: {
        estRewardsInETH: string;
        rows: Array<{
            time: number;
            /**
             * Estimated rewards accrued within WBETH
             */
            amountInETH: string;
            /**
             * WBETH holding balance
             */
            holding: string;
            holdingInETH: string;
            annualPercentageRate: string;
        }>;
        total: number;
    };
};

export type GetSapiV1EthStakingEthHistoryWbethRewardsHistoryResponse = GetSapiV1EthStakingEthHistoryWbethRewardsHistoryResponses[keyof GetSapiV1EthStakingEthHistoryWbethRewardsHistoryResponses];

export type GetSapiV1CopyTradingFuturesUserStatusData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/copyTrading/futures/userStatus';
};

export type GetSapiV1CopyTradingFuturesUserStatusErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CopyTradingFuturesUserStatusError = GetSapiV1CopyTradingFuturesUserStatusErrors[keyof GetSapiV1CopyTradingFuturesUserStatusErrors];

export type GetSapiV1CopyTradingFuturesUserStatusResponses = {
    /**
     * Futures Lead Trader Status
     */
    200: {
        code: string;
        message: string;
        data: {
            isLeadTrader: boolean;
            time: number;
        };
        success: boolean;
    };
};

export type GetSapiV1CopyTradingFuturesUserStatusResponse = GetSapiV1CopyTradingFuturesUserStatusResponses[keyof GetSapiV1CopyTradingFuturesUserStatusResponses];

export type GetSapiV1CopyTradingFuturesLeadSymbolData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/copyTrading/futures/leadSymbol';
};

export type GetSapiV1CopyTradingFuturesLeadSymbolErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1CopyTradingFuturesLeadSymbolError = GetSapiV1CopyTradingFuturesLeadSymbolErrors[keyof GetSapiV1CopyTradingFuturesLeadSymbolErrors];

export type GetSapiV1CopyTradingFuturesLeadSymbolResponses = {
    /**
     * Futures Lead Trading Symbol Whitelist
     */
    200: {
        code: string;
        message: string;
        data: {
            symbol: string;
            baseAsset: string;
            quoteAsset: string;
        };
    };
};

export type GetSapiV1CopyTradingFuturesLeadSymbolResponse = GetSapiV1CopyTradingFuturesLeadSymbolResponses[keyof GetSapiV1CopyTradingFuturesLeadSymbolResponses];

export type GetSapiV1SimpleEarnFlexibleListData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/list';
};

export type GetSapiV1SimpleEarnFlexibleListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnFlexibleListError = GetSapiV1SimpleEarnFlexibleListErrors[keyof GetSapiV1SimpleEarnFlexibleListErrors];

export type GetSapiV1SimpleEarnFlexibleListResponses = {
    /**
     * Simple Earn Flexible Product List
     */
    200: {
        rows: Array<{
            asset: string;
            latestAnnualPercentageRate: string;
            tierAnnualPercentageRate: {
                '0-5BTC': number;
                '5-10BTC': number;
            };
            airDropPercentageRate: string;
            canPurchase: boolean;
            canRedeem: boolean;
            isSoldOut: boolean;
            hot: boolean;
            minPurchaseAmount: string;
            productId: string;
            subscriptionStartTime: string;
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnFlexibleListResponse = GetSapiV1SimpleEarnFlexibleListResponses[keyof GetSapiV1SimpleEarnFlexibleListResponses];

export type GetSapiV1SimpleEarnLockedListData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/list';
};

export type GetSapiV1SimpleEarnLockedListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnLockedListError = GetSapiV1SimpleEarnLockedListErrors[keyof GetSapiV1SimpleEarnLockedListErrors];

export type GetSapiV1SimpleEarnLockedListResponses = {
    /**
     * Simple Earn Locked Product List
     */
    200: {
        rows: Array<{
            projectId: string;
            detail: {
                asset: string;
                rewardAsset: string;
                duration: number;
                renewable: boolean;
                isSoldOut: boolean;
                apr: string;
                status: string;
                subscriptionStartTime: string;
                extraRewardAsset: string;
                extraRewardAPR: string;
            };
            quota: {
                totalPersonalQuota: string;
                minimum: string;
            };
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnLockedListResponse = GetSapiV1SimpleEarnLockedListResponses[keyof GetSapiV1SimpleEarnLockedListResponses];

export type PostSapiV1SimpleEarnFlexibleSubscribeData = {
    body?: never;
    path?: never;
    query: {
        productId: string;
        amount: number;
        /**
         * true or false, default true.
         */
        autoSubscribe?: boolean;
        /**
         * SPOT,FUND,ALL, default SPOT
         */
        sourceAccount?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/subscribe';
};

export type PostSapiV1SimpleEarnFlexibleSubscribeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SimpleEarnFlexibleSubscribeError = PostSapiV1SimpleEarnFlexibleSubscribeErrors[keyof PostSapiV1SimpleEarnFlexibleSubscribeErrors];

export type PostSapiV1SimpleEarnFlexibleSubscribeResponses = {
    /**
     * Flexible Product Subscription Response
     */
    200: {
        purchaseId: number;
        success: boolean;
    };
};

export type PostSapiV1SimpleEarnFlexibleSubscribeResponse = PostSapiV1SimpleEarnFlexibleSubscribeResponses[keyof PostSapiV1SimpleEarnFlexibleSubscribeResponses];

export type PostSapiV1SimpleEarnLockedSubscribeData = {
    body?: never;
    path?: never;
    query: {
        projectId: string;
        amount: number;
        /**
         * true or false, default true.
         */
        autoSubscribe?: boolean;
        /**
         * SPOT,FUND,ALL, default SPOT
         */
        sourceAccount?: string;
        /**
         * SPOT,FLEXIBLE, default FLEXIBLE
         */
        redeemTo?: 'SPOT' | 'FLEXIBLE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/subscribe';
};

export type PostSapiV1SimpleEarnLockedSubscribeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SimpleEarnLockedSubscribeError = PostSapiV1SimpleEarnLockedSubscribeErrors[keyof PostSapiV1SimpleEarnLockedSubscribeErrors];

export type PostSapiV1SimpleEarnLockedSubscribeResponses = {
    /**
     * Locked Product Subscription Response
     */
    200: {
        purchaseId: number;
        positionId: string;
        success: boolean;
    };
};

export type PostSapiV1SimpleEarnLockedSubscribeResponse = PostSapiV1SimpleEarnLockedSubscribeResponses[keyof PostSapiV1SimpleEarnLockedSubscribeResponses];

export type PostSapiV1SimpleEarnFlexibleRedeemData = {
    body?: never;
    path?: never;
    query: {
        productId: string;
        /**
         * true or false, default to false
         */
        redeemAll?: boolean;
        /**
         * if redeemAll is false, amount is mandatory
         */
        amount?: number;
        /**
         * SPOT,FUND,ALL, default SPOT
         */
        destAccount?: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/redeem';
};

export type PostSapiV1SimpleEarnFlexibleRedeemErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SimpleEarnFlexibleRedeemError = PostSapiV1SimpleEarnFlexibleRedeemErrors[keyof PostSapiV1SimpleEarnFlexibleRedeemErrors];

export type PostSapiV1SimpleEarnFlexibleRedeemResponses = {
    /**
     * Redeem Flexible Product
     */
    200: {
        redeemId: number;
        success: boolean;
    };
};

export type PostSapiV1SimpleEarnFlexibleRedeemResponse = PostSapiV1SimpleEarnFlexibleRedeemResponses[keyof PostSapiV1SimpleEarnFlexibleRedeemResponses];

export type PostSapiV1SimpleEarnLockedRedeemData = {
    body?: never;
    path?: never;
    query: {
        /**
         * 1234
         */
        positionId: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/redeem';
};

export type PostSapiV1SimpleEarnLockedRedeemErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SimpleEarnLockedRedeemError = PostSapiV1SimpleEarnLockedRedeemErrors[keyof PostSapiV1SimpleEarnLockedRedeemErrors];

export type PostSapiV1SimpleEarnLockedRedeemResponses = {
    /**
     * Redeem Locked Product
     */
    200: {
        redeemId: number;
        success: boolean;
    };
};

export type PostSapiV1SimpleEarnLockedRedeemResponse = PostSapiV1SimpleEarnLockedRedeemResponses[keyof PostSapiV1SimpleEarnLockedRedeemResponses];

export type GetSapiV1SimpleEarnFlexiblePositionData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        productId?: string;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/position';
};

export type GetSapiV1SimpleEarnFlexiblePositionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnFlexiblePositionError = GetSapiV1SimpleEarnFlexiblePositionErrors[keyof GetSapiV1SimpleEarnFlexiblePositionErrors];

export type GetSapiV1SimpleEarnFlexiblePositionResponses = {
    /**
     * Flexible Product Position
     */
    200: {
        rows: Array<{
            totalAmount: string;
            tierAnnualPercentageRate: {
                '0-5BTC': number;
                '5-10BTC': number;
            };
            latestAnnualPercentageRate: string;
            yesterdayAirdropPercentageRate: string;
            asset: string;
            airDropAsset: string;
            canRedeem: boolean;
            collateralAmount: string;
            productId: string;
            yesterdayRealTimeRewards: string;
            cumulativeBonusRewards: string;
            cumulativeRealTimeRewards: string;
            cumulativeTotalRewards: string;
            autoSubscribe: boolean;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnFlexiblePositionResponse = GetSapiV1SimpleEarnFlexiblePositionResponses[keyof GetSapiV1SimpleEarnFlexiblePositionResponses];

export type GetSapiV1SimpleEarnLockedPositionData = {
    body?: never;
    path?: never;
    query: {
        asset?: string;
        positionId?: string;
        projectId?: string;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/position';
};

export type GetSapiV1SimpleEarnLockedPositionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnLockedPositionError = GetSapiV1SimpleEarnLockedPositionErrors[keyof GetSapiV1SimpleEarnLockedPositionErrors];

export type GetSapiV1SimpleEarnLockedPositionResponses = {
    /**
     * Locked Product Position
     */
    200: {
        rows: Array<{
            positionId: string;
            parentPositionId: string;
            projectId: string;
            asset: string;
            amount: string;
            purchaseTime: string;
            duration: string;
            accrualDays: string;
            rewardAsset: string;
            APY: string;
            /**
             * Earned amount
             */
            rewardAmt: string;
            /**
             * Rewards assets of extra staking type
             */
            extraRewardAsset: string;
            /**
             * APR of extra staking type
             */
            extraRewardAPR: string;
            /**
             * Rewards of extra staking type, distribute when order expires
             */
            estExtraRewardAmt: string;
            /**
             * Next estimated rewards payment
             */
            nextPay: string;
            /**
             * Next rewards payment date
             */
            nextPayDate: string;
            /**
             * Payment cycle
             */
            payPeriod: string;
            /**
             * Early redemption amount
             */
            redeemAmountEarly: string;
            /**
             * Rewards accrual end date
             */
            rewardsEndDate: string;
            /**
             * Redemption arrival time
             */
            deliverDate: string;
            /**
             * Redemption interval
             */
            redeemPeriod: string;
            /**
             * Amount under redemption
             */
            redeemingAmt: string;
            /**
             * Redeem to Flexible product or Spot wallet
             */
            redeemTo: string;
            /**
             * Arrival time of partial redemption amount of order
             */
            partialAmtDeliverDate: string;
            /**
             * When it is true, early redemption can be operated
             */
            canRedeemEarly: boolean;
            /**
             * When it is true, fast redemption can be operated
             */
            canFastRedemption: boolean;
            /**
             * When it is true, auto staking can be operated
             */
            autoSubscribe: boolean;
            /**
             * Order type is auto subscribe or normal
             */
            type: string;
            status: string;
            canReStake: boolean;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnLockedPositionResponse = GetSapiV1SimpleEarnLockedPositionResponses[keyof GetSapiV1SimpleEarnLockedPositionResponses];

export type GetSapiV1SimpleEarnAccountData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/account';
};

export type GetSapiV1SimpleEarnAccountErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnAccountError = GetSapiV1SimpleEarnAccountErrors[keyof GetSapiV1SimpleEarnAccountErrors];

export type GetSapiV1SimpleEarnAccountResponses = {
    /**
     * Account Information
     */
    200: {
        totalAmountInBTC: string;
        totalAmountInUSDT: string;
        totalFlexibleAmountInBTC: string;
        totalFlexibleAmountInUSDT: string;
        totalLockedInBTC: string;
        totalLockedInUSDT: string;
    };
};

export type GetSapiV1SimpleEarnAccountResponse = GetSapiV1SimpleEarnAccountResponses[keyof GetSapiV1SimpleEarnAccountResponses];

export type GetSapiV1SimpleEarnFlexibleHistorySubscriptionRecordData = {
    body?: never;
    path?: never;
    query: {
        productId?: string;
        purchaseId?: string;
        asset?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/history/subscriptionRecord';
};

export type GetSapiV1SimpleEarnFlexibleHistorySubscriptionRecordErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnFlexibleHistorySubscriptionRecordError = GetSapiV1SimpleEarnFlexibleHistorySubscriptionRecordErrors[keyof GetSapiV1SimpleEarnFlexibleHistorySubscriptionRecordErrors];

export type GetSapiV1SimpleEarnFlexibleHistorySubscriptionRecordResponses = {
    /**
     * Flexible Product Position
     */
    200: {
        rows: Array<{
            amount: string;
            asset: string;
            time: number;
            purchaseId: number;
            productId: string;
            /**
             * AUTO for auto subscribe, NORMAL for normal subscription, CONVERT for Locked to Flexible, LOAN for flexible loan collateral, AI for Auto Invest subscribe, TRANSFER for Locked Savings to Flexible
             */
            type: string;
            /**
             * SPOT, FUNDING, SPOTANDFUNDING
             */
            sourceAccount: string;
            /**
             * Display if sourceAccount is SPOTANDFUNDING
             */
            amtFromSpot: string;
            /**
             * Display if sourceAccount is SPOTANDFUNDING
             */
            amtFromFunding: string;
            /**
             * PURCHASING/SUCCESS/FAILED
             */
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnFlexibleHistorySubscriptionRecordResponse = GetSapiV1SimpleEarnFlexibleHistorySubscriptionRecordResponses[keyof GetSapiV1SimpleEarnFlexibleHistorySubscriptionRecordResponses];

export type GetSapiV1SimpleEarnLockedHistorySubscriptionRecordData = {
    body?: never;
    path?: never;
    query: {
        purchaseId?: string;
        asset?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/history/subscriptionRecord';
};

export type GetSapiV1SimpleEarnLockedHistorySubscriptionRecordErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnLockedHistorySubscriptionRecordError = GetSapiV1SimpleEarnLockedHistorySubscriptionRecordErrors[keyof GetSapiV1SimpleEarnLockedHistorySubscriptionRecordErrors];

export type GetSapiV1SimpleEarnLockedHistorySubscriptionRecordResponses = {
    /**
     * Locked Subscription Record
     */
    200: {
        rows: Array<{
            positionId: string;
            purchaseId: number;
            projectId: string;
            time: number;
            asset: string;
            amount: string;
            lockPeriod: string;
            /**
             * NORMAL for normal subscription, AUTO for auto-subscription order, ACTIVITY for activity order, TRIAL for trial fund order, RESTAKE for restake order
             */
            type: string;
            /**
             * SPOT, FUNDING, SPOTANDFUNDING
             */
            sourceAccount: string;
            /**
             * Display if sourceAccount is SPOTANDFUNDING
             */
            amtFromSpot: string;
            /**
             * Display if sourceAccount is SPOTANDFUNDING
             */
            amtFromFunding: string;
            /**
             * PURCHASING/SUCCESS/FAILED
             */
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnLockedHistorySubscriptionRecordResponse = GetSapiV1SimpleEarnLockedHistorySubscriptionRecordResponses[keyof GetSapiV1SimpleEarnLockedHistorySubscriptionRecordResponses];

export type GetSapiV1SimpleEarnFlexibleHistoryRedemptionRecordData = {
    body?: never;
    path?: never;
    query?: {
        productId?: string;
        redeemId?: string;
        asset?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
    };
    url: '/sapi/v1/simple-earn/flexible/history/redemptionRecord';
};

export type GetSapiV1SimpleEarnFlexibleHistoryRedemptionRecordErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnFlexibleHistoryRedemptionRecordError = GetSapiV1SimpleEarnFlexibleHistoryRedemptionRecordErrors[keyof GetSapiV1SimpleEarnFlexibleHistoryRedemptionRecordErrors];

export type GetSapiV1SimpleEarnFlexibleHistoryRedemptionRecordResponses = {
    /**
     * Flexible Redemption Record
     */
    200: {
        rows: Array<{
            amount: string;
            asset: string;
            time: number;
            projectId: string;
            redeemId: number;
            /**
             * SPOT, FUNDING
             */
            destAccount: string;
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnFlexibleHistoryRedemptionRecordResponse = GetSapiV1SimpleEarnFlexibleHistoryRedemptionRecordResponses[keyof GetSapiV1SimpleEarnFlexibleHistoryRedemptionRecordResponses];

export type GetSapiV1SimpleEarnLockedHistoryRedemptionRecordData = {
    body?: never;
    path?: never;
    query: {
        positionId?: string;
        redeemId?: string;
        asset?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/history/redemptionRecord';
};

export type GetSapiV1SimpleEarnLockedHistoryRedemptionRecordErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnLockedHistoryRedemptionRecordError = GetSapiV1SimpleEarnLockedHistoryRedemptionRecordErrors[keyof GetSapiV1SimpleEarnLockedHistoryRedemptionRecordErrors];

export type GetSapiV1SimpleEarnLockedHistoryRedemptionRecordResponses = {
    /**
     * Locked Redemption Record
     */
    200: {
        rows: Array<{
            positionId: string;
            redeemId: number;
            time: number;
            asset: string;
            lockPeriod: string;
            amount: string;
            originalAmount: string;
            /**
             * MATURE for redeem to Spot Wallet, NEW_TRANSFERRED for redeem to Flexible product, AHEAD for early redemption
             */
            type: string;
            deliverDate: string;
            /**
             * Loss of profit on early redemption
             */
            lossAmount: string;
            isComplete: boolean;
            rewardAsset: string;
            rewardAmt: string;
            extraRewardAsset: string;
            estExtraRewardAmt: string;
            status: string;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnLockedHistoryRedemptionRecordResponse = GetSapiV1SimpleEarnLockedHistoryRedemptionRecordResponses[keyof GetSapiV1SimpleEarnLockedHistoryRedemptionRecordResponses];

export type GetSapiV1SimpleEarnFlexibleHistoryRewardsRecordData = {
    body?: never;
    path?: never;
    query: {
        productId?: string;
        asset?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * "BONUS", "REALTIME", "REWARDS"
         */
        type: string;
    };
    url: '/sapi/v1/simple-earn/flexible/history/rewardsRecord';
};

export type GetSapiV1SimpleEarnFlexibleHistoryRewardsRecordErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnFlexibleHistoryRewardsRecordError = GetSapiV1SimpleEarnFlexibleHistoryRewardsRecordErrors[keyof GetSapiV1SimpleEarnFlexibleHistoryRewardsRecordErrors];

export type GetSapiV1SimpleEarnFlexibleHistoryRewardsRecordResponses = {
    /**
     * Flexible Rewards History
     */
    200: {
        rows: Array<{
            asset: string;
            rewards: string;
            projectId: string;
            type: string;
            time: number;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnFlexibleHistoryRewardsRecordResponse = GetSapiV1SimpleEarnFlexibleHistoryRewardsRecordResponses[keyof GetSapiV1SimpleEarnFlexibleHistoryRewardsRecordResponses];

export type GetSapiV1SimpleEarnLockedHistoryRewardsRecordData = {
    body?: never;
    path?: never;
    query: {
        positionId?: string;
        asset?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/history/rewardsRecord';
};

export type GetSapiV1SimpleEarnLockedHistoryRewardsRecordErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnLockedHistoryRewardsRecordError = GetSapiV1SimpleEarnLockedHistoryRewardsRecordErrors[keyof GetSapiV1SimpleEarnLockedHistoryRewardsRecordErrors];

export type GetSapiV1SimpleEarnLockedHistoryRewardsRecordResponses = {
    /**
     * Locked Rewards History
     */
    200: {
        rows: Array<{
            positionId: string;
            time: number;
            asset: string;
            lockPeriod: string;
            amount: string;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnLockedHistoryRewardsRecordResponse = GetSapiV1SimpleEarnLockedHistoryRewardsRecordResponses[keyof GetSapiV1SimpleEarnLockedHistoryRewardsRecordResponses];

export type PostSapiV1SimpleEarnFlexibleSetAutoSubscribeData = {
    body?: never;
    path?: never;
    query: {
        productId: string;
        /**
         * true or false
         */
        autoSubscribe: boolean;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/setAutoSubscribe';
};

export type PostSapiV1SimpleEarnFlexibleSetAutoSubscribeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SimpleEarnFlexibleSetAutoSubscribeError = PostSapiV1SimpleEarnFlexibleSetAutoSubscribeErrors[keyof PostSapiV1SimpleEarnFlexibleSetAutoSubscribeErrors];

export type PostSapiV1SimpleEarnFlexibleSetAutoSubscribeResponses = {
    /**
     * Flexible Product Subscription Response
     */
    200: {
        success: boolean;
    };
};

export type PostSapiV1SimpleEarnFlexibleSetAutoSubscribeResponse = PostSapiV1SimpleEarnFlexibleSetAutoSubscribeResponses[keyof PostSapiV1SimpleEarnFlexibleSetAutoSubscribeResponses];

export type PostSapiV1SimpleEarnLockedSetAutoSubscribeData = {
    body?: never;
    path?: never;
    query: {
        positionId: string;
        /**
         * true or false
         */
        autoSubscribe: boolean;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/setAutoSubscribe';
};

export type PostSapiV1SimpleEarnLockedSetAutoSubscribeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1SimpleEarnLockedSetAutoSubscribeError = PostSapiV1SimpleEarnLockedSetAutoSubscribeErrors[keyof PostSapiV1SimpleEarnLockedSetAutoSubscribeErrors];

export type PostSapiV1SimpleEarnLockedSetAutoSubscribeResponses = {
    /**
     * Locked Auto Subscribe
     */
    200: {
        success: boolean;
    };
};

export type PostSapiV1SimpleEarnLockedSetAutoSubscribeResponse = PostSapiV1SimpleEarnLockedSetAutoSubscribeResponses[keyof PostSapiV1SimpleEarnLockedSetAutoSubscribeResponses];

export type GetSapiV1SimpleEarnFlexiblePersonalLeftQuotaData = {
    body?: never;
    path?: never;
    query: {
        productId: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/personalLeftQuota';
};

export type GetSapiV1SimpleEarnFlexiblePersonalLeftQuotaErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnFlexiblePersonalLeftQuotaError = GetSapiV1SimpleEarnFlexiblePersonalLeftQuotaErrors[keyof GetSapiV1SimpleEarnFlexiblePersonalLeftQuotaErrors];

export type GetSapiV1SimpleEarnFlexiblePersonalLeftQuotaResponses = {
    /**
     * Flexible Personal Left Quota
     */
    200: {
        leftPersonalQuota: string;
    };
};

export type GetSapiV1SimpleEarnFlexiblePersonalLeftQuotaResponse = GetSapiV1SimpleEarnFlexiblePersonalLeftQuotaResponses[keyof GetSapiV1SimpleEarnFlexiblePersonalLeftQuotaResponses];

export type GetSapiV1SimpleEarnLockedPersonalLeftQuotaData = {
    body?: never;
    path?: never;
    query: {
        projectId: string;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/personalLeftQuota';
};

export type GetSapiV1SimpleEarnLockedPersonalLeftQuotaErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnLockedPersonalLeftQuotaError = GetSapiV1SimpleEarnLockedPersonalLeftQuotaErrors[keyof GetSapiV1SimpleEarnLockedPersonalLeftQuotaErrors];

export type GetSapiV1SimpleEarnLockedPersonalLeftQuotaResponses = {
    /**
     * Locked Personal Left Quota
     */
    200: {
        leftPersonalQuota: string;
    };
};

export type GetSapiV1SimpleEarnLockedPersonalLeftQuotaResponse = GetSapiV1SimpleEarnLockedPersonalLeftQuotaResponses[keyof GetSapiV1SimpleEarnLockedPersonalLeftQuotaResponses];

export type GetSapiV1SimpleEarnFlexibleSubscriptionPreviewData = {
    body?: never;
    path?: never;
    query: {
        productId: string;
        amount: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/subscriptionPreview';
};

export type GetSapiV1SimpleEarnFlexibleSubscriptionPreviewErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnFlexibleSubscriptionPreviewError = GetSapiV1SimpleEarnFlexibleSubscriptionPreviewErrors[keyof GetSapiV1SimpleEarnFlexibleSubscriptionPreviewErrors];

export type GetSapiV1SimpleEarnFlexibleSubscriptionPreviewResponses = {
    /**
     * Flexible Subscription Preview
     */
    200: {
        totalAmount: string;
        rewardAsset: string;
        airDropAsset: string;
        estDailyBonusRewards: string;
        estDailyRealTimeRewards: string;
        estDailyAirdropRewards: string;
    };
};

export type GetSapiV1SimpleEarnFlexibleSubscriptionPreviewResponse = GetSapiV1SimpleEarnFlexibleSubscriptionPreviewResponses[keyof GetSapiV1SimpleEarnFlexibleSubscriptionPreviewResponses];

export type GetSapiV1SimpleEarnLockedSubscriptionPreviewData = {
    body?: never;
    path?: never;
    query: {
        projectId: string;
        amount: number;
        /**
         * true or false, default true.
         */
        autoSubscribe?: boolean;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/subscriptionPreview';
};

export type GetSapiV1SimpleEarnLockedSubscriptionPreviewErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnLockedSubscriptionPreviewError = GetSapiV1SimpleEarnLockedSubscriptionPreviewErrors[keyof GetSapiV1SimpleEarnLockedSubscriptionPreviewErrors];

export type GetSapiV1SimpleEarnLockedSubscriptionPreviewResponses = {
    /**
     * Locked Product Subscription Response
     */
    200: Array<{
        rewardAsset: string;
        totalRewardAmt: string;
        extraRewardAsset: string;
        estTotalExtraRewardAmt: string;
        nextPay: string;
        nextPayDate: string;
        valueDate: string;
        rewardsEndDate: string;
        deliverDate: string;
        nextSubscriptionDate: string;
    }>;
};

export type GetSapiV1SimpleEarnLockedSubscriptionPreviewResponse = GetSapiV1SimpleEarnLockedSubscriptionPreviewResponses[keyof GetSapiV1SimpleEarnLockedSubscriptionPreviewResponses];

export type GetSapiV1SimpleEarnLockedSetRedeemOptionData = {
    body?: never;
    path?: never;
    query: {
        positionId: string;
        /**
         * SPOT,FLEXIBLE, default FLEXIBLE
         */
        redeemTo?: 'SPOT' | 'FLEXIBLE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/locked/setRedeemOption';
};

export type GetSapiV1SimpleEarnLockedSetRedeemOptionErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnLockedSetRedeemOptionError = GetSapiV1SimpleEarnLockedSetRedeemOptionErrors[keyof GetSapiV1SimpleEarnLockedSetRedeemOptionErrors];

export type GetSapiV1SimpleEarnLockedSetRedeemOptionResponses = {
    /**
     * Locked Product Redeem Option
     */
    200: {
        success: boolean;
    };
};

export type GetSapiV1SimpleEarnLockedSetRedeemOptionResponse = GetSapiV1SimpleEarnLockedSetRedeemOptionResponses[keyof GetSapiV1SimpleEarnLockedSetRedeemOptionResponses];

export type GetSapiV1SimpleEarnFlexibleHistoryRateHistoryData = {
    body?: never;
    path?: never;
    query: {
        productId: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/history/rateHistory';
};

export type GetSapiV1SimpleEarnFlexibleHistoryRateHistoryErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnFlexibleHistoryRateHistoryError = GetSapiV1SimpleEarnFlexibleHistoryRateHistoryErrors[keyof GetSapiV1SimpleEarnFlexibleHistoryRateHistoryErrors];

export type GetSapiV1SimpleEarnFlexibleHistoryRateHistoryResponses = {
    /**
     * Rate History
     */
    200: {
        rows: Array<{
            productId: string;
            asset: string;
            annualPercentageRate: string;
            time: number;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnFlexibleHistoryRateHistoryResponse = GetSapiV1SimpleEarnFlexibleHistoryRateHistoryResponses[keyof GetSapiV1SimpleEarnFlexibleHistoryRateHistoryResponses];

export type GetSapiV1SimpleEarnFlexibleHistoryCollateralRecordData = {
    body?: never;
    path?: never;
    query: {
        productId?: string;
        /**
         * UTC timestamp in ms
         */
        startTime?: number;
        /**
         * UTC timestamp in ms
         */
        endTime?: number;
        /**
         * Current querying page. Start from 1. Default:1
         */
        current?: number;
        /**
         * Default:10 Max:100
         */
        size?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/simple-earn/flexible/history/collateralRecord';
};

export type GetSapiV1SimpleEarnFlexibleHistoryCollateralRecordErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1SimpleEarnFlexibleHistoryCollateralRecordError = GetSapiV1SimpleEarnFlexibleHistoryCollateralRecordErrors[keyof GetSapiV1SimpleEarnFlexibleHistoryCollateralRecordErrors];

export type GetSapiV1SimpleEarnFlexibleHistoryCollateralRecordResponses = {
    /**
     * Collateral Record
     */
    200: {
        rows: Array<{
            amount: string;
            productId: string;
            asset: string;
            createTime: number;
            type: string;
            productName: string;
            orderId: number;
        }>;
        total: number;
    };
};

export type GetSapiV1SimpleEarnFlexibleHistoryCollateralRecordResponse = GetSapiV1SimpleEarnFlexibleHistoryCollateralRecordResponses[keyof GetSapiV1SimpleEarnFlexibleHistoryCollateralRecordResponses];

export type GetSapiV1DciProductListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Input CALL or PUT
         */
        optionType: 'CALL' | 'PUT';
        /**
         * Target exercised asset, e.g.:
         * if you subscribe to a high sell product (call option), you should input:
         * - optionType: CALL,
         * - exercisedCoin: USDT,
         * - investCoin: BNB;
         *
         * if you subscribe to a low buy product (put option), you should input:
         * - optionType: PUT,
         * - exercisedCoin: BNB,
         * - investCoin: USDT;
         */
        exercisedCoin: string;
        /**
         * Asset used for subscribing, e.g.:
         * if you subscribe to a high sell product (call option), you should input:
         * - optionType: CALL,
         * - exercisedCoin: USDT,
         * - investCoin: BNB;
         *
         * if you subscribe to a low buy product (put option), you should input:
         * - optionType: PUT,
         * - exercisedCoin: BNB,
         * - investCoin: USDT;
         */
        investCoin: string;
        /**
         * MIN 1, MAX 100; Default 100
         */
        pageSize?: string;
        /**
         * Page number, default is first page, start form 1
         */
        pageIndex?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/dci/product/list';
};

export type GetSapiV1DciProductListErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1DciProductListError = GetSapiV1DciProductListErrors[keyof GetSapiV1DciProductListErrors];

export type GetSapiV1DciProductListResponses = {
    /**
     * Dual Investment product list
     */
    200: {
        total: number;
        list: Array<{
            id: string;
            investCoin: string;
            exercisedCoin: string;
            strikePrice: string;
            duration: number;
            settleDate: number;
            purchaseDecimal: number;
            purchaseEndTime: number;
            canPurchase: boolean;
            apr: string;
            orderId: number;
            minAmount: string;
            maxAmount: string;
            createTimestamp: number;
            optionType: string;
            isAutoCompoundEnable: boolean;
            autoCompoundPlanList: Array<string>;
        }>;
    };
};

export type GetSapiV1DciProductListResponse = GetSapiV1DciProductListResponses[keyof GetSapiV1DciProductListResponses];

export type PostSapiV1DciProductSubscribeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * get id from /sapi/v1/dci/product/list
         */
        id: string;
        /**
         * get orderId from /sapi/v1/dci/product/list
         */
        orderId: string;
        depositAmount: number;
        /**
         * NONE: switch off the plan,
         * STANDARD: standard plan,
         * ADVANCED: advanced plan;
         */
        autoCompoundPlan: 'NONE' | 'STANDARD' | 'ADVANCE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/dci/product/subscribe';
};

export type PostSapiV1DciProductSubscribeErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1DciProductSubscribeError = PostSapiV1DciProductSubscribeErrors[keyof PostSapiV1DciProductSubscribeErrors];

export type PostSapiV1DciProductSubscribeResponses = {
    /**
     * Dual Investment product subscription response
     */
    200: {
        positionId: number;
        investCoin: string;
        exercisedCoin: string;
        subscriptionAmount: string;
        duration: number;
        /**
         * STANDARD, ADVANCED, this field won't display when autocompound is set to None
         */
        autoCompoundPlan: string;
        strikePrice: string;
        settleDate: number;
        purchaseStatus: string;
        apr: string;
        orderId: number;
        purchaseTime: number;
        'optionType"'?: string;
    };
};

export type PostSapiV1DciProductSubscribeResponse = PostSapiV1DciProductSubscribeResponses[keyof PostSapiV1DciProductSubscribeResponses];

export type GetSapiV1DciProductPositionsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * - PENDING: Products are purchasing, will give results later;
         * - PURCHASE_SUCCESS: purchase successfully;
         * - SETTLED: Products are finish settling;
         * - PURCHASE_FAIL: fail to purchase;
         * - REFUNDING: refund ongoing;
         * - REFUND_SUCCESS: refund to spot account successfully;
         * - SETTLING: Products are settling.
         * If don't fill this field, will response all the position status.
         */
        status?: 'PENDING' | 'PURCHASE_SUCCESS' | 'SETTLED' | 'PURCHASE_FAIL' | 'REFUNDING' | 'REFUND_SUCCESS' | 'SETTLING';
        /**
         * MIN 1, MAX 100; Default 100
         */
        pageSize?: string;
        /**
         * Page number, default is first page, start form 1
         */
        pageIndex?: number;
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/dci/product/positions';
};

export type GetSapiV1DciProductPositionsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1DciProductPositionsError = GetSapiV1DciProductPositionsErrors[keyof GetSapiV1DciProductPositionsErrors];

export type GetSapiV1DciProductPositionsResponses = {
    /**
     * Dual Investment product list
     */
    200: {
        total: number;
        list: Array<{
            id: string;
            investCoin: string;
            exercisedCoin: string;
            subscriptionAmount: string;
            strikePrice: string;
            duration: number;
            settleDate: number;
            purchaseStatus: string;
            apr: string;
            orderId: number;
            purchaseEndTime: number;
            optionType: string;
            autoCompoundPlan: string;
        }>;
    };
};

export type GetSapiV1DciProductPositionsResponse = GetSapiV1DciProductPositionsResponses[keyof GetSapiV1DciProductPositionsResponses];

export type GetSapiV1DciProductAccountsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/dci/product/accounts';
};

export type GetSapiV1DciProductAccountsErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type GetSapiV1DciProductAccountsError = GetSapiV1DciProductAccountsErrors[keyof GetSapiV1DciProductAccountsErrors];

export type GetSapiV1DciProductAccountsResponses = {
    /**
     * Dual Investment accounts
     */
    200: {
        /**
         * Total BTC amounts in Dual Investment
         */
        totalAmountInBTC: string;
        /**
         * Total USDT equivalents in BTC in Dual Investment
         */
        totalAmountInUSDT: string;
    };
};

export type GetSapiV1DciProductAccountsResponse = GetSapiV1DciProductAccountsResponses[keyof GetSapiV1DciProductAccountsResponses];

export type PostSapiV1DciProductAutoCompoundEditStatusData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Get positionId from /sapi/v1/dci/product/positions
         */
        positionId: number;
        /**
         * NONE: switch off the plan,
         * STANDARD: standard plan,
         * ADVANCED: advanced plan;
         */
        autoCompoundPlan: 'NONE' | 'STANDARD' | 'ADVANCE';
        /**
         * The value cannot be greater than 60000
         */
        recvWindow?: number;
        /**
         * UTC timestamp in ms
         */
        timestamp: number;
        /**
         * Signature
         */
        signature: string;
    };
    url: '/sapi/v1/dci/product/auto_compound/edit-status';
};

export type PostSapiV1DciProductAutoCompoundEditStatusErrors = {
    /**
     * Bad Request
     */
    400: _Error;
    /**
     * Unauthorized Request
     */
    401: _Error;
};

export type PostSapiV1DciProductAutoCompoundEditStatusError = PostSapiV1DciProductAutoCompoundEditStatusErrors[keyof PostSapiV1DciProductAutoCompoundEditStatusErrors];

export type PostSapiV1DciProductAutoCompoundEditStatusResponses = {
    /**
     * Change Auto-Compound status response
     */
    200: {
        positionId: string;
        /**
         * NONE, STANDARD, ADVANCED
         */
        autoCompoundPlan: string;
    };
};

export type PostSapiV1DciProductAutoCompoundEditStatusResponse = PostSapiV1DciProductAutoCompoundEditStatusResponses[keyof PostSapiV1DciProductAutoCompoundEditStatusResponses];

export type ClientOptions = {
    baseURL: 'https://api.binance.com' | 'https://testnet.binance.vision' | (string & {});
};